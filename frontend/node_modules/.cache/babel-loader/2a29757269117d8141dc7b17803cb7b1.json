{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport _ from 'lodash';\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code'], Dataset['Slot1'], Dataset['Slot2']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]); // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData50 = [];\n    const filterData100 = [];\n    const filterData200 = [];\n    const filterData500 = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    }\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][0] < 50) {\n        //for(let j = 0; j <courseData[0][i][7]; j++){\n        filterData50.push(courseData[0][i]); //}\n      }\n\n      if (courseData[0][i][0] >= 50 && courseData[0][i][0] < 100) {\n        //for(let j = 0; j <courseData[0][i][7]; j++){\n        filterData100.push(courseData[0][i]); //}\n      }\n\n      if (courseData[0][i][0] >= 100 && courseData[0][i][0] < 200) {\n        //for(let j = 0; j <courseData[0][i][7]; j++){\n        filterData200.push(courseData[0][i]); //}\n      }\n\n      if (courseData[0][i][0] >= 200 && courseData[0][i][0] < 500) {\n        //for(let j = 0; j <courseData[0][i][7]; j++){\n        filterData500.push(courseData[0][i]); //}\n      } //filterData.push(courseData[0][i]);\n\n    } // console.log(filterData50);\n    // console.log(filterData100);\n    // console.log(filterData200);\n    // console.log(filterData500);\n    // const create2dArray = (row, column) => {\n    //     var result = []\n    //     let test = []\n    //     let k = 0;\n    //     for(let x=0; x<filterData.length;x++){\n    //         test.push(filterData[x]);\n    //     }\n    //     for(let i = 0; i< row; i++){\n    //         result[i]= [];\n    //         for(let j = 0; j<column; j++){\n    //             result[i][j] = [];\n    //                 if(result[i][j].length == 0){\n    //                     if(k < test.length) {\n    //                         result[i][j] = [test[k]];\n    //                         } else {\n    //                            result[i][j] = [];\n    //                         }\n    //                         k++\n    //                 }else{\n    //                     result[i][j] = [];\n    //                 }\n    //         }\n    //     }\n    //     return result;\n    // }\n    //console.log(filterData.length);\n\n\n    const create2dArray50 = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData50.length; x++) {\n        test.push(filterData50[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = []; // if(result[i][j].length == 0){\n          //     if(k < test.length) {\n          //         result[i][j] = [test[k]];\n          //         } else {\n          //            result[i][j] = [];\n          //         }\n          //         k++\n          // }else{\n          //     result[i][j] = [];\n          // }\n        }\n      }\n\n      return result;\n    };\n\n    const create2dArray100 = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData100.length; x++) {\n        test.push(filterData100[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = [];\n\n          if (result[i][j].length == 0) {\n            if (k < test.length) {\n              result[i][j] = [test[k]];\n            } else {\n              result[i][j] = [];\n            }\n\n            k++;\n          } else {\n            result[i][j] = [];\n          }\n        }\n      }\n\n      return result;\n    };\n\n    const create2dArray200 = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData200.length; x++) {\n        test.push(filterData200[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = [];\n\n          if (result[i][j].length == 0) {\n            if (k < test.length) {\n              result[i][j] = [test[k]];\n            } else {\n              result[i][j] = [];\n            }\n\n            k++;\n          } else {\n            result[i][j] = [];\n          }\n        }\n      }\n\n      return result;\n    };\n\n    const create2dArray500 = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData500.length; x++) {\n        test.push(filterData500[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = [];\n\n          if (result[i][j].length == 0) {\n            if (k < test.length) {\n              result[i][j] = [test[k]];\n            } else {\n              result[i][j] = [];\n            }\n\n            k++;\n          } else {\n            result[i][j] = [];\n          }\n        }\n      }\n\n      return result;\n    };\n\n    let roomUnder50 = [];\n    let roomUnder100 = [];\n    let roomUnder200 = [];\n    let roomUnder500 = [];\n\n    const checkNumberofRoom = () => {\n      for (let i = 0; i < roomData[0].length; i++) {\n        let room = roomData[0][i][1]; //console.log(roomData[0][i][1]);\n\n        if (room < 50) {\n          roomUnder50.push(room);\n        } else if (room > 50 && room < 100) {\n          roomUnder100.push(room);\n        } else if (room > 100 && room < 200) {\n          roomUnder200.push(room);\n        } else if (room > 200) {\n          roomUnder500.push(room);\n        }\n      }\n    };\n\n    checkNumberofRoom();\n\n    const createArray100 = data => {\n      var result = [];\n\n      for (let i = 0; i < data; i++) {\n        result[i] = [];\n      }\n\n      return result;\n    };\n\n    let DataArray100 = roomUnder100.length * 38;\n    var ground100Array = createArray100(DataArray100); // console.log(roomUnder50);\n    // console.log(roomUnder100);\n    // console.log(roomUnder200);\n    // console.log(roomUnder500);\n    //let room40Column = roomData[0]\n    // let Column = roomData[0].length\n\n    let Column50 = roomUnder50.length;\n    let Column100 = roomUnder100.length;\n    let Column200 = roomUnder200.length;\n    let Column500 = roomUnder500.length;\n    let Row = 38; // filterQuotaData(EnrollmentQuota);\n\n    var ground = create2dArray50(Column50, Row);\n    var ground50 = create2dArray50(Column100, Row);\n    var ground100 = create2dArray100(Column100, Row);\n    var ground200 = create2dArray200(Column200, Row);\n    var ground500 = create2dArray500(Column500, Row); //console.log(ground50);\n    // const shuffleArray = (array) => {\n    //         for(let i = array.length-1;i>0;i--){\n    //             for(let x = array[i].length-1; x>0;x--){\n    //                 const j = Math.floor(Math.random()*(i+1));\n    //                 const q = Math.floor(Math.random()*(x+1));\n    //                 array[i][45] = [];\n    //                 array[i][46] = [];\n    //                 array[i][20] = []\n    //                 array[i][21] = []\n    //                 array[i][22] = []\n    //                 array[i][23] = []\n    //                 array[i][24] = []\n    //                 array[i][25] = []\n    //                 array[i][26] = []\n    //                 array[i][27] = []\n    //                 array[i][28] = []\n    //                 array[i][29] = []\n    //                 const temp = array[i][x];\n    //                 array[i][x] = array[j][q];\n    //                 array[j][q] = temp;\n    //             }            \n    //         }\n    //     return array;\n    // }\n    // var shuffleArr = shuffleArray(ground50)\n    // console.log(shuffleArr);\n    // const loopArray = (array) => {\n    //     for(let i =0 ; i < array.length; i++){\n    //         do{\n    //             shuffleArray(ground50);\n    //         }while(array[i][46] && array[i][46]);\n    //     }\n    //     return array;\n    // }\n    // let looping =loopArray(shuffleArr);\n    // console.log(looping);\n\n    const AntAlgo50 = data => {\n      var result = [];\n\n      for (let i = 0; i < data; i++) {\n        result[i] = 100;\n      }\n\n      return result;\n    };\n\n    var AntArr50 = AntAlgo50(DataArray100); //console.log(AntArr50);\n\n    const AntAlgoInsert50 = array => {\n      var result = [];\n      let test = [];\n      let k = 0;\n      let iInc = 1;\n      let v = 0;\n      let prevTemp = [];\n      let count100 = 0;\n      let countNotI100 = 0;\n      let countNotJ100 = 0;\n      let countNot100 = 0;\n      let countBothNot100 = 0;\n      let undefined1 = 0;\n      let noSolution = 0;\n\n      for (let x = 0; x < filterData100.length; x++) {\n        test.push(filterData100[x]);\n      }\n\n      console.log(test.length);\n\n      for (let i = array.length - 1; i > 0; i--) {\n        if (k < test.length) {\n          let slot1 = test[k][9];\n          let slot2 = test[k][10];\n\n          if (slot1 == 2) {\n            const j = Math.floor(Math.random() * (i + 1));\n\n            if (array[i] == 100 && array[i + 1] == 100) {\n              array[i] = array[j];\n              array[i + 1] = array[j + 1];\n              array[j] = test[k];\n              array[j + 1] = test[k];\n              count100 += 1;\n\n              if (array[j - 1] == 100 && array[j + 2] == 100) {\n                array[j - 1] = 50;\n                array[j + 2] = 50;\n              } // if(array[j+38] == 100 && array[j+39] == 100 ){\n              //     array[j-1] = 0;\n              //     array[j+2] = 0;\n              // }\n\n\n              let z = array[j];\n\n              if (z < array.length) {\n                z += 38;\n                console.log(array[z]);\n                console.log(array[j]);\n              }\n\n              if (slot2 == 2) {\n                //console.log('slot 2 is 2')\n                let y = 0;\n\n                if (y < test.length) {}\n\n                y++;\n              } else if (slot2 == 1) {//console.log('slot 2 is 1')\n              } else if (slot2 == 0) {//console.log('slot 2 is 0')\n              }\n\n              if (array[j - 1] == 50 || array[j + 2] == 50) {\n                array[j - 1] = 100;\n                array[j + 2] = 100;\n              }\n            } else if (array[i] != 100 || array[i + 1] != 100) {\n              test.push(test[k]);\n              countNot100 += 1;\n            }\n          }\n        }\n\n        k++;\n      }\n\n      console.log(\"is equal: \" + count100);\n      console.log(\"One Equal: \" + countNot100);\n      console.log(\"One undefined: \" + undefined1);\n      return array;\n    };\n\n    var AntArrIns50 = AntAlgoInsert50(AntArr50);\n    console.log(AntArrIns50);\n\n    const checkAmountData = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] != 100 && array[i] != undefined) {\n          count += 1;\n        }\n      }\n\n      return count;\n    };\n\n    var checkAmount = checkAmountData(AntArrIns50);\n    console.log(checkAmount);\n\n    if (checkAmount < 133) {//alert(checkAmount);\n    } else if (checkAmount > 133) {//alert('Greater than 133');\n    } //console.log(testArray);\n\n\n    let sameCourseData2 = [];\n    let sameCourseData = [];\n\n    const sameGroupCourseViolationData = array => {\n      let k = 0;\n\n      do {\n        for (let i = 0; i < array.length; i++) {\n          try {\n            sameCourseData.push(array[i][k][0][6]);\n          } catch {} //console.log(k);\n\n        }\n\n        sameCourseData2.push(sameCourseData.splice(0));\n        k++;\n      } while (k < 50); // for(let i = 0; i < array.length; i++){\n      //     console.log(array[i]);\n      // }\n\n\n      return sameCourseData;\n    }; //sameGroupCourseViolationData(AntArrIns50);\n    //console.log(sameCourseData2);\n    //Check for the H1 violation: same group attend same class\n\n\n    function sameGroupCourseViolation(arry) {\n      let count = 0;\n      let i = 0;\n\n      do {\n        const uniqueElements = new Set(arry[i]);\n        const filteredElements = arry[i].filter(item => {\n          if (uniqueElements.has(item)) {\n            uniqueElements.delete(item);\n          } else {\n            return item;\n          }\n        });\n        let test = [...new Set(filteredElements)];\n        count += test.length;\n        i++;\n      } while (i < 50);\n\n      return count;\n    } // var sameGroupCourse= sameGroupCourseViolation(sameCourseData2);\n    // console.log('Hard Constraint (Same Group) Violation: '+ sameGroupCourse);\n    //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\n\n\n    let arrayOfCourse = [];\n\n    const accomodateRoomViolation = array => {\n      let count = 0; //console.log(roomData[0].length)\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          //console.log(array[i][j][0]);\n          arrayOfCourse.push(array[i][j][0]);\n\n          try {} catch {}\n        }\n      }\n\n      return count;\n    }; //accomodateRoomViolation(AntArrIns50);\n    //console.log('Hard Constraint (Accomodate Room) Violation:' + accomodateRoomData);\n    //console.log(arrayOfCourse)\n\n\n    let roomRepeat = [];\n\n    const repeatRoomData = array => {\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          try {\n            for (let p = 0; p < array[i].length; p++) {\n              roomRepeat.push(roomData[i][j][1]);\n            }\n          } catch {}\n        }\n      }\n\n      return roomRepeat;\n    }; //repeatRoomData(AntArrIns50);\n\n\n    const compareData = (array, room) => {\n      let count = 0;\n\n      for (let x = 0; x < room.length; x++) {\n        //console.log(room[x]);\n        try {\n          //console.log(array[x][0]);\n          if (array[x][0] <= room[x]) {//console.log(array[x][0]);\n            //console.log(room[x]);\n          } else {\n            if (room[x] == 350 || room[x] == 150) {//count -= 1\n            } else {\n              // console.log(array[x][0]);\n              // console.log(room[x]);\n              count += 1;\n            }\n          }\n        } catch {}\n      }\n\n      return count;\n    };\n\n    let accomodateRoom = compareData(arrayOfCourse, roomRepeat);\n    console.log(\"Hard Constraint (Accomodate Room) Violation:\" + accomodateRoom); //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\n\n    const checkSolatJummatViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i][45].length == 1 || array[i][46].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    }; //var SolatJumaat = checkSolatJummatViolation(AntArrIns50);\n    //console.log('Hard Constraint (Solat Jumaat) Violation: '+ SolatJumaat);\n    // //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\n    // const sameTeacherViolation = (array) => {\n    //     let count = 0;\n    //     for (let i = 0; i < array.length; i++) {\n    //          for (let k = i + 1; k < array.length; k++) {\n    //              for(let j = 0 ; j < array[i].length; j++){\n    //                     if(array[i][j][0] != undefined && array[k][j][0] != undefined){\n    //                         if (array[i][j][0][5] != undefined && array[k][j][0][5] != undefined){\n    //                             if (array[i][j][0][5] == array[k][j][0][5]){\n    //                                 count += 1;\n    //                             } \n    //                         }\n    //                     }      \n    //              }\n    //         }\n    //     }\n    //     return count;\n    // };\n    // var sameTeacher= sameTeacherViolation(shuffleArr);\n    // console.log('Hard Constraint (Same Teacher) Violation: '+ sameTeacher);\n\n\n    let sameTeacherData2 = [];\n    let sameTeacherData = [];\n\n    const sameTeacherViolationData = array => {\n      let k = 0;\n\n      do {\n        for (let i = 0; i < array.length; i++) {\n          try {\n            sameTeacherData.push(array[i][k][0][5]);\n          } catch {} //console.log(k);\n\n        }\n\n        sameTeacherData2.push(sameTeacherData.splice(0));\n        k++;\n      } while (k < 50); // for(let i = 0; i < array.length; i++){\n      //     console.log(array[i]);\n      // }\n\n\n      return sameCourseData;\n    }; //sameTeacherViolationData(AntArrIns50);\n\n\n    function sameTeacherViolation(arry) {\n      let count = 0;\n      let i = 0;\n\n      do {\n        const uniqueElements = new Set(arry[i]);\n        const filteredElements = arry[i].filter(item => {\n          if (uniqueElements.has(item)) {\n            uniqueElements.delete(item);\n          } else {\n            return item;\n          }\n        });\n        let test = [...new Set(filteredElements)];\n        count += test.length;\n        i++;\n      } while (i < 50);\n\n      return count;\n    } // var sameTeacher= sameTeacherViolation(sameTeacherData2);\n    // console.log('Hard Constraint (Same Teacher2) Violation: '+ sameTeacher);\n    //Check for the S1 violation: student have class at the end of the day\n\n\n    const endOfTheDayClassViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {}\n\n        if (array[i][49].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    }; // var endOfTheDayClass = endOfTheDayClassViolation(AntArrIns50);\n    // console.log('Soft Constraint (End Of The Day Class) Violation: '+ endOfTheDayClass);\n    //Check for the S2 violation: student have 2 class in a row\n\n\n    const twoClassInARowViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          for (let p = j + 1; p < array[i].length; p++) {\n            try {\n              for (let q = 0; q < array[i][j].length; q++) {\n                if (array[i][j][q][6] == array[i][p][q][6] && array[i][j][q][1] != array[i][p][q][1]) {\n                  count += 1;\n                }\n              }\n            } catch {}\n          }\n        }\n      }\n\n      return count;\n    }; // var twoClassInARow = twoClassInARowViolation(AntArrIns50);\n    // console.log('Soft Constraint (two class in a row) Violation: '+ twoClassInARow);\n    // const checkViolateHardCont = () => {\n    //     let totalHC = sameGroupCourse + accomodateRoom + SolatJumaat + sameTeacher\n    //     //console.log(\"Total Hard Constraint Violation: \" + totalHC);\n    //     return totalHC;\n    // };\n    // const checkViolateSoftCont = () => {\n    //     let totalSC = twoClassInARow + endOfTheDayClass\n    //     //console.log(\"Total Soft Constraint Violation: \" + totalSC);\n    //     return totalSC;\n    // };\n    // checkViolateHardCont()\n    // checkViolateSoftCont()\n    // const downloadTxtFile = (array) => {\n    //     const element = document.createElement(\"a\");\n    //     let test1 = JSON.stringify(array);\n    //     const file = new Blob([test1], {\n    //       type: \"text/plain\"\n    //     });\n    //     element.href = URL.createObjectURL(file);\n    //     element.download = \"myFile.txt\";\n    //     document.body.appendChild(element);\n    //     element.click();\n    //   };\n    //   downloadTxtFile(shuffleArr)\n\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["find","forEach","indexOf","React","useEffect","useState","useContext","useParams","_","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","roomName","roomSize","filterData50","filterData100","filterData200","filterData500","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","create2dArray50","row","column","result","test","k","x","j","create2dArray100","create2dArray200","create2dArray500","roomUnder50","roomUnder100","roomUnder200","roomUnder500","checkNumberofRoom","createArray100","data","DataArray100","ground100Array","Column50","Column100","Column200","Column500","Row","ground","ground50","ground100","ground200","ground500","AntAlgo50","AntArr50","AntAlgoInsert50","iInc","v","prevTemp","count100","countNotI100","countNotJ100","countNot100","countBothNot100","undefined1","noSolution","slot1","slot2","Math","floor","random","z","y","AntArrIns50","checkAmountData","count","undefined","checkAmount","sameCourseData2","sameCourseData","sameGroupCourseViolationData","splice","sameGroupCourseViolation","arry","uniqueElements","Set","filteredElements","has","delete","arrayOfCourse","accomodateRoomViolation","roomRepeat","repeatRoomData","p","compareData","accomodateRoom","checkSolatJummatViolation","sameTeacherData2","sameTeacherData","sameTeacherViolationData","sameTeacherViolation","endOfTheDayClassViolation","twoClassInARowViolation","q"],"mappings":"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","sourcesContent":["import { find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport _ from 'lodash';\r\n\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code'],Dataset['Slot1'],Dataset['Slot2']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData50  = [];\r\n            const filterData100  = [];\r\n            const filterData200  = [];\r\n            const filterData500  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n \r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n\r\n                for(let i = 0; i< courseData[0].length;i++){\r\n                    if (courseData[0][i][0] < 50) {\r\n                        //for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData50.push(courseData[0][i]);\r\n                        //}\r\n                    }\r\n                    if (courseData[0][i][0] >= 50 && courseData[0][i][0] < 100) {\r\n                        //for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData100.push(courseData[0][i]);\r\n                        //}\r\n                    }\r\n                    if (courseData[0][i][0] >= 100 && courseData[0][i][0] < 200) {\r\n                        //for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData200.push(courseData[0][i]);\r\n                        //}\r\n                    }\r\n                    if (courseData[0][i][0] >= 200 && courseData[0][i][0] < 500) {\r\n                        //for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData500.push(courseData[0][i]);\r\n                        //}\r\n                    }\r\n                    //filterData.push(courseData[0][i]);\r\n                }\r\n\r\n                \r\n                // console.log(filterData50);\r\n                // console.log(filterData100);\r\n                // console.log(filterData200);\r\n                // console.log(filterData500);\r\n\r\n                // const create2dArray = (row, column) => {\r\n                //     var result = []\r\n                //     let test = []\r\n                //     let k = 0;\r\n                //     for(let x=0; x<filterData.length;x++){\r\n                //         test.push(filterData[x]);\r\n                //     }\r\n                //     for(let i = 0; i< row; i++){\r\n                //         result[i]= [];\r\n                //         for(let j = 0; j<column; j++){\r\n                //             result[i][j] = [];\r\n                //                 if(result[i][j].length == 0){\r\n                //                     if(k < test.length) {\r\n                //                         result[i][j] = [test[k]];\r\n                //                         } else {\r\n                //                            result[i][j] = [];\r\n                //                         }\r\n                //                         k++\r\n                //                 }else{\r\n                //                     result[i][j] = [];\r\n                //                 }\r\n                //         }\r\n                //     }\r\n                //     return result;\r\n                // }\r\n                //console.log(filterData.length);\r\n\r\n                const create2dArray50 = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData50.length;x++){\r\n                        test.push(filterData50[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                                // if(result[i][j].length == 0){\r\n                                //     if(k < test.length) {\r\n                                //         result[i][j] = [test[k]];\r\n                                //         } else {\r\n                                //            result[i][j] = [];\r\n                                //         }\r\n                                //         k++\r\n                                // }else{\r\n                                //     result[i][j] = [];\r\n                                // }\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n                const create2dArray100 = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData100.length;x++){\r\n                        test.push(filterData100[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                                if(result[i][j].length == 0){\r\n                                    if(k < test.length) {\r\n                                        result[i][j] = [test[k]];\r\n                                        } else {\r\n                                           result[i][j] = [];\r\n                                        }\r\n                                        k++\r\n                                }else{\r\n                                    result[i][j] = [];\r\n                                }\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n                const create2dArray200 = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData200.length;x++){\r\n                        test.push(filterData200[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                                if(result[i][j].length == 0){\r\n                                    if(k < test.length) {\r\n                                        result[i][j] = [test[k]];\r\n                                        } else {\r\n                                           result[i][j] = [];\r\n                                        }\r\n                                        k++\r\n                                }else{\r\n                                    result[i][j] = [];\r\n                                }\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n                const create2dArray500 = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData500.length;x++){\r\n                        test.push(filterData500[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                                if(result[i][j].length == 0){\r\n                                    if(k < test.length) {\r\n                                        result[i][j] = [test[k]];\r\n                                        } else {\r\n                                           result[i][j] = [];\r\n                                        }\r\n                                        k++\r\n                                }else{\r\n                                    result[i][j] = [];\r\n                                }\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n            let roomUnder50 = []\r\n            let roomUnder100 = []\r\n            let roomUnder200 = []\r\n            let roomUnder500 = []\r\n            const checkNumberofRoom = () => {\r\n                for(let i = 0; i < roomData[0].length; i++){\r\n                    let room = roomData[0][i][1]\r\n                    //console.log(roomData[0][i][1]);\r\n                    if(room < 50){\r\n                        roomUnder50.push(room)\r\n                    }else if(room > 50 && room < 100){\r\n                        roomUnder100.push(room)\r\n\r\n                    }else if(room > 100 && room < 200){\r\n                        roomUnder200.push(room)\r\n\r\n                    }else if(room > 200){\r\n                        roomUnder500.push(room)\r\n                    }\r\n                }\r\n            }\r\n            checkNumberofRoom();\r\n\r\n\r\n            const createArray100 = (data) => {\r\n                var result = []\r\n\r\n                    for(let i = 0; i<data; i++){\r\n                        result[i] = []\r\n                    }\r\n                return result;\r\n            }\r\n\r\n            let DataArray100 = roomUnder100.length * 38;\r\n            var ground100Array = createArray100(DataArray100);\r\n\r\n            // console.log(roomUnder50);\r\n            // console.log(roomUnder100);\r\n            // console.log(roomUnder200);\r\n            // console.log(roomUnder500);\r\n            //let room40Column = roomData[0]\r\n            // let Column = roomData[0].length\r\n            let Column50 = roomUnder50.length\r\n            let Column100 = roomUnder100.length\r\n            let Column200 = roomUnder200.length\r\n            let Column500 = roomUnder500.length\r\n            let Row = 38\r\n            // filterQuotaData(EnrollmentQuota);\r\n            var ground = create2dArray50(Column50,Row);\r\n            var ground50 = create2dArray50(Column100,Row);\r\n            var ground100 = create2dArray100(Column100,Row);\r\n            var ground200 = create2dArray200(Column200,Row);\r\n            var ground500 = create2dArray500(Column500,Row);\r\n\r\n\r\n\r\n            //console.log(ground50);\r\n\r\n            \r\n            // const shuffleArray = (array) => {\r\n            //         for(let i = array.length-1;i>0;i--){\r\n            //             for(let x = array[i].length-1; x>0;x--){\r\n            //                 const j = Math.floor(Math.random()*(i+1));\r\n            //                 const q = Math.floor(Math.random()*(x+1));\r\n            //                 array[i][45] = [];\r\n            //                 array[i][46] = [];\r\n            //                 array[i][20] = []\r\n            //                 array[i][21] = []\r\n            //                 array[i][22] = []\r\n            //                 array[i][23] = []\r\n            //                 array[i][24] = []\r\n            //                 array[i][25] = []\r\n            //                 array[i][26] = []\r\n            //                 array[i][27] = []\r\n            //                 array[i][28] = []\r\n            //                 array[i][29] = []\r\n            //                 const temp = array[i][x];\r\n            //                 array[i][x] = array[j][q];\r\n            //                 array[j][q] = temp;\r\n            //             }            \r\n            //         }\r\n            //     return array;\r\n            // }\r\n\r\n            // var shuffleArr = shuffleArray(ground50)\r\n            // console.log(shuffleArr);\r\n\r\n\r\n            // const loopArray = (array) => {\r\n            //     for(let i =0 ; i < array.length; i++){\r\n            //         do{\r\n            //             shuffleArray(ground50);\r\n            //         }while(array[i][46] && array[i][46]);\r\n            //     }\r\n            //     return array;\r\n            // }\r\n            // let looping =loopArray(shuffleArr);\r\n            // console.log(looping);\r\n\r\n\r\n            const AntAlgo50 = (data) => {\r\n                var result = []\r\n\r\n                for(let i = 0; i< data; i++){\r\n                    result[i]= 100;\r\n                }\r\n                return result;\r\n            }\r\n            var AntArr50 = AntAlgo50(DataArray100);\r\n            //console.log(AntArr50);\r\n\r\n            const AntAlgoInsert50 = (array) => {\r\n                var result = []\r\n                let test = []\r\n                let k = 0;\r\n                let iInc = 1\r\n                let v = 0\r\n                let prevTemp = []\r\n                let count100 = 0;\r\n                let countNotI100 = 0;\r\n                let countNotJ100 = 0;\r\n                let countNot100 = 0;\r\n                let countBothNot100 = 0;\r\n                let undefined1 = 0;\r\n                let noSolution = 0;\r\n                for(let x=0; x<filterData100.length;x++){\r\n                    test.push(filterData100[x]);\r\n                }\r\n                console.log(test.length);\r\n                for(let i = array.length-1;i>0;i--){\r\n                        if(k < test.length){\r\n                            let slot1 = test[k][9]\r\n                            let slot2 = test[k][10]\r\n                            if(slot1 == 2){\r\n                                    const j = Math.floor(Math.random()*(i+1));\r\n                                    if(array[i] == 100 && array[i+1] == 100){\r\n                                        array[i] = array[j];\r\n                                        array[i+1] = array[j+1];\r\n                                        array[j] = test[k];\r\n                                        array[j+1] = test[k];\r\n                                        count100 +=1\r\n                                        if(array[j-1] == 100 && array[j+2] == 100 ){\r\n                                            array[j-1] = 50;\r\n                                            array[j+2] = 50;\r\n                                        }\r\n                                        // if(array[j+38] == 100 && array[j+39] == 100 ){\r\n                                        //     array[j-1] = 0;\r\n                                        //     array[j+2] = 0;\r\n                                        // }\r\n                                        let z = array[j];\r\n                                        if(z < array.length){\r\n                                            z += 38\r\n                                            console.log(array[z])\r\n                                            console.log(array[j])\r\n                                        }\r\n                                        if(slot2 == 2){\r\n                                            //console.log('slot 2 is 2')\r\n                                            let y = 0\r\n                                            if(y < test.length){\r\n                                                \r\n                                            }\r\n                                            y++\r\n                                        }\r\n                                        else if(slot2 == 1){\r\n                                            //console.log('slot 2 is 1')\r\n                                        }\r\n                                        else if(slot2 == 0){\r\n                                            //console.log('slot 2 is 0')\r\n                                        }\r\n\r\n                                        if(array[j-1] == 50 || array[j+2] == 50){\r\n                                            array[j-1] = 100\r\n                                            array[j+2] = 100\r\n                                        }\r\n                                    }   \r\n                                    else if(array[i]!=100 || array[i+1] != 100){\r\n                                        test.push(test[k]);\r\n                                        countNot100 +=1\r\n                                    }                      \r\n                            }\r\n                            \r\n                        }\r\n                        k++\r\n                }\r\n\r\n                console.log(\"is equal: \"+ count100)\r\n                console.log(\"One Equal: \"+countNot100)\r\n                console.log(\"One undefined: \"+ undefined1)\r\n                return array;\r\n            }\r\n            var AntArrIns50 = AntAlgoInsert50(AntArr50);\r\n            console.log(AntArrIns50);\r\n\r\n            const checkAmountData = (array) => {\r\n                let count = 0\r\n                for(let i = 0; i < array.length; i++){\r\n                    if(array[i] != 100 && array[i] != undefined){\r\n                        count += 1\r\n                    }\r\n                }\r\n                return count\r\n            }\r\n            var checkAmount = checkAmountData(AntArrIns50)\r\n            console.log(checkAmount);\r\n            if(checkAmount < 133){\r\n                //alert(checkAmount);\r\n            }\r\n            else if (checkAmount >133){\r\n                //alert('Greater than 133');\r\n            }\r\n\r\n            //console.log(testArray);\r\n\r\n            let sameCourseData2 = [] \r\n            let sameCourseData = []\r\n            const sameGroupCourseViolationData = (array) => {\r\n                let k = 0 ;           \r\n                do{\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        try{\r\n                            sameCourseData.push(array[i][k][0][6]);\r\n                        }catch{}\r\n                        //console.log(k);\r\n                            }   \r\n                            sameCourseData2.push(sameCourseData.splice(0))\r\n                k++\r\n                }while (k < 50)\r\n\r\n                // for(let i = 0; i < array.length; i++){\r\n                //     console.log(array[i]);\r\n                // }\r\n                    return sameCourseData;\r\n            }\r\n\r\n            //sameGroupCourseViolationData(AntArrIns50);\r\n            //console.log(sameCourseData2);\r\n\r\n\r\n            //Check for the H1 violation: same group attend same class\r\n            function sameGroupCourseViolation(arry) {\r\n                let count = 0;\r\n                let i = 0\r\n                do{\r\n                    const uniqueElements = new Set(arry[i]);\r\n                    const filteredElements = arry[i].filter(item => {\r\n                        if (uniqueElements.has(item)) {\r\n                            uniqueElements.delete(item);\r\n                        } else {\r\n                                return item;\r\n                        }\r\n                    });\r\n                    let test = [...new Set(filteredElements)]\r\n                    count += test.length;\r\n                    i++\r\n                }while(i < 50)\r\n                return count\r\n            }\r\n            // var sameGroupCourse= sameGroupCourseViolation(sameCourseData2);\r\n            // console.log('Hard Constraint (Same Group) Violation: '+ sameGroupCourse);\r\n\r\n\r\n            //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\r\n            let arrayOfCourse = [];\r\n            const accomodateRoomViolation = (array) => {\r\n                let count = 0;\r\n                //console.log(roomData[0].length)\r\n                        for(let i = 0; i< array.length; i++){\r\n                            for(let j = 0; j< array[i].length; j++){\r\n                                //console.log(array[i][j][0]);\r\n                                arrayOfCourse.push(array[i][j][0])\r\n                             try{\r\n                                \r\n                             }catch{}\r\n                            }\r\n                        }\r\n                        return count;\r\n                    }\r\n        \r\n                   //accomodateRoomViolation(AntArrIns50);\r\n                //console.log('Hard Constraint (Accomodate Room) Violation:' + accomodateRoomData);\r\n\r\n                    //console.log(arrayOfCourse)\r\n\r\n                    let roomRepeat = []\r\n                    const repeatRoomData = (array) => {\r\n        \r\n                        for(let i = 0; i< array.length; i++){\r\n                            for(let j = 0; j< array[i].length; j++){\r\n                             try{\r\n                                 for(let p = 0; p< array[i].length; p++){\r\n                                     roomRepeat.push(roomData[i][j][1]);\r\n                                 }\r\n                             }catch{}\r\n                            }\r\n                        }\r\n                        return roomRepeat\r\n                    }\r\n                    \r\n                    //repeatRoomData(AntArrIns50);\r\n\r\n                    const compareData = (array, room) => {\r\n                        let count = 0\r\n                        for(let x =0; x< room.length; x++){\r\n                            //console.log(room[x]);\r\n                            try{\r\n                                //console.log(array[x][0]);\r\n                                if(array[x][0] <= room[x]){\r\n                                    //console.log(array[x][0]);\r\n                                    //console.log(room[x]);\r\n                                }else{\r\n                                    if(room[x] == 350 || room[x] == 150){\r\n                                        //count -= 1\r\n                                    }else{\r\n                                        // console.log(array[x][0]);\r\n                                        // console.log(room[x]);\r\n                                        count += 1   \r\n                                    }\r\n                                }\r\n                            }catch{}\r\n                        }\r\n                        return count\r\n                    }\r\n\r\n                    let accomodateRoom = compareData(arrayOfCourse, roomRepeat)\r\n                    console.log(\"Hard Constraint (Accomodate Room) Violation:\" + accomodateRoom);\r\n\r\n\r\n            //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\r\n            const checkSolatJummatViolation = (array) => {\r\n                let count = 0\r\n                for(let i = 0; i < array.length; i++){\r\n                    if(array[i][45].length == 1 || array[i][46].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n\r\n            //var SolatJumaat = checkSolatJummatViolation(AntArrIns50);\r\n            //console.log('Hard Constraint (Solat Jumaat) Violation: '+ SolatJumaat);\r\n\r\n\r\n\r\n            // //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\r\n            // const sameTeacherViolation = (array) => {\r\n            //     let count = 0;\r\n            //     for (let i = 0; i < array.length; i++) {\r\n            //          for (let k = i + 1; k < array.length; k++) {\r\n            //              for(let j = 0 ; j < array[i].length; j++){\r\n            //                     if(array[i][j][0] != undefined && array[k][j][0] != undefined){\r\n            //                         if (array[i][j][0][5] != undefined && array[k][j][0][5] != undefined){\r\n            //                             if (array[i][j][0][5] == array[k][j][0][5]){\r\n            //                                 count += 1;\r\n            //                             } \r\n            //                         }\r\n            //                     }      \r\n            //              }\r\n            //         }\r\n                        \r\n            //     }\r\n            //     return count;\r\n            // };\r\n            // var sameTeacher= sameTeacherViolation(shuffleArr);\r\n            // console.log('Hard Constraint (Same Teacher) Violation: '+ sameTeacher);\r\n\r\n\r\n\r\n\r\n            let sameTeacherData2 = [] \r\n            let sameTeacherData = []\r\n            const sameTeacherViolationData = (array) => {\r\n                let k = 0 ;           \r\n                do{\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        try{\r\n                            sameTeacherData.push(array[i][k][0][5]);\r\n                        }catch{}\r\n                        //console.log(k);\r\n                            }   \r\n                            sameTeacherData2.push(sameTeacherData.splice(0))\r\n                k++\r\n                }while (k < 50)\r\n\r\n                // for(let i = 0; i < array.length; i++){\r\n                //     console.log(array[i]);\r\n                // }\r\n                    return sameCourseData;\r\n            }\r\n            //sameTeacherViolationData(AntArrIns50);\r\n\r\n\r\n\r\n            function sameTeacherViolation(arry) {\r\n                let count = 0;\r\n                let i = 0\r\n                do{\r\n                    const uniqueElements = new Set(arry[i]);\r\n                    const filteredElements = arry[i].filter(item => {\r\n                        if (uniqueElements.has(item)) {\r\n                            uniqueElements.delete(item);\r\n                        } else {\r\n                                return item;\r\n                        }\r\n                    });\r\n                    let test = [...new Set(filteredElements)]\r\n                    count += test.length;\r\n                    i++\r\n                }while(i < 50)\r\n                return count\r\n            }\r\n            // var sameTeacher= sameTeacherViolation(sameTeacherData2);\r\n            // console.log('Hard Constraint (Same Teacher2) Violation: '+ sameTeacher);\r\n\r\n \r\n\r\n            //Check for the S1 violation: student have class at the end of the day\r\n            const endOfTheDayClassViolation = (array) => {\r\n                let count = 0;\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                    }\r\n                    if(array[i][49].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n            // var endOfTheDayClass = endOfTheDayClassViolation(AntArrIns50);\r\n            // console.log('Soft Constraint (End Of The Day Class) Violation: '+ endOfTheDayClass);\r\n\r\n            //Check for the S2 violation: student have 2 class in a row\r\n            const twoClassInARowViolation = (array) => {\r\n                let count = 0;\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                        for(let p =j+1; p< array[i].length; p++){\r\n                                try{\r\n                                    for(let q = 0; q< array[i][j].length; q++){\r\n                                        if(array[i][j][q][6] == array[i][p][q][6] && array[i][j][q][1] != array[i][p][q][1]){\r\n                                            count +=1;\r\n                                        }\r\n                                    }\r\n                                }catch{}   \r\n                        }\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n            // var twoClassInARow = twoClassInARowViolation(AntArrIns50);\r\n            // console.log('Soft Constraint (two class in a row) Violation: '+ twoClassInARow);\r\n\r\n            // const checkViolateHardCont = () => {\r\n            //     let totalHC = sameGroupCourse + accomodateRoom + SolatJumaat + sameTeacher\r\n            //     //console.log(\"Total Hard Constraint Violation: \" + totalHC);\r\n            //     return totalHC;\r\n            // };\r\n            // const checkViolateSoftCont = () => {\r\n            //     let totalSC = twoClassInARow + endOfTheDayClass\r\n            //     //console.log(\"Total Soft Constraint Violation: \" + totalSC);\r\n            //     return totalSC;\r\n            // };\r\n        \r\n            // checkViolateHardCont()\r\n            // checkViolateSoftCont()\r\n\r\n\r\n            // const downloadTxtFile = (array) => {\r\n            //     const element = document.createElement(\"a\");\r\n            //     let test1 = JSON.stringify(array);\r\n            //     const file = new Blob([test1], {\r\n            //       type: \"text/plain\"\r\n            //     });\r\n            //     element.href = URL.createObjectURL(file);\r\n            //     element.download = \"myFile.txt\";\r\n            //     document.body.appendChild(element);\r\n            //     element.click();\r\n            //   };\r\n            //   downloadTxtFile(shuffleArr)\r\n        }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}