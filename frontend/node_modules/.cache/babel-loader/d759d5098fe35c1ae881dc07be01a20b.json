{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GenerateSchedulePage\\\\GenerateSchedulePage.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\"; // import Ant from \"../Algorithm/Ant.js\";\n// import Colony from \"../Algorithm/Colony\";\n\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\nimport './GenerateSchedulePage.css';\n\nconst GenerateSch = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState();\n  const [Keys, setKeys] = useState(); //console.log(\"props dataset:\"+ props.test)\n  // useEffect(()=>{\n  //     const sendRequest = async () =>{\n  //         setIsLoading(true);\n  //         try{\n  //         // const response = await fetch('http://localhost:5000/api/user/');\n  //         const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n  //         const responsedata = await response.json();\n  //         let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\n  //         let ertData =JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\n  //         const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n  //         const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\n  //         const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n  //         const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n  //         const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n  //         const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Code\n  //         const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Course Code\n  //         const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Course Code\n  //         const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Course Code\n  //         const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Course Code\n  //         const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Total Student']); //Extract Course Code\n  //         const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Course Code\n  //         // console.log(\"X value= \" + ertCName);\n  //         // for (let i = 0 ; i<test1.length; i++){\n  //         //      let x = test1[i].Location;\n  //         //      console.log(\"X value= \" +x);\n  //         // }\n  //         //console.log(\"Test 1: \"+ test1);\n  //         //let stringifyData = JSON.stringify(responsedata.files.Dataset);\n  //         //let setK = Object.keys(responsedata.files.Dataset[1])\n  //         //setKeys([setK])\n  //         //console.log(\"STRINGIFYDATA: \" + stringifyData);\n  //         //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\n  //         //console.log(\"Test: \" + test1);\n  //         setCsvData([ertLocation]);\n  //         //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\n  //         if (!response.ok){\n  //             throw new Error(responsedata.message);\n  //         }\n  //         setLoaadedFile(responsedata.users);\n  //         setIsLoading(true);\n  //         }catch(err){\n  //             console.log(err.message);\n  //         }\n  //         setIsLoading(false);\n  //     };\n  //     sendRequest();\n  // },[]);\n  // let headers = [\n  //     { label: \"Location\", key:Keys  },\n  //     // { label: \"Room\", key: \"Room\" },\n  //     // { label: \"Size\", key: \"Size\" },\n  //     // { label: \"Slot\", key: \"Slot\" }\n  //   ];\n  //   //console.log(\"CsvData: \" + CsvData);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GenerateSch-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Generate Schedule Page\"));\n};\n\nexport default GenerateSch;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GenerateSchedulePage/GenerateSchedulePage.js"],"names":["React","useEffect","useState","useRef","CSVLink","LoadingSpinner","ArraySchedule","GenerateSch","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","Keys","setKeys"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,yBAA3B,C,CACA;AACA;;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAO,4BAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,cAAb,IAA+BV,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,EAAtC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,EAAhC,CAJyB,CAKzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAJJ,CADJ;AAeH,CAjFD;;AAmFA,eAAeK,WAAf","sourcesContent":["import React,{ useEffect,useState, useRef } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n// import Ant from \"../Algorithm/Ant.js\";\r\n// import Colony from \"../Algorithm/Colony\";\r\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\r\n\r\nimport './GenerateSchedulePage.css';\r\n\r\nconst GenerateSch = props => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState();\r\n    const [Keys, setKeys] = useState();\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    // useEffect(()=>{\r\n    //     const sendRequest = async () =>{\r\n    //         setIsLoading(true);\r\n    //         try{\r\n    //         // const response = await fetch('http://localhost:5000/api/user/');\r\n    //         const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n    //         const responsedata = await response.json();\r\n    //         let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n    //         let ertData =JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\r\n            \r\n    //         const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n    //         const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\r\n    //         const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n    //         const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n    //         const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n    //         const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Code\r\n    //         const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Course Code\r\n    //         const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Course Code\r\n    //         const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Course Code\r\n    //         const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Course Code\r\n    //         const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Total Student']); //Extract Course Code\r\n    //         const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Course Code\r\n    //         // console.log(\"X value= \" + ertCName);\r\n    //         // for (let i = 0 ; i<test1.length; i++){\r\n    //         //      let x = test1[i].Location;\r\n    //         //      console.log(\"X value= \" +x);\r\n    //         // }\r\n    //         //console.log(\"Test 1: \"+ test1);\r\n    //         //let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n    //         //let setK = Object.keys(responsedata.files.Dataset[1])\r\n    //         //setKeys([setK])\r\n    //         //console.log(\"STRINGIFYDATA: \" + stringifyData);\r\n    //         //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\r\n    //         //console.log(\"Test: \" + test1);\r\n    //         setCsvData([ertLocation]);\r\n    //         //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\r\n    //         if (!response.ok){\r\n    //             throw new Error(responsedata.message);\r\n    //         }\r\n    //         setLoaadedFile(responsedata.users);\r\n    //         setIsLoading(true);\r\n    //         }catch(err){\r\n    //             console.log(err.message);\r\n    //         }\r\n    //         setIsLoading(false);\r\n            \r\n    //     };\r\n    //     sendRequest();\r\n    // },[]);\r\n    // let headers = [\r\n    //     { label: \"Location\", key:Keys  },\r\n    //     // { label: \"Room\", key: \"Room\" },\r\n    //     // { label: \"Size\", key: \"Size\" },\r\n    //     // { label: \"Slot\", key: \"Slot\" }\r\n    //   ];\r\n\r\n    //   //console.log(\"CsvData: \" + CsvData);\r\n\r\n\r\n    return (\r\n        <div className=\"GenerateSch-section\">\r\n                            {/* {CsvData && CsvData.map((Dataset)=>(\r\n                    <h2>{Dataset}</h2>\r\n                ))} */}\r\n            <h1>\r\n                Generate Schedule Page\r\n                {/* { CsvData && CsvData.map((Dataset) =>(<CSVLink data = {Dataset} headers={headers}>Download me</CSVLink>))} */}\r\n                {/* {isLoading && <div className=\"center\"><LoadingSpinner/></div>} */}\r\n            </h1>\r\n            {/* <ArraySchedule/> */}\r\n\r\n            {/* {!isLoading && loadedFile} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GenerateSch;"]},"metadata":{},"sourceType":"module"}