{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const classError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","classError","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAE,gBAAOU,GAAP,EAAqD;AAAA,QAAzCC,MAAyC,uEAAjC,KAAiC;AAAA,QAA1BC,IAA0B,uEAArB,IAAqB;AAAA,QAAfC,OAAe,uEAAP,EAAO;AAClFR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AAGA,QAAG;AACC,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA,OAH8B;AAI9BO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJQ,OAAN,CAA5B;AAMA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AACAd,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CAAkCC,OAAO,IAAIA,OAAO,KAAKV,aAAzD,CAA7B;;AAEA,UAAG,CAACI,QAAQ,CAACO,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACH;;AACDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACH,KAfD,CAgBA,OAAMO,GAAN,EAAU;AACNrB,MAAAA,QAAQ,CAACqB,GAAG,CAACD,OAAL,CAAR;AACAtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMuB,GAAN;AACH;AACJ,GA3B8B,EA2B5B,EA3B4B,CAA/B;;AA6BA,QAAOC,UAAU,GAAG,MAAM;AACtBtB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Bc,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAQ;AAAC5B,IAAAA,SAAD;AAAYE,IAAAA,KAAZ;AAAmBG,IAAAA;AAAnB,GAAR;AACH,CA7CM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback( async (url, method= 'GET', body=null, headers={}) => {\r\n        setIsLoading(true);\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n\r\n        try{\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortCtrl.signal\r\n            });\r\n            const responseData = await response.json();\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\r\n    \r\n            if(!response.ok){\r\n                throw new Error(responseData.message);\r\n            }\r\n            setIsLoading(false);\r\n            return responseData;\r\n        }\r\n        catch(err){\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n    }, []);\r\n\r\n    const  classError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    }, []);\r\n    return  {isLoading, error, sendRequest};\r\n};"]},"metadata":{},"sourceType":"module"}