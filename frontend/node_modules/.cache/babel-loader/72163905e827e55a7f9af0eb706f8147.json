{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { find, forEach } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\n        //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\n        // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]); // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n\n  if (!isLoading && loadedFile) {\n    //console.log(roomData[0][0][0]);\n    const create2dArray = (row, column) => {\n      var x = '';\n      var result = [];\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = null;\n        }\n      }\n\n      return result;\n    };\n\n    const insertData = () => {\n      let z = '';\n      let q = [courseData[0][0][0]]; //console.log(roomData[0].length)// check quoata \n      //console.log(courseData[0][0][0])\n      //let x = 20\n      //let y = 10\n\n      for (let i = 0; i < roomData[0].length; i++) {\n        z = roomData[0][i][1]; //console.log(z);\n\n        q.find(function (item) {\n          return item == z;\n        });\n      } // for(let j=0; j<courseData[0].length; j++){\n      //     q = courseData[0][j][0];\n      // }\n      // if(z <= q){\n      //     return true;\n      // }\n      // console.log(\"z: \" + z);\n      // console.log(\"q: \" + q);\n      // if(x >= y){\n      //     return courseData[0][0][1];\n      // }\n\n    };\n\n    let Column = roomData[0].length;\n    let Row = 51;\n    var ground = create2dArray(Column, Row);\n    var x = insertData();\n    console.log(x); //console.log(ground)\n  }\n\n  const checkViolateHardCont = () => {};\n\n  const checkViolateSoftCont = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["find","forEach","React","useEffect","useState","useContext","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","create2dArray","row","column","x","result","i","j","insertData","z","q","length","item","Column","Row","ground","checkViolateHardCont","checkViolateSoftCont"],"mappings":";AAAA,SAASA,IAAT,EAAeC,OAAf,QAA8B,QAA9B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAG7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,UAAD,EAAaC,cAAb,IAA+BP,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C,CAN6B,CAO7B;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMa,WAAW,GAAG,YAAW;AAC3BP,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH;AACA;AACA,cAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BC,OAA1C,CAApB,CALG,CAMH;AACA;AAEA;;AACA,cAAMC,OAAO,GAAGP,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CE,GAA9C,CAAkDF,OAAO,IAAG,CAACA,OAAO,CAAC,MAAD,CAAR,EAAiBA,OAAO,CAAC,MAAD,CAAxB,CAA5D,CAAhB,CAVG,CAU6G;;AAChHZ,QAAAA,WAAW,CAAC,CAACa,OAAD,CAAD,CAAX;AAEA,cAAME,SAAS,GAAGT,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CE,GAA9C,CAAkDF,OAAO,IAAI,CAACA,OAAO,CAAC,kBAAD,CAAR,EAA6BA,OAAO,CAAC,aAAD,CAApC,CAA7D,CAAlB,CAbG,CAamI;;AACtIV,QAAAA,aAAa,CAAC,CAACa,SAAD,CAAD,CAAb,CAdG,CAeH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAI,CAACX,QAAQ,CAACY,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUX,YAAY,CAACY,OAAvB,CAAN;AACH;;AACDpB,QAAAA,cAAc,CAACU,aAAD,CAAd;AACAZ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OAlCD,CAkCC,OAAMuB,GAAN,EAAU;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACD,OAAhB;AACH;;AACDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,KAzCD;;AA0CAO,IAAAA,WAAW;AACd,GA5CQ,EA4CP,EA5CO,CAAT;;AA8CI,MAAG,CAACR,SAAD,IAAcE,UAAjB,EAA4B;AACxB;AAEA,UAAMyB,aAAa,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACnC,UAAIC,CAAC,GAAG,EAAR;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEJ,GAAlB,EAAuBI,CAAC,EAAxB,EAA2B;AACvBD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAU,EAAV;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACJ,MAAjB,EAAyBI,CAAC,EAA1B,EAA6B;AACzBF,UAAAA,MAAM,CAACC,CAAD,CAAN,CAAUC,CAAV,IAAe,IAAf;AACH;AACJ;;AACD,aAAOF,MAAP;AAEH,KAXD;;AAaA,UAAMG,UAAU,GAAG,MAAM;AACrB,UAAIC,CAAC,GAAG,EAAR;AACA,UAAIC,CAAC,GAAG,CAAC9B,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiB,CAAjB,CAAD,CAAR,CAFqB,CAGrB;AACA;AACA;AACA;;AACA,WAAI,IAAI0B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE5B,QAAQ,CAAC,CAAD,CAAR,CAAYiC,MAA9B,EAAsCL,CAAC,EAAvC,EAA0C;AACtCG,QAAAA,CAAC,GAAG/B,QAAQ,CAAC,CAAD,CAAR,CAAY4B,CAAZ,EAAe,CAAf,CAAJ,CADsC,CAEtC;;AACAI,QAAAA,CAAC,CAAC5C,IAAF,CAAO,UAAS8C,IAAT,EAAc;AACjB,iBAAOA,IAAI,IAAIH,CAAf;AACH,SAFD;AAGH,OAboB,CAcrB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,KA1BD;;AA4BA,QAAII,MAAM,GAAGnC,QAAQ,CAAC,CAAD,CAAR,CAAYiC,MAAzB;AACA,QAAIG,GAAG,GAAG,EAAV;AACA,QAAIC,MAAM,GAAGd,aAAa,CAACY,MAAD,EAAQC,GAAR,CAA1B;AACA,QAAIV,CAAC,GAAGI,UAAU,EAAlB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ,EAhDwB,CAiDxB;AACH;;AAGL,QAAMY,oBAAoB,GAAG,MAAM,CAElC,CAFD;;AAGA,QAAMC,oBAAoB,GAAG,MAAM,CAElC,CAFD;;AAKA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CA3HD;;AA6HA,eAAe7C,aAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { find, forEach } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\r\n            //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            //console.log(roomData[0][0][0]);\r\n            \r\n            const create2dArray = (row, column) => {\r\n                var x = '';\r\n                var result = []\r\n                for(let i = 0; i< row; i++){\r\n                    result[i]=[];\r\n                    for(let j = 0; j<column; j++){   \r\n                        result[i][j] = null;\r\n                    }\r\n                }\r\n                return result;\r\n        \r\n            }\r\n\r\n            const insertData = () => {\r\n                let z = '';\r\n                let q = [courseData[0][0][0]];\r\n                //console.log(roomData[0].length)// check quoata \r\n                //console.log(courseData[0][0][0])\r\n                //let x = 20\r\n                //let y = 10\r\n                for(let i = 0; i <roomData[0].length; i++){\r\n                    z = roomData[0][i][1];\r\n                    //console.log(z);\r\n                    q.find(function(item){\r\n                        return item == z;\r\n                    });\r\n                }\r\n                // for(let j=0; j<courseData[0].length; j++){\r\n                //     q = courseData[0][j][0];\r\n                // }\r\n                \r\n                // if(z <= q){\r\n                //     return true;\r\n                // }\r\n                // console.log(\"z: \" + z);\r\n                // console.log(\"q: \" + q);\r\n                // if(x >= y){\r\n                //     return courseData[0][0][1];\r\n                // }\r\n            }\r\n\r\n            let Column = roomData[0].length\r\n            let Row = 51\r\n            var ground = create2dArray(Column,Row);\r\n            var x = insertData();\r\n            console.log(x);\r\n            //console.log(ground)\r\n        }\r\n\r\n\r\n    const checkViolateHardCont = () => {\r\n\r\n    };\r\n    const checkViolateSoftCont = () => {\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}