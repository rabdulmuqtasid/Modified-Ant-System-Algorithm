{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { create, find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\nlet finalDataAll = [];\nlet finalDataAllElective = [];\nlet checkHardConstraintOutsite = 0;\nlet checkSoftConstraintOutsite = 0;\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState();\n  const [CsvData, setCsvData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code'], Dataset['Slot1'], Dataset['Slot2']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]);\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const lecturerData = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData50 = [];\n    const filterData100 = [];\n    const filterData200 = [];\n    const filterData500 = [];\n    const filterDataElective50 = [];\n    const filterDataElective100 = [];\n    const filterDataElective200 = [];\n    const filterDataElective500 = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      let lecturer = [courseData[0][i][5]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n      lecturer.reduce(function (results, item, index, array) {\n        results[index] = item;\n        lecturerData.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    }\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\n    const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\n    notDuplicatesLecturer.pop(); //console.log(notDuplicatesLecturer)\n\n    let courseDataXElective = [];\n    let courseDataWithElective = [];\n    courseData[0].pop(); //saparate faculty course with the elective course\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) != 'TMU') {\n        courseData[0][i].splice();\n\n        if (courseData[0][i][1].slice(0, 3) != 'TMX') {\n          courseData[0][i].splice();\n          courseDataXElective.push(courseData[0][i]);\n        }\n      }\n    } //saparate elective course with the faculty course\n\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) == 'TMU' || courseData[0][i][1].slice(0, 3) == 'TMX') {\n        courseDataWithElective.push(courseData[0][i]);\n      }\n    } //insert data without elective courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataXElective.length; i++) {\n      if (courseDataXElective[i][0] < 50) {\n        filterData50.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\n        filterData100.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200) {\n        filterData200.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\n        filterData500.push(courseDataXElective[i]);\n      }\n    } //console.log(filterData50)\n    //insert data without faculty courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataWithElective.length; i++) {\n      if (courseDataWithElective[i][0] < 50) {\n        filterDataElective50.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\n        filterDataElective100.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200) {\n        filterDataElective200.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\n        filterDataElective500.push(courseDataWithElective[i]);\n      }\n    } // console.log(filterDataElective50);\n    // console.log(filterDataElective100);\n    // console.log(filterDataElective200);\n    // console.log(filterDataElective500);\n\n\n    let roomUnder50 = [];\n    let roomUnder100 = [];\n    let roomUnder200 = [];\n    let roomUnder500 = [];\n\n    const checkNumberofRoom = () => {\n      for (let i = 0; i < roomData[0].length; i++) {\n        let room = roomData[0][i][1]; //console.log(roomData[0][i][1]);\n\n        if (room < 50) {\n          roomUnder50.push(room);\n        } else if (room > 50 && room < 100) {\n          roomUnder100.push(room);\n        } else if (room > 100 && room < 200) {\n          roomUnder200.push(room);\n        } else if (room > 200) {\n          roomUnder500.push(room);\n        }\n      }\n    };\n\n    checkNumberofRoom();\n\n    const createArray = data => {\n      var result = [];\n\n      for (let i = 0; i < data; i++) {\n        result[i] = [];\n      }\n\n      return result;\n    };\n\n    let DataArray50 = roomUnder50.length * 38;\n    let DataArray100 = roomUnder100.length * 38;\n    let DataArray200 = roomUnder200.length * 38;\n    let DataArray500 = roomUnder500.length * 38;\n    let combineArray = DataArray50 + DataArray100 + DataArray200 + DataArray500;\n    let DataArrayElective50 = roomUnder50.length * 10;\n    let DataArrayElective100 = roomUnder100.length * 10;\n    let DataArrayElective200 = roomUnder200.length * 10;\n    let DataArrayElective500 = roomUnder500.length * 10;\n    let combineArrayElective = DataArrayElective50 + DataArrayElective100 + DataArrayElective200 + DataArrayElective500; //----------------------------------------------------------------------------------------------------------------------------------------\n\n    var checkTotalHardContraintsAll = 0;\n    var checkTotalSoftContraintsAll = 0;\n\n    function sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const antSystem = () => {\n      //______________________________________________________________________________________________________________________________________________\n      //Faculty courses\n      //create 1d array for dataset less than 50\n      const array1D50 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArr50 = array1D50(combineArray);\n      let insertedData50_Slot2_2 = [];\n      let insertedData50_Slot2_1 = [];\n      let arrayLength50 = DataArray50;\n\n      const AntAlgoInsert50 = array => {\n        //array.length = 1064 (last index = 1063)\n        //arrayLength50 = 646 (last index = 645)\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let count = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterData50.length; x++) {\n          test.push(filterData50[x]);\n        } //for(let x = 0 ; x< array.length; x++){\n\n\n        for (let i = arrayLength50 - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let b = 0; // if(b < totalRoom){\n            //     try{\n            //         if( array[i][5] != 100 && array[i][5] == test[k][5]){\n            //             //console.log(array[u+38*b])\n            //             if( array[i+38*b] ==100){\n            //                 array[i+38*b] = 0\n            //                 //console.log(true)\n            //             }\n            //             if( array[i-38*b]==100){\n            //                 array[i-38*b] = 0\n            //                 //console.log(false)\n            //             }\n            //         }\n            //     }catch{}\n            // }\n            // b++ \n\n            if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; //for(let u = 0; u < array.length; u++){\n\n                  if (b < totalRoom) {\n                    try {\n                      if (array[i][5] != 100 && array[i][5] == test[k][5]) {\n                        //console.log(array[u+38*b])\n                        //console.log(true)\n                        if (array[i + 38 * b] == 100) {\n                          array[i + 38 * b] = 1;\n                        }\n\n                        if (array[i - 38 * b] == 100) {\n                          array[i - 38 * b] = 1; //console.log(false)\n                        }\n                      }\n                    } catch {}\n                  }\n\n                  b++; //}     \n                  //const j = Math.floor(Math.random()*(i+1));\n\n                  if (array[i] == 100 && array[i - 1] == 100) {\n                    array[i] = array[j];\n                    array[i - 1] = array[j - 1];\n                    array[j] = test[k];\n                    array[j - 1] = test[k];\n                  } else if (array[i] == 100 && array[i + 1] == 100) {\n                    array[i] = array[j];\n                    array[i + 1] = array[j + 1];\n                    array[j] = test[k];\n                    array[j + 1] = test[k];\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  }\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n\n                  count += 1;\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n\n                  if (b < totalRoom) {\n                    try {\n                      if (array[i][5] != 100 && array[i][5] == test[k][5]) {\n                        //console.log(array[u+38*b])\n                        //console.log(true)\n                        if (array[i + 38 * b] == 100) {\n                          array[i + 38 * b] = 0; //console.log(true)\n                        }\n\n                        if (array[i - 38 * b] == 100) {\n                          array[i - 38 * b] = 0; //console.log(false)\n                        }\n                      }\n                    } catch {}\n                  }\n\n                  b++; //const j = Math.floor(Math.random()*(i+1));\n\n                  if (array[i] == 100 && array[i - 1] == 100) {\n                    array[i] = array[j];\n                    array[i - 1] = array[j - 1];\n                    array[j] = test[k];\n                    array[j - 1] = test[k];\n                  } else if (array[i] == 100 && array[i + 1] == 100) {\n                    array[i] = array[j];\n                    array[i + 1] = array[j + 1];\n                    array[j] = test[k];\n                    array[j + 1] = test[k];\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //    for(let x = 0; x < array.length ; x++){\n                  //        if(array[x] == 0){\n                  //            array[x] = 100;\n                  //        }\n                  //    }\n\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        } //      else if(hourMS == 2){\n        //          const j = Math.floor(Math.random()*(i+1));\n        //          if(array[i] == 100){\n        //              if(array[i-1] == 100){\n        //                  array[i] = array[j];\n        //                  array[i-1] = array[j-1];\n        //                  array[j] = test[k];\n        //                  array[j-1] = test[k];\n        //              }else if(array[i+1] == 100){\n        //                  array[i] = array[j];\n        //                  array[i+1] = array[j+1];\n        //                  array[j] = test[k];\n        //                  array[j+1] = test[k];\n        //              }\n        //              else{\n        //                  remainderArray.push(test[k]);\n        //              }\n        //          }else{\n        //              remainderArray.push(test[k]);\n        //          }\n        //      }\n        //      else if(hourMS == 3){\n        //         const j = Math.floor(Math.random()*(i+1));\n        //         if(array[i] == 100){\n        //             if(array[i-1] == 100 && array[i+1]==100){// slot 3 hours in 1 go\n        //                 array[i] = array[j];\n        //                 array[i-1] = array[j-1];\n        //                 array[i+1] = array[j+1];\n        //                 array[j] = test[k];\n        //                 array[j-1] = test[k];\n        //                 array[j+1] = test[k];\n        //             }else if(array[i-1] == 100){//slot 2 hours in 1 go\n        //                 array[i] = array[j];\n        //                 array[i-1] = array[j-1];\n        //                 array[j] = test[k];\n        //                 array[j-1] = test[k];\n        //                 insertedData50_Slot2_1.push(test[k])\n        //             }else if(array[i+1] == 100){//slot 2 hours in 1 go\n        //                 array[i] = array[j];\n        //                 array[i+1] = array[j+1];\n        //                 array[j] = test[k];\n        //                 array[j+1] = test[k];\n        //                 insertedData50_Slot2_1.push(test[k])\n        //             }else if(array[i] == 100 ){//slot 1 hours in 1 go\n        //                 array[i] = array[j];\n        //                 array[j] = test[k];\n        //                 remainderArraySlot1.push(test[k])\n        //             }\n        //         }else{\n        //             remainderArray.push(test[k]);\n        //         }\n        //     }\n        //  }\n        //  k++  \n        //}\n\n\n        console.log(count); //fullfill the slot 3\n        //  for(let x = 0; x< array.length; x++){\n        //      if(array[x] == 100 && array[x+1] ==100){\n        //          if(k3 < remainderArraySlot1.length){\n        //              array[x] = remainderArraySlot1[k3]\n        //              array[x+1] = remainderArraySlot1[k3]\n        //          }\n        //          k3++   \n        //      }\n        //  }\n        //console.log(remainderArray);\n        //  for(let x = 0; x< array.length; x++){\n        //          if(array[x] == 100 && array[x+1] ==100){\n        //              if(k2 < remainderArray.length){\n        //                  array[x] = remainderArray[k2]\n        //                  array[x+1] = remainderArray[k2]\n        //              }\n        //              try{\n        //                  let slot2 = remainderArray[k2][10]\n        //                  if(slot2 == 1){\n        //                      insertedData50_Slot2_1.push(remainderArray[k2])\n        //                  }\n        //                  if(slot2 == 2){\n        //                     insertedData50_Slot2_2.push(remainderArray[k2])\n        //                 }\n        //              }catch{}\n        //          k2++   \n        //      }\n        //  }\n        //  if(array[-1] != undefined){\n        //      insertedData50_Slot2_1.push(array[-1]);\n        //  }\n\n        return array;\n      };\n\n      var AntArrIns50 = AntAlgoInsert50(AntArr50); //console.log(AntArrIns50);\n\n      const slot2Equal1for50 = array => {\n        let k = 0;\n        let test2 = [];\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (k < insertedData50_Slot2_1.length) {\n              array[x] = insertedData50_Slot2_1[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      let varchec50 = slot2Equal1for50(AntArr50);\n\n      const slot2Equal2for50 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedData50_Slot2_2.length) {\n              array[x] = insertedData50_Slot2_2[k];\n              array[x + 1] = insertedData50_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedData50_Slot2_1.push(array[-1]);\n        } else {}\n\n        return array;\n      };\n\n      slot2Equal2for50(AntArr50);\n      let reshuffle50 = [];\n      let notDupeShuffle50 = [];\n\n      const check1Teacher_50 = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffle50.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffle50.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffle50.length; x++) {\n          try {\n            if (reshuffle50[x][0] != reshuffle50[x + 1][0]) {\n              notDupeShuffle50.push(reshuffle50[x]);\n            }\n          } catch {}\n        }\n\n        var last = reshuffle50.splice(-1)[0];\n        notDupeShuffle50.push(last);\n      }; //check1Teacher_50(AntArr50)\n\n\n      const reshuffle50_50 = (data, array) => {\n        //console.log(data)\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38; // for(let x =0; x < data.length; x ++){\n        //     for(let i =0; i < array.length ; i++){\n        //         try{\n        //             if(data[x][0] == i){\n        //                 array[i] = 1\n        //             }\n        //         }catch{}\n        //     }\n        // }\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != 100) {\n                if (array[i][5] == data[k][1][5]) {\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              //count +=1\n              try {\n                if (data[k][1] != undefined) {\n                  array[i] = data[k][1];\n                }\n              } catch {}\n            }\n\n            k++;\n          }\n        } // for(let i = 0; i < array.length; i++){\n        //     if(array[i] == 100){\n        //         if(k < data.length){\n        //         //count +=1\n        //         const j = Math.floor(Math.random()*(i+1));\n        //         try{\n        //             if(data[k][1] != undefined){\n        //                 array[i] = array[j];\n        //                 array[j] = data[k][1];\n        //             }\n        //         }catch{}\n        //         }\n        //         k++\n        //     }\n        // }\n        // for(let x = 0; x< array.length; x++){\n        //     if(array[x] == 0){\n        //         array[x] = 100\n        //     }\n        //     if(array[x] == 1){\n        //         array[x] = 100\n        //     }\n        // }\n        // console.log(\"count: \"+ count)\n\n      }; //reshuffle50_50(notDupeShuffle50,AntArr50);\n\n\n      const checkAmountData50_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 50 && array[i] != 0 && array[i] != undefined && array[i] != 1) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData50_2(AntArrIns50);\n      console.log(AntArrIns50);\n      console.log(\"Amount of data: \" + checkAmount_2);\n\n      const checkAmountData50_0 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 0) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_0 = checkAmountData50_0(AntArr50);\n      console.log(\"zero counter: \" + checkAmount_0); //______________________________________________________________________________________________________________________________________________\n      //______________________________________________________________________________________________________________________________________________\n      //---------------------------------------------------------------------------------------------------------------------------------------------\n      //----------------------------------------------------------------------------------------------------------------------------------------------\n      //console.log(dataCombine)\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n      // Hard Constraint \n      // H1: No student attend more than one class/ event at the same time\n      // H2: The room is large enough to accomodate all of the student in attendace while also meeting the requirement \n      // H3: At any given time, each room can onle have one course booked\n      // H4: No student attend class during 12:00 pm -2:00 due to solat jumaat\n      // H5: One teacher can only teach one class at one time.\n      //Check for the H1 violation: same group attend more than 1 class at 1 time\n\n      const check1Group = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n        }\n\n        for (let x = 1; x <= totalRoom; x++) {\n          try {\n            //for(let x= 1 ; x <= totalRoom ; x++){\n            for (let i = 0; i < array.length; i++) {\n              indexArray = x * 37;\n\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 1 && array[i + indexArray] != 0) {\n                try {\n                  //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      // console.log(i)\n                      // console.log(i+indexArray)\n                      count += 1;\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      }; //var checkH1_ALL = check1Group(dataCombine)\n      //console.log(checkH1_ALL);\n      //var checkH1_ALLElective = check1Group(dataCombineElective)\n      //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\n\n\n      const checkRoomQuota = array => {\n        let count = 0;\n        return count;\n      }; //var checkH2_ALL = checkRoomQuota(dataCombine)\n      //var checkH2_ALLElective = checkRoomQuota(dataCombineElective)\n      //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\n\n\n      const checkSolatJummat = array => {\n        let count = 0;\n        return count;\n      }; //var checkH4_ALL = checkSolatJummat(dataCombine)\n      //var checkH4_ALLElective = checkSolatJummat(dataCombineElective)\n      //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\n\n\n      const check1Teacher = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 1 && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    //    console.log(i)\n                    //    console.log(i+indexArray)\n                    count += 1;\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      }; //var checkH5_ALL = check1Teacher(dataCombine)\n      //console.log(checkH5_ALL)\n      //var checkH5_ALLElective = check1Group(dataCombineElective)\n      //----------------------------------------------------------------------------------------------------------------------------------------\n      // Soft Constraint \n      // S1: A student has a class schedule toward the end of the day\n      // S2: A student have more than two class in a row\n      //Check for the S1 violation: student have class at the end of the day\n\n\n      const checkEndOfClass = array => {\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          let indexArray = x * 37;\n\n          if (array[indexArray] != 100) {\n            count = 1;\n          }\n        }\n\n        return count;\n      }; // var checkS1_50 = checkEndOfClass(AntArr50)\n      // var checkS1_100 = checkEndOfClass(AntArr100)\n      // var checkS1_200 = checkEndOfClass(AntArr200)\n      // var checkS1_500 = checkEndOfClass(AntArr500)\n      // var checkS1_Elective50 = checkEndOfClass(AntArrElective50)\n      // var checkS1_Elective100 = checkEndOfClass(AntArrElective100)\n      // var checkS1_Elective200 = checkEndOfClass(AntArrElective200)\n      // var checkS1_Elective500 = checkEndOfClass(AntArrElective500)\n      //Check for the S2 violation: teacher have 2 class in a row\n\n\n      const check2ClassInARow = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          try {\n            if (array[i][5] != undefined && array[i + 3][5] != undefined && array[i + 2][5] != undefined && array[i + 4][5] != undefined) {\n              if (array[i][5] == array[i + 3][5] && array[i + 2][5] == array[i + 4][5]) {\n                count = 1;\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      }; // var checkS2_50 = check2ClassInARow(AntArr50)\n      // var checkS2_100 = check2ClassInARow(AntArr100)\n      // var checkS2_200 = check2ClassInARow(AntArr200)\n      // var checkS2_500 = check2ClassInARow(AntArr500)\n      // var checkS2_Elective50 = check2ClassInARow(AntArrElective50)\n      // var checkS2_Elective100 = check2ClassInARow(AntArrElective100)\n      // var checkS2_Elective200 = check2ClassInARow(AntArrElective200)\n      // var checkS2_Elective500 = check2ClassInARow(AntArrElective500)\n      //----------------------------------------------------------------------------------------------------------------------------------------------\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n      //Check total Hard Constraint\n      // const checkTotalHardContraint = () => {\n      //    let count =0\n      //    //let totalH1 = checkH1_ALL\n      // //    let totalH2 = checkH2_ALL\n      // //    let totalH4 = checkH4_ALL\n      // //    let totalH5 = checkH5_ALL\n      // //    let totalH1_Elective = checkH1_ALLElective\n      // //    let totalH2_Elective = checkH2_ALLElective\n      // //    let totalH4_Elective = checkH4_ALLElective\n      // //    let totalH5_Elective = checkH5_ALLElective\n      //    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5 + totalH1_Elective + totalH2_Elective + totalH4_Elective + totalH5_Elective\n      //    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5\n      //    //let totalHC = totalH2 + totalH4 + totalH5\n      //    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5 \n      // //    if( totalHC != 0){\n      // //        count +=1\n      // //    }   \n      //    return totalHC\n      // }\n      // var checkTotalHardContraints = checkTotalHardContraint()\n      // console.log(\"Total Hard Constraint: \"+checkTotalHardContraints)\n      //----------------------------------------------------------------------------------------------------------------------------------------\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n      // const checkTotalSoftContraint = () => {\n      //     let count =0\n      //     let totalS1 = checkS1_50 + checkS1_100 + checkS1_200 + checkS1_500 + checkS1_Elective50 + checkS1_Elective100 + checkS1_Elective200 + checkS1_Elective500\n      //     let totalS2 = checkS2_50 + checkS2_100 + checkS2_200 + checkS2_500 + checkS2_Elective50 + checkS2_Elective100 + checkS2_Elective200 + checkS2_Elective500\n      //     if(totalS1 != 0){\n      //         count +=1\n      //     }\n      //     if(totalS2 != 0){\n      //         count +=1\n      //     }   \n      //     return count\n      // }\n      // var checkTotalSoftContraints = checkTotalSoftContraint()\n      //console.log(\"Total Soft Constraint: \"+checkTotalSoftContraints)\n      //----------------------------------------------------------------------------------------------------------------------------------------------\n      // const change100ToEmpty = (data) => {\n      //     for(let i = 0; i< data.length; i++){\n      //         if(data[i] == 100){\n      //             data[i] = [];\n      //         }\n      //     }\n      //     return data;\n      // }\n      // //let finalData = change100ToEmpty(combineData)\n      // const change100ToEmptyElective = (data) => {\n      //     for(let i = 0; i< data.length; i++){\n      //         if(data[i] == 100){\n      //             data[i] = [];\n      //         }\n      //     }\n      //     return data;\n      // }\n      // let finalDataElective = change100ToEmptyElective(combineElectiveData)\n      // const checkMissingData = (data50,data100,data200,data500,dataE50,dataE100,dataE200,dataE500) => {\n      //     let countData = []\n      //     for(let i = 0; i< courseData[0].length;i++){\n      //         for(let j = 0; j <courseData[0][i][7]; j++){\n      //             countData.push(courseData[0][i]);\n      //         }\n      //     }\n      //     let totalGenerateScheduleData = data50 + data100 + data200 + data500 + dataE50 + dataE100 + dataE200 + dataE500\n      //     if(countData.length == totalGenerateScheduleData){\n      //     }else{\n      //     }\n      // }\n      // //checkMissingData(checkAmount50,checkAmount100,checkAmount200,checkAmount500,checkAmountElective50,checkAmountElective100,checkAmountElective200,checkAmountElective500)\n      // checkTotalHardContraintsAll = checkTotalHardContraints\n      // checkTotalSoftContraintsAll = checkTotalSoftContraints\n      // //finalDataAll.push(finalData)\n      // finalDataAllElective.push(finalDataElective)\n      // //return {checkTotalHardContraints,checkTotalSoftContraints,finalData,finalDataAllElective}\n      // return {checkTotalHardContraints,checkTotalSoftContraints,finalDataAllElective}\n\n    };\n\n    for (let i = 1; i <= 1; i++) {\n      let antSystemAlgo = antSystem();\n    } // -------------------------------------------------------------------------------------------------------------------------------------------\n    // let trigger = 0\n    // const iteration = () => {\n    //         antSystem()\n    //         let globalBestHS = checkTotalHardContraintsAll \n    //         let globalBestSS = checkTotalSoftContraintsAll\n    //         let globalBestScehdule = finalDataAll[0]\n    //         let globalBestScehduleElective = finalDataAllElective[0]\n    //     for(let i= 1; i <= 1; i++){\n    //         antSystem()\n    //         let localBestHS = checkTotalHardContraintsAll \n    //         let localBestSS = checkTotalSoftContraintsAll\n    //         let localBestScehdule = finalDataAll[0]\n    //         let localBestScehduleElective = finalDataAllElective[0]\n    //             console.log(\"iteraion: \" + i)\n    //             if(globalBestHS > localBestHS ){\n    //                 globalBestHS = localBestHS\n    //                 globalBestSS = localBestSS\n    //                 globalBestScehdule = localBestScehdule\n    //                 globalBestScehduleElective = localBestScehduleElective\n    //             }\n    //             if(localBestHS == 0){\n    //                 console.log(\"iteraion: \" + i)\n    //                 console.log(\"workable solution is found\")\n    //                 globalBestHS = localBestHS\n    //                 globalBestSS = localBestSS\n    //                 globalBestScehdule = localBestScehdule\n    //                 globalBestScehduleElective = localBestScehduleElective\n    //                 console.log(\"Workable Gloabal best HS: \"+globalBestHS)\n    //                 console.log(\"Workable Gloabal best SS: \" +globalBestSS)\n    //                 //console.log(finalDataAll[0])\n    //                 trigger = 1\n    //                 return [finalDataAll[0], finalDataAllElective[0]]\n    //             }\n    //             else if(localBestHS == 0 && localBestSS == 0){\n    //                 console.log(\"iteraion: \" + i)\n    //                 console.log(\"perfect solution is found\")\n    //                 globalBestHS = localBestHS\n    //                 globalBestSS = localBestSS\n    //                 globalBestScehdule = localBestScehdule\n    //                 console.log(\"Perfect Gloabal best HS: \"+globalBestHS)\n    //                 console.log(\"Perfect Gloabal best SS: \" +globalBestSS)\n    //                 console.log(finalDataAll[0])\n    //                 trigger = 1\n    //                 return [finalDataAll[0], finalDataAllElective[0]]\n    //             }\n    //     }\n    //     return [finalDataAll[0], finalDataAllElective[0]]\n    // }\n    // let interations = iteration()\n    // let presentableData = []\n    // let presentableDataElective = []\n    // if(trigger == 1){\n    // //shot course code, course name and lecturer    \n    // const changeToPresentationData = (data) => {\n    //     for(let i= 0; i <= data[0].length; i++){\n    //         try {\n    //             presentableData.push([data[0][i][1],data[0][i][2],data[0][i][5]])\n    //         } catch (error) {\n    //         }\n    //     }\n    //     for(let i= 0; i <= data[1].length; i++){\n    //         try {\n    //             presentableDataElective.push([data[1][i][1],data[1][i][2],data[1][i][5]])\n    //         } catch (error) {\n    //         }\n    //     }\n    // }\n    // changeToPresentationData(interations)\n    // let allRoomName = []\n    // for(let i = 0; i < roomData[0].length; i++){\n    //     allRoomName.push(roomData[0][i][0])\n    // }\n    // allRoomName.unshift(\"Room\");\n    // if(allRoomName.pop() == undefined){\n    // }\n    // let weekday = ['Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday',\n    // 'Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday',\n    // 'Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday',\n    // 'Friday','Friday','Friday','Friday','Friday','Friday','Friday','Friday']\n    // let wed = ['Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday']\n    // const create2dArray = (weekdayArray,partDay,arrayAll, partAll) => {\n    //     var tmp = [];\n    //     for(var i = 0; i < weekdayArray.length; i += partDay) {\n    //         tmp.push(weekdayArray.slice(i, i + partDay));\n    //     }\n    //     for(var i = 0; i < arrayAll.length; i += partAll) {\n    //         tmp.push(arrayAll.slice(i, i + partAll));\n    //     }\n    //     return tmp;\n    // }\n    // let dataset = create2dArray(weekday,38,presentableData,38)\n    // console.log(dataset);\n    // const create2dArrayElective = (weekdayArray,partDay,arrayAll, partAll) => {\n    //     var tmp = [];\n    //     for(var i = 0; i < weekdayArray.length; i += partDay) {\n    //         tmp.push(weekdayArray.slice(i, i + partDay));\n    //     }\n    //     for(var i = 0; i < arrayAll.length; i += partAll) {\n    //         tmp.push(arrayAll.slice(i, i + partAll));\n    //     }\n    //     return tmp;\n    // }\n    // let datasetElective = create2dArrayElective(wed,10,presentableDataElective,10);\n    // console.log(datasetElective)\n    // //let compileDataset = dataset.concat(datasetElective);\n    // //console.log(dataset)\n    // const insertRoomName = (roomData,array) => {\n    //     for(let i= 0; i<array.length; i++){\n    //         array[i].unshift(roomData[i]);\n    //     }\n    //     return array;\n    // }\n    // insertRoomName(allRoomName,dataset)\n    // const insertRoomNameElective = (roomData,array) => {\n    //     for(let i= 0; i<array.length; i++){\n    //         array[i].unshift(roomData[i]);\n    //     }\n    //     return array;\n    // }\n    // insertRoomName(allRoomName,datasetElective)\n    // /** Convert a 2D array into a CSV string\n    //  */\n    //   function arrayToCsv(data){\n    //     //console.log(data)\n    //     return data.map(row =>\n    //       row\n    //       .map(String)  // convert every value to String\n    //       .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\n    //       .map(v => `\"${v}\"`)  // quote it\n    //       .join(',')  // comma-separated\n    //     ).join('\\r\\n');  // rows starting on new lines\n    //   }\n    // let csv = arrayToCsv(\n    //     dataset\n    // );\n    // function downloadBlob(content, filename, contentType) {\n    //     // Create a blob\n    //     var blob = new Blob([content], { type: contentType });\n    //     var url = URL.createObjectURL(blob);\n    //     // Create a link to download it\n    //     var pom = document.createElement('a');\n    //     pom.href = url;\n    //     pom.setAttribute('download', filename);\n    //     pom.click();\n    //   }\n    //   /** Convert a 2D array into a CSV string\n    //    * elective\n    //  */\n    //    function arrayToCsvElective(data){\n    //     //console.log(data)\n    //     return data.map(row =>\n    //       row\n    //       .map(String)  // convert every value to String\n    //       .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\n    //       .map(v => `\"${v}\"`)  // quote it\n    //       .join(',')  // comma-separated\n    //     ).join('\\r\\n');  // rows starting on new lines\n    //   }\n    // let csvElective = arrayToCsvElective(\n    //     datasetElective\n    // );\n    // function downloadBlobElective(content, filename, contentType) {\n    //     // Create a blob\n    //     var blob = new Blob([content], { type: contentType });\n    //     var url = URL.createObjectURL(blob);\n    //     // Create a link to download it\n    //     var pom = document.createElement('a');\n    //     pom.href = url;\n    //     pom.setAttribute('download', filename);\n    //     pom.click();\n    //   }\n    //   downloadBlob(csv, 'ModifiedAntSystem_GeneratedSchedule.csv', 'text/csv;charset=utf-8;')\n    //   downloadBlobElective(csvElective, 'ModifiedAntSystemElective_GeneratedSchedule.csv', 'text/csv;charset=utf-8;')\n    // }else{\n    //     alert(\"no workable solution found, please refersh until get workable solution\")\n    // }\n    //----------------------------------------------------------------------------------------------------------------------------------------\n\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 13\n    }\n  }, \"Generate Schedule Page\"));\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["create","find","forEach","indexOf","React","useEffect","useState","useContext","useParams","_","CSVLink","LoadingSpinner","finalDataAll","finalDataAllElective","checkHardConstraintOutsite","checkSoftConstraintOutsite","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","CsvData","setCsvData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","lecturerData","roomName","roomSize","filterData50","filterData100","filterData200","filterData500","filterDataElective50","filterDataElective100","filterDataElective200","filterDataElective500","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","lecturer","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","notDuplicatesLecturer","pop","courseDataXElective","courseDataWithElective","slice","splice","roomUnder50","roomUnder100","roomUnder200","roomUnder500","checkNumberofRoom","createArray","data","result","DataArray50","DataArray100","DataArray200","DataArray500","combineArray","DataArrayElective50","DataArrayElective100","DataArrayElective200","DataArrayElective500","combineArrayElective","checkTotalHardContraintsAll","checkTotalSoftContraintsAll","sleep","ms","Promise","resolve","setTimeout","antSystem","array1D50","AntArr50","insertedData50_Slot2_2","insertedData50_Slot2_1","arrayLength50","AntAlgoInsert50","test","k","k2","k3","count","remainderArray","remainderArraySlot1","totalRoom","x","hourMS","b","j","Math","floor","random","AntArrIns50","slot2Equal1for50","test2","varchec50","slot2Equal2for50","undefined","reshuffle50","notDupeShuffle50","check1Teacher_50","indexArray","last","reshuffle50_50","checkAmountData50_2","checkAmount_2","checkAmountData50_0","checkAmount_0","check1Group","checkRoomQuota","checkSolatJummat","check1Teacher","checkEndOfClass","check2ClassInARow","antSystemAlgo"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,OAAhC,QAA+C,QAA/C;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAGA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,oBAAoB,GAAG,EAA3B;AACA,IAAIC,0BAA0B,GAAG,CAAjC;AACA,IAAIC,0BAA0B,GAAG,CAAjC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAG7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,UAAD,EAAaC,cAAb,IAA+Bf,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,EAAxC;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,EAA5C;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,EAAtC,CAP6B,CAQ7B;AACA;AACA;;AAEA,QAAMsB,MAAM,GAAGpB,SAAS,GAAGoB,MAA3B;AACAvB,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMwB,WAAW,GAAG,YAAW;AAC3BV,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH,cAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B,CADG,CAEH;AACA;;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BC,OAA1C,CAApB,CALG,CAOH;;AACA,cAAMC,OAAO,GAAGP,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CE,GAA9C,CAAkDF,OAAO,IAAG,CAACA,OAAO,CAAC,MAAD,CAAR,EAAiBA,OAAO,CAAC,MAAD,CAAxB,CAA5D,CAAhB,CARG,CAQ6G;;AAChHf,QAAAA,WAAW,CAAC,CAACgB,OAAD,CAAD,CAAX;AAEA,cAAME,SAAS,GAAGT,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CE,GAA9C,CAAkDF,OAAO,IAAI,CAACA,OAAO,CAAC,kBAAD,CAAR,EAA6BA,OAAO,CAAC,aAAD,CAApC,EAAoDA,OAAO,CAAC,aAAD,CAA3D,EAA2EA,OAAO,CAAC,MAAD,CAAlF,EAA2FA,OAAO,CAAC,UAAD,CAAlG,EAA+GA,OAAO,CAAC,UAAD,CAAtH,EAAmIA,OAAO,CAAC,OAAD,CAA1I,EAAoJA,OAAO,CAAC,KAAD,CAA3J,EAAmKA,OAAO,CAAC,gBAAD,CAA1K,EAA6LA,OAAO,CAAC,OAAD,CAApM,EAA8MA,OAAO,CAAC,OAAD,CAArN,CAA7D,CAAlB,CAXG,CAW8S;;AACjTb,QAAAA,aAAa,CAAC,CAACgB,SAAD,CAAD,CAAb;;AAEA,YAAI,CAACX,QAAQ,CAACY,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUX,YAAY,CAACY,OAAvB,CAAN;AACH;;AACDvB,QAAAA,cAAc,CAACa,aAAD,CAAd;AACAf,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OAnBD,CAmBC,OAAM0B,GAAN,EAAU;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACD,OAAhB;AACH;;AACDzB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,KA1BD;;AA2BAU,IAAAA,WAAW;AACd,GA7BQ,EA6BP,CAACD,MAAD,CA7BO,CAAT;;AA+BI,MAAG,CAACV,SAAD,IAAcE,UAAjB,EAA4B;AACxB,UAAM4B,QAAQ,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAjB;AACA,UAAMC,eAAe,GAAG,EAAxB;AACA,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,GAAG,GAAG,EAAZ;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,YAAY,GAAI,EAAtB;AACA,UAAMC,aAAa,GAAI,EAAvB;AACA,UAAMC,aAAa,GAAI,EAAvB;AACA,UAAMC,aAAa,GAAI,EAAvB;AACA,UAAMC,oBAAoB,GAAI,EAA9B;AACA,UAAMC,qBAAqB,GAAI,EAA/B;AACA,UAAMC,qBAAqB,GAAI,EAA/B;AACA,UAAMC,qBAAqB,GAAI,EAA/B;AACA,UAAMC,QAAQ,GAAI,EAAlB;AACA,UAAMC,IAAI,GAAG,EAAb;AACAA,IAAAA,IAAI,CAACC,IAAL,CAAU3C,QAAQ,CAAC,CAAD,CAAlB;AAEA,QAAI4C,sBAAsB,GAAG,CAA7B;AACA,QAAIC,sBAAsB,GAAG,CAA7B,CArBwB,CAsBxB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE5C,UAAU,CAAC,CAAD,CAAV,CAAc6C,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,UAAIE,UAAU,GAAG,CAAC9C,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,CAAD,CAAjB;AACA,UAAIG,IAAI,GAAG,CAAC/C,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,CAAD,CAAX;AACA,UAAII,GAAG,GAAG,CAAChD,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,CAAD,CAAV;AACA,UAAIK,QAAQ,GAAG,CAACjD,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,CAAD,CAAf;AACAE,MAAAA,UAAU,CAACI,MAAX,CAAkB,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AACnDH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACA3B,QAAAA,eAAe,CAACgB,IAAhB,CAAqBW,IAArB,EAFmD,CAGnD;AACH,OAJD,EAIE,EAJF;AAKAL,MAAAA,IAAI,CAACG,MAAL,CAAY,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AAC7CH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACA1B,QAAAA,UAAU,CAACe,IAAX,CAAgBW,IAAhB,EAF6C,CAG7C;AACH,OAJD,EAIE,EAJF;AAKAJ,MAAAA,GAAG,CAACE,MAAJ,CAAW,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AAC5CH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACAzB,QAAAA,GAAG,CAACc,IAAJ,CAASW,IAAT,EAF4C,CAG5C;AACH,OAJD,EAIE,EAJF;AAKAH,MAAAA,QAAQ,CAACC,MAAT,CAAgB,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AACjDH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACAxB,QAAAA,YAAY,CAACa,IAAb,CAAkBW,IAAlB,EAFiD,CAGjD;AACH,OAJD,EAIE,EAJF;AAKH;;AAED,SAAI,IAAIR,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE9C,QAAQ,CAAC,CAAD,CAAR,CAAY+C,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,UAAIW,IAAI,GAAG,CAACzD,QAAQ,CAAC,CAAD,CAAR,CAAY8C,CAAZ,EAAe,CAAf,CAAD,CAAX;AACA,UAAIY,IAAI,GAAG,CAAC1D,QAAQ,CAAC,CAAD,CAAR,CAAY8C,CAAZ,EAAe,CAAf,CAAD,CAAX;AACAW,MAAAA,IAAI,CAACL,MAAL,CAAY,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AAC7CH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACAvB,QAAAA,QAAQ,CAACY,IAAT,CAAcW,IAAd,EAF6C,CAG7C;AACH,OAJD,EAIE,EAJF;AAKAI,MAAAA,IAAI,CAACN,MAAL,CAAY,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAqC;AAC7CH,QAAAA,OAAO,CAACE,KAAD,CAAP,GAAiBD,IAAjB;AACAtB,QAAAA,QAAQ,CAACW,IAAT,CAAcW,IAAd,EAF6C,CAG7C;AACH,OAJD,EAIE,EAJF;AAKH;;AAGD,UAAMK,iBAAiB,GAAG3B,QAAQ,CAAC4B,MAAT,CAAgB,CAACN,IAAD,EAAOC,KAAP,KAAiBA,KAAK,IAAIvB,QAAQ,CAACnD,OAAT,CAAiByE,IAAjB,CAA1C,CAA1B;AAEA,UAAMO,qBAAqB,GAAG/B,YAAY,CAAC8B,MAAb,CAAoB,CAACN,IAAD,EAAOC,KAAP,KAAiBA,KAAK,IAAIzB,YAAY,CAACjD,OAAb,CAAqByE,IAArB,CAA9C,CAA9B;AACAO,IAAAA,qBAAqB,CAACC,GAAtB,GArEwB,CAsExB;;AAGA,QAAIC,mBAAmB,GAAG,EAA1B;AACA,QAAIC,sBAAsB,GAAG,EAA7B;AACA9D,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAc4D,GAAd,GA3EwB,CA6ExB;;AACA,SAAI,IAAIhB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAE5C,UAAU,CAAC,CAAD,CAAV,CAAc6C,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,UAAG5C,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,EAAoBmB,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,KAAkC,KAArC,EAA2C;AACvC/D,QAAAA,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiBoB,MAAjB;;AACA,YAAKhE,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,EAAoBmB,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,KAAkC,KAAvC,EAA6C;AACzC/D,UAAAA,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiBoB,MAAjB;AACAH,UAAAA,mBAAmB,CAACpB,IAApB,CAAyBzC,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,CAAzB;AACH;AACJ;AACJ,KAtFuB,CAwFxB;;;AACA,SAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAE5C,UAAU,CAAC,CAAD,CAAV,CAAc6C,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,UAAG5C,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,EAAoBmB,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,KAAkC,KAAlC,IAA4C/D,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,EAAiB,CAAjB,EAAoBmB,KAApB,CAA0B,CAA1B,EAA4B,CAA5B,KAAkC,KAAjF,EAAuF;AACnFD,QAAAA,sBAAsB,CAACrB,IAAvB,CAA4BzC,UAAU,CAAC,CAAD,CAAV,CAAc4C,CAAd,CAA5B;AACH;AACJ,KA7FuB,CA+FxB;;;AACI,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEiB,mBAAmB,CAAChB,MAAtC,EAA6CD,CAAC,EAA9C,EAAiD;AACzC,UAAIiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,IAA4B,EAAhC,EAAoC;AAChCb,QAAAA,YAAY,CAACU,IAAb,CAAkBoB,mBAAmB,CAACjB,CAAD,CAArC;AACH;;AACD,UAAIiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,KAA6B,EAA7B,IAAmCiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,IAA4B,GAAnE,EAAwE;AAEpEZ,QAAAA,aAAa,CAACS,IAAd,CAAmBoB,mBAAmB,CAACjB,CAAD,CAAtC;AACH;;AACD,UAAIiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,KAA6B,GAA7B,IAAoCiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,IAA4B,GAApE,EAA0E;AACtEX,QAAAA,aAAa,CAACQ,IAAd,CAAmBoB,mBAAmB,CAACjB,CAAD,CAAtC;AACH;;AACD,UAAIiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,KAA6B,GAA7B,IAAoCiB,mBAAmB,CAACjB,CAAD,CAAnB,CAAuB,CAAvB,IAA4B,GAApE,EAAyE;AACrEV,QAAAA,aAAa,CAACO,IAAd,CAAmBoB,mBAAmB,CAACjB,CAAD,CAAtC;AACH;AACR,KA9GmB,CA+GpB;AAEA;;;AACA,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEkB,sBAAsB,CAACjB,MAAzC,EAAgDD,CAAC,EAAjD,EAAoD;AAChD,UAAIkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,IAA+B,EAAnC,EAAuC;AACnCT,QAAAA,oBAAoB,CAACM,IAArB,CAA0BqB,sBAAsB,CAAClB,CAAD,CAAhD;AACH;;AACD,UAAIkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,KAAgC,EAAhC,IAAsCkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,IAA+B,GAAzE,EAA8E;AAE1ER,QAAAA,qBAAqB,CAACK,IAAtB,CAA2BqB,sBAAsB,CAAClB,CAAD,CAAjD;AACH;;AACD,UAAIkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,KAAgC,GAAhC,IAAuCkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,IAA+B,GAA1E,EAAgF;AAC5EP,QAAAA,qBAAqB,CAACI,IAAtB,CAA2BqB,sBAAsB,CAAClB,CAAD,CAAjD;AACH;;AACD,UAAIkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,KAAgC,GAAhC,IAAuCkB,sBAAsB,CAAClB,CAAD,CAAtB,CAA0B,CAA1B,IAA+B,GAA1E,EAA+E;AAC3EN,QAAAA,qBAAqB,CAACG,IAAtB,CAA2BqB,sBAAsB,CAAClB,CAAD,CAAjD;AACH;AACJ,KAhImB,CAiIpB;AACA;AACA;AACA;;;AAGJ,QAAIqB,WAAW,GAAG,EAAlB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA,UAAMC,iBAAiB,GAAG,MAAM;AAC5B,WAAI,IAAIzB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG9C,QAAQ,CAAC,CAAD,CAAR,CAAY+C,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACvC,YAAIJ,IAAI,GAAG1C,QAAQ,CAAC,CAAD,CAAR,CAAY8C,CAAZ,EAAe,CAAf,CAAX,CADuC,CAEvC;;AACA,YAAGJ,IAAI,GAAG,EAAV,EAAa;AACTyB,UAAAA,WAAW,CAACxB,IAAZ,CAAiBD,IAAjB;AACH,SAFD,MAEM,IAAGA,IAAI,GAAG,EAAP,IAAaA,IAAI,GAAG,GAAvB,EAA2B;AAC7B0B,UAAAA,YAAY,CAACzB,IAAb,CAAkBD,IAAlB;AAEH,SAHK,MAGA,IAAGA,IAAI,GAAG,GAAP,IAAcA,IAAI,GAAG,GAAxB,EAA4B;AAC9B2B,UAAAA,YAAY,CAAC1B,IAAb,CAAkBD,IAAlB;AAEH,SAHK,MAGA,IAAGA,IAAI,GAAG,GAAV,EAAc;AAChB4B,UAAAA,YAAY,CAAC3B,IAAb,CAAkBD,IAAlB;AACH;AACJ;AACJ,KAhBD;;AAiBA6B,IAAAA,iBAAiB;;AAGjB,UAAMC,WAAW,GAAIC,IAAD,IAAU;AAC1B,UAAIC,MAAM,GAAG,EAAb;;AAEI,WAAI,IAAI5B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC2B,IAAjB,EAAuB3B,CAAC,EAAxB,EAA2B;AACvB4B,QAAAA,MAAM,CAAC5B,CAAD,CAAN,GAAY,EAAZ;AACH;;AACL,aAAO4B,MAAP;AACH,KAPD;;AASA,QAAIC,WAAW,GAAGR,WAAW,CAACpB,MAAZ,GAAqB,EAAvC;AACA,QAAI6B,YAAY,GAAGR,YAAY,CAACrB,MAAb,GAAsB,EAAzC;AACA,QAAI8B,YAAY,GAAGR,YAAY,CAACtB,MAAb,GAAsB,EAAzC;AACA,QAAI+B,YAAY,GAAGR,YAAY,CAACvB,MAAb,GAAsB,EAAzC;AACA,QAAIgC,YAAY,GAAGJ,WAAW,GAAGC,YAAd,GAA6BC,YAA7B,GAA4CC,YAA/D;AAEA,QAAIE,mBAAmB,GAAGb,WAAW,CAACpB,MAAZ,GAAqB,EAA/C;AACA,QAAIkC,oBAAoB,GAAGb,YAAY,CAACrB,MAAb,GAAsB,EAAjD;AACA,QAAImC,oBAAoB,GAAGb,YAAY,CAACtB,MAAb,GAAsB,EAAjD;AACA,QAAIoC,oBAAoB,GAAGb,YAAY,CAACvB,MAAb,GAAsB,EAAjD;AACA,QAAIqC,oBAAoB,GAAGJ,mBAAmB,GAAGC,oBAAtB,GAA6CC,oBAA7C,GAAoEC,oBAA/F,CAlLwB,CAoLpC;;AAEA,QAAIE,2BAA2B,GAAG,CAAlC;AACA,QAAIC,2BAA2B,GAAG,CAAlC;;AAEA,aAASC,KAAT,CAAeC,EAAf,EAAmB;AACf,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AAEH,UAAMI,SAAS,GAAG,MAAM;AAExB;AACA;AAGA;AACI,YAAMC,SAAS,GAAIpB,IAAD,IAAU;AACxB,YAAIC,MAAM,GAAG,EAAb;;AAEA,aAAI,IAAI5B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE2B,IAAlB,EAAwB3B,CAAC,EAAzB,EAA4B;AACxB4B,UAAAA,MAAM,CAAC5B,CAAD,CAAN,GAAW,GAAX;AACH;;AACD,eAAO4B,MAAP;AACH,OAPD;;AAQA,UAAIoB,QAAQ,GAAGD,SAAS,CAACd,YAAD,CAAxB;AAEA,UAAIgB,sBAAsB,GAAG,EAA7B;AACA,UAAIC,sBAAsB,GAAE,EAA5B;AAEA,UAAIC,aAAa,GAAGtB,WAApB;;AACA,YAAMuB,eAAe,GAAI1C,KAAD,IAAW;AAE/B;AACA;AAEA,YAAI2C,IAAI,GAAG,EAAX;AACA,YAAIC,CAAC,GAAG,CAAR;AACA,YAAIC,EAAE,GAAE,CAAR;AACA,YAAIC,EAAE,GAAE,CAAR;AACA,YAAIC,KAAK,GAAG,CAAZ;AAEA,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,mBAAmB,GAAG,EAA1B;AACA,YAAIC,SAAS,GAAGlD,KAAK,CAACT,MAAN,GAAe,EAA/B;;AAGA,aAAI,IAAI4D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC1E,YAAY,CAACc,MAA5B,EAAmC4D,CAAC,EAApC,EAAuC;AACnCR,UAAAA,IAAI,CAACxD,IAAL,CAAUV,YAAY,CAAC0E,CAAD,CAAtB;AACH,SAlB8B,CAsB/B;;;AACI,aAAI,IAAI7D,CAAC,GAAGmD,aAAa,GAAC,CAA1B,EAA4BnD,CAAC,GAAC,CAA9B,EAAgCA,CAAC,EAAjC,EAAoC;AAChC,cAAGsD,CAAC,GAAGD,IAAI,CAACpD,MAAZ,EAAmB;AACnB,gBAAI6D,MAAM,GAAGT,IAAI,CAACC,CAAD,CAAJ,CAAQ,CAAR,CAAb;AACA,gBAAIS,CAAC,GAAG,CAAR,CAFmB,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAED,gBAAGD,MAAM,IAAI,CAAb,EAAe;AAEd,oBAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAenE,CAAC,GAAC,CAAjB,CAAX,CAAV;;AACA,kBAAGU,KAAK,CAACV,CAAD,CAAL,IAAY,GAAf,EAAmB;AACf,oBAAGU,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAAjB,EAAqB;AACjBU,kBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,kBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACAtD,kBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,kBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB,CAJiB,CAOjB;;AACI,sBAAGS,CAAC,GAAGH,SAAP,EAAiB;AACT,wBAAG;AACC,0BAAIlD,KAAK,CAACV,CAAD,CAAL,CAAS,CAAT,KAAe,GAAf,IAAsBU,KAAK,CAACV,CAAD,CAAL,CAAS,CAAT,KAAeqD,IAAI,CAACC,CAAD,CAAJ,CAAQ,CAAR,CAAzC,EAAoD;AAChD;AACI;AACJ,4BAAI5C,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,IAAgB,GAApB,EAAwB;AACpBrD,0BAAAA,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,GAAgB,CAAhB;AACH;;AACD,4BAAIrD,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,IAAe,GAAnB,EAAuB;AACnBrD,0BAAAA,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,GAAgB,CAAhB,CADmB,CAEnB;AACH;AACJ;AAEJ,qBAbD,CAaC,MAAK,CAAE;AACX;;AACDA,kBAAAA,CAAC,GAxBQ,CAyBjB;AAEA;;AACA,sBAAGrD,KAAK,CAACV,CAAD,CAAL,IAAY,GAAZ,IAAmBU,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAApC,EAAwC;AAEpCU,oBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,oBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACItD,oBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,oBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB;AACH,mBANL,MAOS,IAAG5C,KAAK,CAACV,CAAD,CAAL,IAAY,GAAZ,IAAmBU,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAApC,EAAwC;AACzCU,oBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,oBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACAtD,oBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,oBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB;AACJ,mBALK,MAMF;AACAK,oBAAAA,mBAAmB,CAAC9D,IAApB,CAAyBwD,IAAI,CAACC,CAAD,CAA7B;AACH;;AAED,uBAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGnD,KAAK,CAACT,MAAzB,EAAkC4D,CAAC,EAAnC,EAAsC;AAClC,wBAAGnD,KAAK,CAACmD,CAAD,CAAL,IAAY,CAAf,EAAiB;AACbnD,sBAAAA,KAAK,CAACmD,CAAD,CAAL,GAAW,GAAX;AACH;AACJ;;AACDJ,kBAAAA,KAAK,IAAI,CAAT;AACN,iBAnDD,MAoDK,IAAG/C,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAAjB,EAAsB;AACvBU,kBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,kBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACAtD,kBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,kBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB;;AAEA,sBAAGS,CAAC,GAAGH,SAAP,EAAiB;AACb,wBAAG;AACC,0BAAIlD,KAAK,CAACV,CAAD,CAAL,CAAS,CAAT,KAAe,GAAf,IAAsBU,KAAK,CAACV,CAAD,CAAL,CAAS,CAAT,KAAeqD,IAAI,CAACC,CAAD,CAAJ,CAAQ,CAAR,CAAzC,EAAoD;AAChD;AACI;AACJ,4BAAI5C,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,IAAgB,GAApB,EAAwB;AACpBrD,0BAAAA,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,GAAgB,CAAhB,CADoB,CAEpB;AACH;;AACD,4BAAIrD,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,IAAe,GAAnB,EAAuB;AACnBrD,0BAAAA,KAAK,CAACV,CAAC,GAAC,KAAG+D,CAAN,CAAL,GAAgB,CAAhB,CADmB,CAEnB;AACH;AACJ;AAEJ,qBAdD,CAcC,MAAK,CAAE;AACX;;AACDA,kBAAAA,CAAC,GAvBsB,CAyBvB;;AACA,sBAAGrD,KAAK,CAACV,CAAD,CAAL,IAAY,GAAZ,IAAmBU,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAApC,EAAwC;AACpCU,oBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,oBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACAtD,oBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,oBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB;AACC,mBALL,MAMS,IAAG5C,KAAK,CAACV,CAAD,CAAL,IAAY,GAAZ,IAAmBU,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,IAAc,GAApC,EAAwC;AACzCU,oBAAAA,KAAK,CAACV,CAAD,CAAL,GAAWU,KAAK,CAACsD,CAAD,CAAhB;AACAtD,oBAAAA,KAAK,CAACV,CAAC,GAAC,CAAH,CAAL,GAAaU,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAlB;AACAtD,oBAAAA,KAAK,CAACsD,CAAD,CAAL,GAAWX,IAAI,CAACC,CAAD,CAAf;AACA5C,oBAAAA,KAAK,CAACsD,CAAC,GAAC,CAAH,CAAL,GAAaX,IAAI,CAACC,CAAD,CAAjB;AACJ,mBALK,MAMF;AACAK,oBAAAA,mBAAmB,CAAC9D,IAApB,CAAyBwD,IAAI,CAACC,CAAD,CAA7B;AACH,mBAxCmB,CAyCvB;AACA;AACA;AACA;AACA;;AAEH,iBA/CI,MAgDD;AACAI,kBAAAA,cAAc,CAAC7D,IAAf,CAAoBwD,IAAI,CAACC,CAAD,CAAxB;AACH;AACJ,eAxGD,MAwGK;AACDI,gBAAAA,cAAc,CAAC7D,IAAf,CAAoBwD,IAAI,CAACC,CAAD,CAAxB;AACH;AACJ;AACJ;;AACDA,UAAAA,CAAC;AACA,SAjK8B,CAoK/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;AAEA5E,QAAAA,OAAO,CAACC,GAAR,CAAY8E,KAAZ,EA7NkC,CA+NlC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEI,eAAO/C,KAAP;AACH,OAnQD;;AAqQA,UAAI0D,WAAW,GAAGhB,eAAe,CAACJ,QAAD,CAAjC,CA1RoB,CA2RpB;;AAEC,Y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","sourcesContent":["import { create, find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport _ from 'lodash';\r\nimport { CSVLink } from \"react-csv\";\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\n\r\nlet finalDataAll = [];\r\nlet finalDataAllElective = [];\r\nlet checkHardConstraintOutsite = 0;\r\nlet checkSoftConstraintOutsite = 0;\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    const [CsvData, setCsvData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code'],Dataset['Slot1'],Dataset['Slot2']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const lecturerData = []\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData50  = [];\r\n            const filterData100  = [];\r\n            const filterData200  = [];\r\n            const filterData500  = [];\r\n            const filterDataElective50  = [];\r\n            const filterDataElective100  = [];\r\n            const filterDataElective200  = [];\r\n            const filterDataElective500  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                let lecturer = [courseData[0][i][5]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                lecturer.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    lecturerData.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n \r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n            const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\r\n            notDuplicatesLecturer.pop();\r\n            //console.log(notDuplicatesLecturer)\r\n\r\n\r\n            let courseDataXElective = []\r\n            let courseDataWithElective = []\r\n            courseData[0].pop()\r\n\r\n            //saparate faculty course with the elective course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) != 'TMU'){\r\n                    courseData[0][i].splice()\r\n                    if(  courseData[0][i][1].slice(0,3) != 'TMX'){\r\n                        courseData[0][i].splice()\r\n                        courseDataXElective.push(courseData[0][i])\r\n                    }\r\n                }\r\n            }\r\n\r\n            //saparate elective course with the faculty course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) == 'TMU' ||  courseData[0][i][1].slice(0,3) == 'TMX'){\r\n                    courseDataWithElective.push(courseData[0][i])\r\n                }\r\n            }\r\n\r\n            //insert data without elective courses into correct room capacity\r\n                for(let i = 0; i< courseDataXElective.length;i++){\r\n                        if (courseDataXElective[i][0] < 50) {\r\n                            filterData50.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\r\n                            \r\n                            filterData100.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200 ) {\r\n                            filterData200.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\r\n                            filterData500.push(courseDataXElective[i]);\r\n                        }\r\n                }\r\n                //console.log(filterData50)\r\n\r\n                //insert data without faculty courses into correct room capacity\r\n                for(let i = 0; i< courseDataWithElective.length;i++){\r\n                    if (courseDataWithElective[i][0] < 50) {\r\n                        filterDataElective50.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\r\n                        \r\n                        filterDataElective100.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200 ) {\r\n                        filterDataElective200.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\r\n                        filterDataElective500.push(courseDataWithElective[i]);\r\n                    }\r\n                }\r\n                // console.log(filterDataElective50);\r\n                // console.log(filterDataElective100);\r\n                // console.log(filterDataElective200);\r\n                // console.log(filterDataElective500);\r\n\r\n\r\n            let roomUnder50 = []\r\n            let roomUnder100 = []\r\n            let roomUnder200 = []\r\n            let roomUnder500 = []\r\n            const checkNumberofRoom = () => {\r\n                for(let i = 0; i < roomData[0].length; i++){\r\n                    let room = roomData[0][i][1]\r\n                    //console.log(roomData[0][i][1]);\r\n                    if(room < 50){\r\n                        roomUnder50.push(room)\r\n                    }else if(room > 50 && room < 100){\r\n                        roomUnder100.push(room)\r\n\r\n                    }else if(room > 100 && room < 200){\r\n                        roomUnder200.push(room)\r\n\r\n                    }else if(room > 200){\r\n                        roomUnder500.push(room)\r\n                    }\r\n                }\r\n            }\r\n            checkNumberofRoom();\r\n\r\n\r\n            const createArray = (data) => {\r\n                var result = []\r\n\r\n                    for(let i = 0; i<data; i++){\r\n                        result[i] = []\r\n                    }\r\n                return result;\r\n            }\r\n\r\n            let DataArray50 = roomUnder50.length * 38;\r\n            let DataArray100 = roomUnder100.length * 38;\r\n            let DataArray200 = roomUnder200.length * 38;\r\n            let DataArray500 = roomUnder500.length * 38;\r\n            let combineArray = DataArray50 + DataArray100 + DataArray200 + DataArray500\r\n\r\n            let DataArrayElective50 = roomUnder50.length * 10;\r\n            let DataArrayElective100 = roomUnder100.length * 10;\r\n            let DataArrayElective200 = roomUnder200.length * 10;\r\n            let DataArrayElective500 = roomUnder500.length * 10;\r\n            let combineArrayElective = DataArrayElective50 + DataArrayElective100 + DataArrayElective200 + DataArrayElective500\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nvar checkTotalHardContraintsAll = 0\r\nvar checkTotalSoftContraintsAll = 0\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\nconst antSystem = () => {\r\n\r\n//______________________________________________________________________________________________________________________________________________\r\n//Faculty courses\r\n\r\n\r\n//create 1d array for dataset less than 50\r\n    const array1D50 = (data) => {\r\n        var result = []\r\n    \r\n        for(let i = 0; i< data; i++){\r\n            result[i]= 100;\r\n        }\r\n        return result;\r\n    }\r\n    var AntArr50 = array1D50(combineArray);\r\n    \r\n    let insertedData50_Slot2_2 = []\r\n    let insertedData50_Slot2_1= []\r\n    \r\n    let arrayLength50 = DataArray50\r\n    const AntAlgoInsert50 = (array) => {\r\n\r\n        //array.length = 1064 (last index = 1063)\r\n        //arrayLength50 = 646 (last index = 645)\r\n\r\n        let test = []\r\n        let k = 0;\r\n        let k2 =0\r\n        let k3 =0\r\n        let count = 0;\r\n        \r\n        let remainderArray = []\r\n        let remainderArraySlot1 = []\r\n        let totalRoom = array.length / 38\r\n\r\n    \r\n        for(let x=0; x<filterData50.length;x++){\r\n            test.push(filterData50[x]);\r\n        }\r\n    \r\n\r\n\r\n        //for(let x = 0 ; x< array.length; x++){\r\n            for(let i = arrayLength50-1;i>0;i--){\r\n                if(k < test.length){\r\n                let hourMS = test[k][7]\r\n                let b = 0\r\n\r\n\r\n\r\n                // if(b < totalRoom){\r\n                //     try{\r\n                //         if( array[i][5] != 100 && array[i][5] == test[k][5]){\r\n                //             //console.log(array[u+38*b])\r\n                //             if( array[i+38*b] ==100){\r\n                //                 array[i+38*b] = 0\r\n                //                 //console.log(true)\r\n                //             }\r\n                //             if( array[i-38*b]==100){\r\n                //                 array[i-38*b] = 0\r\n                //                 //console.log(false)\r\n                //             }\r\n                //         }\r\n                        \r\n                //     }catch{}\r\n                // }\r\n                // b++ \r\n\r\n               if(hourMS == 4){\r\n\r\n                const j = Math.floor(Math.random()*(i+1));\r\n                if(array[i] == 100){\r\n                    if(array[i-1] == 100){\r\n                        array[i] = array[j];\r\n                        array[i-1] = array[j-1];\r\n                        array[j] = test[k];\r\n                        array[j-1] = test[k];\r\n                        \r\n    \r\n                        //for(let u = 0; u < array.length; u++){\r\n                            if(b < totalRoom){\r\n                                    try{\r\n                                        if( array[i][5] != 100 && array[i][5] == test[k][5]){\r\n                                            //console.log(array[u+38*b])\r\n                                                //console.log(true)\r\n                                            if( array[i+38*b] ==100){\r\n                                                array[i+38*b] = 1\r\n                                            }\r\n                                            if( array[i-38*b]==100){\r\n                                                array[i-38*b] = 1\r\n                                                //console.log(false)\r\n                                            }\r\n                                        }\r\n                                        \r\n                                    }catch{}\r\n                                }\r\n                                b++\r\n                        //}     \r\n    \r\n                        //const j = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100 && array[i-1] == 100){\r\n                            \r\n                            array[i] = array[j];\r\n                            array[i-1] = array[j-1];\r\n                                array[j] = test[k];\r\n                                array[j-1] = test[k];\r\n                            }\r\n                            else if(array[i] == 100 && array[i+1] == 100){\r\n                                array[i] = array[j];\r\n                                array[i+1] = array[j+1];\r\n                                array[j] = test[k];\r\n                                array[j+1] = test[k];\r\n                           }\r\n                           else{\r\n                               remainderArraySlot1.push(test[k]);\r\n                           }\r\n    \r\n                           for(let x = 0; x < array.length ; x++){\r\n                               if(array[x] == 0){\r\n                                   array[x] = 100;\r\n                               }\r\n                           }\r\n                           count += 1\r\n                    }\r\n                    else if(array[i+1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i+1] = array[j+1];\r\n                        array[j] = test[k];\r\n                        array[j+1] = test[k];\r\n                        \r\n                        if(b < totalRoom){\r\n                            try{\r\n                                if( array[i][5] != 100 && array[i][5] == test[k][5]){\r\n                                    //console.log(array[u+38*b])\r\n                                        //console.log(true)\r\n                                    if( array[i+38*b] ==100){\r\n                                        array[i+38*b] = 0\r\n                                        //console.log(true)\r\n                                    }\r\n                                    if( array[i-38*b]==100){\r\n                                        array[i-38*b] = 0\r\n                                        //console.log(false)\r\n                                    }\r\n                                }\r\n                                \r\n                            }catch{}\r\n                        }\r\n                        b++\r\n    \r\n                        //const j = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100 && array[i-1] == 100){\r\n                            array[i] = array[j];\r\n                            array[i-1] = array[j-1];\r\n                            array[j] = test[k];\r\n                            array[j-1] = test[k];\r\n                            }\r\n                            else if(array[i] == 100 && array[i+1] == 100){\r\n                                array[i] = array[j];\r\n                                array[i+1] = array[j+1];\r\n                                array[j] = test[k];\r\n                                array[j+1] = test[k];\r\n                           }\r\n                           else{\r\n                               remainderArraySlot1.push(test[k]);\r\n                           }\r\n                        //    for(let x = 0; x < array.length ; x++){\r\n                        //        if(array[x] == 0){\r\n                        //            array[x] = 100;\r\n                        //        }\r\n                        //    }\r\n                        \r\n                    }\r\n                    else{\r\n                        remainderArray.push(test[k]);\r\n                    }\r\n                }else{\r\n                    remainderArray.push(test[k]);\r\n                }\r\n            }\r\n        }\r\n        k++  \r\n        }\r\n   \r\n    \r\n        //      else if(hourMS == 2){\r\n        //          const j = Math.floor(Math.random()*(i+1));\r\n        //          if(array[i] == 100){\r\n        //              if(array[i-1] == 100){\r\n        //                  array[i] = array[j];\r\n        //                  array[i-1] = array[j-1];\r\n        //                  array[j] = test[k];\r\n        //                  array[j-1] = test[k];\r\n        //              }else if(array[i+1] == 100){\r\n        //                  array[i] = array[j];\r\n        //                  array[i+1] = array[j+1];\r\n        //                  array[j] = test[k];\r\n        //                  array[j+1] = test[k];\r\n        //              }\r\n        //              else{\r\n        //                  remainderArray.push(test[k]);\r\n        //              }\r\n        //          }else{\r\n        //              remainderArray.push(test[k]);\r\n        //          }\r\n        //      }\r\n    \r\n        //      else if(hourMS == 3){\r\n        //         const j = Math.floor(Math.random()*(i+1));\r\n        //         if(array[i] == 100){\r\n        //             if(array[i-1] == 100 && array[i+1]==100){// slot 3 hours in 1 go\r\n        //                 array[i] = array[j];\r\n        //                 array[i-1] = array[j-1];\r\n        //                 array[i+1] = array[j+1];\r\n        //                 array[j] = test[k];\r\n        //                 array[j-1] = test[k];\r\n        //                 array[j+1] = test[k];\r\n        //             }else if(array[i-1] == 100){//slot 2 hours in 1 go\r\n        //                 array[i] = array[j];\r\n        //                 array[i-1] = array[j-1];\r\n        //                 array[j] = test[k];\r\n        //                 array[j-1] = test[k];\r\n        //                 insertedData50_Slot2_1.push(test[k])\r\n        //             }else if(array[i+1] == 100){//slot 2 hours in 1 go\r\n        //                 array[i] = array[j];\r\n        //                 array[i+1] = array[j+1];\r\n        //                 array[j] = test[k];\r\n        //                 array[j+1] = test[k];\r\n        //                 insertedData50_Slot2_1.push(test[k])\r\n        //             }else if(array[i] == 100 ){//slot 1 hours in 1 go\r\n        //                 array[i] = array[j];\r\n        //                 array[j] = test[k];\r\n        //                 remainderArraySlot1.push(test[k])\r\n        //             }\r\n        //         }else{\r\n        //             remainderArray.push(test[k]);\r\n        //         }\r\n        //     }\r\n        //  }\r\n        //  k++  \r\n     //}\r\n\r\n     console.log(count)\r\n    \r\n     //fullfill the slot 3\r\n    //  for(let x = 0; x< array.length; x++){\r\n    //      if(array[x] == 100 && array[x+1] ==100){\r\n    //          if(k3 < remainderArraySlot1.length){\r\n    //              array[x] = remainderArraySlot1[k3]\r\n    //              array[x+1] = remainderArraySlot1[k3]\r\n    //          }\r\n    //          k3++   \r\n    //      }\r\n    //  }\r\n    \r\n     //console.log(remainderArray);\r\n    //  for(let x = 0; x< array.length; x++){\r\n    //          if(array[x] == 100 && array[x+1] ==100){\r\n    //              if(k2 < remainderArray.length){\r\n    //                  array[x] = remainderArray[k2]\r\n    //                  array[x+1] = remainderArray[k2]\r\n    //              }\r\n    //              try{\r\n    //                  let slot2 = remainderArray[k2][10]\r\n    //                  if(slot2 == 1){\r\n    //                      insertedData50_Slot2_1.push(remainderArray[k2])\r\n    //                  }\r\n    //                  if(slot2 == 2){\r\n    //                     insertedData50_Slot2_2.push(remainderArray[k2])\r\n    //                 }\r\n    //              }catch{}\r\n    //          k2++   \r\n    //      }\r\n    //  }\r\n    \r\n    //  if(array[-1] != undefined){\r\n    //      insertedData50_Slot2_1.push(array[-1]);\r\n    //  }\r\n    \r\n        return array;\r\n    }\r\n    \r\n    var AntArrIns50 = AntAlgoInsert50(AntArr50);\r\n    //console.log(AntArrIns50);\r\n    \r\n     const slot2Equal1for50= (array) => {\r\n         let k = 0;\r\n         let test2 = []\r\n         \r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100){\r\n                 if(k < insertedData50_Slot2_1.length){\r\n                     array[x] = insertedData50_Slot2_1[k]\r\n                 }\r\n             k++   \r\n             }\r\n         }\r\n         return array;\r\n     }\r\n     let varchec50 = slot2Equal1for50(AntArr50);\r\n    \r\n    \r\n     const slot2Equal2for50 = (array) => {\r\n         let k = 0;\r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100){\r\n                 if(k < insertedData50_Slot2_2.length){\r\n                     array[x] = insertedData50_Slot2_2[k]\r\n                     array[x+1] = insertedData50_Slot2_2[k]\r\n                 }\r\n             k++   \r\n             }\r\n         }\r\n    \r\n         if(array[-1] != undefined){\r\n             insertedData50_Slot2_1.push(array[-1]);\r\n         }else{\r\n    \r\n         }\r\n    \r\n         return array;\r\n     }\r\n     slot2Equal2for50(AntArr50);\r\n    \r\n    \r\n    let reshuffle50 = []\r\n    let notDupeShuffle50 = []\r\n    const check1Teacher_50 = (array) => {\r\n        let count =0\r\n        let indexArray = 0\r\n        let totalRoom = array.length / 38\r\n        for(let x= 1 ; x <= totalRoom ; x++){\r\n         indexArray = (x * 38)\r\n            try{\r\n             for(let i = 1; i<array.length ; i++){\r\n                    if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                        try{\r\n                            if(array[i][5] == array[i+indexArray][5] ){\r\n                                reshuffle50.push([i+indexArray,array[i+indexArray]]);\r\n                             }\r\n                             if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                                try{\r\n                                    reshuffle50.push([i+indexArray,array[i+indexArray]]);\r\n                                }catch{}\r\n                            }\r\n                        }catch{}\r\n                    }    \r\n                }\r\n            }catch{}\r\n        }\r\n        for(let x =0; x < reshuffle50.length; x++){\r\n            try{\r\n                if( reshuffle50[x][0] != reshuffle50[x+1][0]){\r\n                notDupeShuffle50.push(reshuffle50[x]);\r\n            }\r\n    \r\n            }catch{}\r\n    \r\n        }\r\n        var last = reshuffle50.splice(-1)[0]\r\n        notDupeShuffle50.push(last);\r\n    \r\n    }\r\n    //check1Teacher_50(AntArr50)\r\n    \r\n    const reshuffle50_50 = (data,array) => {\r\n    \r\n        //console.log(data)\r\n        let k = 0\r\n        let count =0\r\n        let totalRoom = array.length / 38\r\n    \r\n        // for(let x =0; x < data.length; x ++){\r\n        //     for(let i =0; i < array.length ; i++){\r\n        //         try{\r\n        //             if(data[x][0] == i){\r\n        //                 array[i] = 1\r\n        //             }\r\n        //         }catch{}\r\n        //     }\r\n    \r\n        // }\r\n\r\n        for(let x =0; x < data.length; x ++){\r\n            for(let i =0; i < array.length ; i++){\r\n                try{\r\n                    if(array[i] != 100){\r\n                        if(array[i][5] ==  data[k][1][5] ){\r\n                            for(let b = 1 ; b <= totalRoom ; b++){\r\n                                if( array[i+38*b]==100){\r\n                                    array[i+38*b] = 0\r\n                                }\r\n                                if( array[i-38*b]==100 ){\r\n                                    array[i-38*b] = 0\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                }\r\n                }catch{}\r\n            }\r\n    \r\n        }\r\n\r\n        \r\n        for(let i = 0; i < array.length; i++){\r\n            if(array[i] == 100){\r\n                if(k < data.length){\r\n                //count +=1\r\n                try{\r\n                    if(data[k][1] != undefined){\r\n                        array[i] = data[k][1]\r\n                    }\r\n                }catch{}\r\n                }\r\n                k++\r\n            }\r\n        }\r\n\r\n\r\n        // for(let i = 0; i < array.length; i++){\r\n        //     if(array[i] == 100){\r\n        //         if(k < data.length){\r\n        //         //count +=1\r\n        //         const j = Math.floor(Math.random()*(i+1));\r\n        //         try{\r\n        //             if(data[k][1] != undefined){\r\n        //                 array[i] = array[j];\r\n        //                 array[j] = data[k][1];\r\n        //             }\r\n        //         }catch{}\r\n        //         }\r\n        //         k++\r\n        //     }\r\n        // }\r\n    \r\n\r\n    \r\n            // for(let x = 0; x< array.length; x++){\r\n            //     if(array[x] == 0){\r\n            //         array[x] = 100\r\n            //     }\r\n            //     if(array[x] == 1){\r\n            //         array[x] = 100\r\n            //     }\r\n            // }\r\n            \r\n            // console.log(\"count: \"+ count)\r\n    }\r\n    //reshuffle50_50(notDupeShuffle50,AntArr50);\r\n    \r\n    const checkAmountData50_2 = (array) => {\r\n        let count = 0\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] != 100 && array[i] !=50 && array[i] != 0 && array[i] != undefined && array[i] != 1){\r\n                    count += 1\r\n                }\r\n        }\r\n        return count\r\n    }\r\n    var checkAmount_2 = checkAmountData50_2(AntArrIns50)\r\n    console.log(AntArrIns50)\r\n    console.log(\"Amount of data: \" +checkAmount_2);\r\n    \r\n    const checkAmountData50_0 = (array) => {\r\n        let count = 0\r\n        for(let i = 0; i < array.length; i++){\r\n                if( array[i] == 0 ){\r\n                    count += 1\r\n                }\r\n        }\r\n        return count\r\n    }\r\n     var checkAmount_0 = checkAmountData50_0(AntArr50)\r\n    console.log(\"zero counter: \"+checkAmount_0);\r\n\r\n//______________________________________________________________________________________________________________________________________________\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//______________________________________________________________________________________________________________________________________________\r\n\r\n//---------------------------------------------------------------------------------------------------------------------------------------------\r\n//----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n//console.log(dataCombine)\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------\r\n// Hard Constraint \r\n// H1: No student attend more than one class/ event at the same time\r\n// H2: The room is large enough to accomodate all of the student in attendace while also meeting the requirement \r\n// H3: At any given time, each room can onle have one course booked\r\n// H4: No student attend class during 12:00 pm -2:00 due to solat jumaat\r\n// H5: One teacher can only teach one class at one time.\r\n\r\n//Check for the H1 violation: same group attend more than 1 class at 1 time\r\n\r\nconst check1Group = (array) => {\r\n   let count =0\r\n   let indexArray = 0\r\n   let totalRoom = array.length / 38\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n       indexArray = (x * 38)\r\n   }\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n       try{\r\n           //for(let x= 1 ; x <= totalRoom ; x++){\r\n            for(let i = 0; i<array.length ; i++){\r\n               indexArray = (x * 37)\r\n               if(array[i+indexArray] != 100 && array[i+indexArray] != undefined  && array[i+indexArray] != 1 && array[i+indexArray] != 0 ){\r\n                   try{\r\n                       //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\r\n                       if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                // console.log(i)\r\n                                // console.log(i+indexArray)\r\n                                count +=1\r\n                            }catch{}\r\n                       }\r\n                   }catch{}\r\n               }   \r\n           }\r\n       }catch{}\r\n   }\r\n   return count\r\n\r\n}\r\n\r\n//var checkH1_ALL = check1Group(dataCombine)\r\n//console.log(checkH1_ALL);\r\n//var checkH1_ALLElective = check1Group(dataCombineElective)\r\n\r\n\r\n\r\n\r\n\r\n//Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\r\n\r\nconst checkRoomQuota = (array) => {\r\n   let count = 0\r\n   return count \r\n}\r\n//var checkH2_ALL = checkRoomQuota(dataCombine)\r\n//var checkH2_ALLElective = checkRoomQuota(dataCombineElective)\r\n\r\n\r\n//Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\r\nconst checkSolatJummat = (array) => {\r\n   let count = 0\r\n   return count \r\n}\r\n//var checkH4_ALL = checkSolatJummat(dataCombine)\r\n//var checkH4_ALLElective = checkSolatJummat(dataCombineElective)\r\n\r\n//Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\r\n\r\nconst check1Teacher = (array) => {\r\n   let count =0\r\n   let indexArray = 0\r\n   let totalRoom = array.length / 38\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n    indexArray = (x * 38)\r\n       try{\r\n        for(let i = 1; i<array.length ; i++){\r\n               if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 1 && array[i+indexArray] != 0 ){\r\n                   try{\r\n                       if(array[i][5] == array[i+indexArray][5]){\r\n                        //    console.log(i)\r\n                        //    console.log(i+indexArray)\r\n                           count +=1\r\n                        }\r\n                   }catch{}\r\n               }    \r\n           }\r\n       }catch{}\r\n   }\r\n   return count\r\n\r\n\r\n}\r\n//var checkH5_ALL = check1Teacher(dataCombine)\r\n//console.log(checkH5_ALL)\r\n//var checkH5_ALLElective = check1Group(dataCombineElective)\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n// Soft Constraint \r\n// S1: A student has a class schedule toward the end of the day\r\n// S2: A student have more than two class in a row\r\n\r\n\r\n//Check for the S1 violation: student have class at the end of the day\r\nconst checkEndOfClass = (array) => {\r\n   let count =0\r\n   let totalRoom = array.length / 38\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n       let indexArray = (x * 37)\r\n       if(array[indexArray] != 100 ){\r\n           count = 1\r\n       }\r\n   }\r\n   return count\r\n\r\n}\r\n// var checkS1_50 = checkEndOfClass(AntArr50)\r\n// var checkS1_100 = checkEndOfClass(AntArr100)\r\n// var checkS1_200 = checkEndOfClass(AntArr200)\r\n// var checkS1_500 = checkEndOfClass(AntArr500)\r\n// var checkS1_Elective50 = checkEndOfClass(AntArrElective50)\r\n// var checkS1_Elective100 = checkEndOfClass(AntArrElective100)\r\n// var checkS1_Elective200 = checkEndOfClass(AntArrElective200)\r\n// var checkS1_Elective500 = checkEndOfClass(AntArrElective500)\r\n\r\n\r\n//Check for the S2 violation: teacher have 2 class in a row\r\n\r\nconst check2ClassInARow = (array) => {\r\n   let count =0\r\n   for(let i = 0; i < array.length; i++){\r\n       try{\r\n        if(array[i][5] != undefined && array[i+3][5] != undefined && array[i+2][5] != undefined && array[i+4][5] != undefined){\r\n            if(array[i][5] == array[i+3][5] && array[i+2][5] == array[i+4][5]){\r\n                count = 1\r\n            }\r\n       }\r\n       }catch{}\r\n   }\r\n   return count\r\n\r\n}\r\n// var checkS2_50 = check2ClassInARow(AntArr50)\r\n// var checkS2_100 = check2ClassInARow(AntArr100)\r\n// var checkS2_200 = check2ClassInARow(AntArr200)\r\n// var checkS2_500 = check2ClassInARow(AntArr500)\r\n// var checkS2_Elective50 = check2ClassInARow(AntArrElective50)\r\n// var checkS2_Elective100 = check2ClassInARow(AntArrElective100)\r\n// var checkS2_Elective200 = check2ClassInARow(AntArrElective200)\r\n// var checkS2_Elective500 = check2ClassInARow(AntArrElective500)\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n//Check total Hard Constraint\r\n\r\n// const checkTotalHardContraint = () => {\r\n//    let count =0\r\n//    //let totalH1 = checkH1_ALL\r\n// //    let totalH2 = checkH2_ALL\r\n// //    let totalH4 = checkH4_ALL\r\n// //    let totalH5 = checkH5_ALL\r\n\r\n// //    let totalH1_Elective = checkH1_ALLElective\r\n// //    let totalH2_Elective = checkH2_ALLElective\r\n// //    let totalH4_Elective = checkH4_ALLElective\r\n// //    let totalH5_Elective = checkH5_ALLElective\r\n//    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5 + totalH1_Elective + totalH2_Elective + totalH4_Elective + totalH5_Elective\r\n//    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5\r\n//    //let totalHC = totalH2 + totalH4 + totalH5\r\n//    //let totalHC = totalH1 + totalH2 + totalH4 + totalH5 \r\n\r\n// //    if( totalHC != 0){\r\n// //        count +=1\r\n// //    }   \r\n\r\n//    return totalHC\r\n// }\r\n// var checkTotalHardContraints = checkTotalHardContraint()\r\n// console.log(\"Total Hard Constraint: \"+checkTotalHardContraints)\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// const checkTotalSoftContraint = () => {\r\n//     let count =0\r\n//     let totalS1 = checkS1_50 + checkS1_100 + checkS1_200 + checkS1_500 + checkS1_Elective50 + checkS1_Elective100 + checkS1_Elective200 + checkS1_Elective500\r\n//     let totalS2 = checkS2_50 + checkS2_100 + checkS2_200 + checkS2_500 + checkS2_Elective50 + checkS2_Elective100 + checkS2_Elective200 + checkS2_Elective500\r\n    \r\n//     if(totalS1 != 0){\r\n//         count +=1\r\n//     }\r\n//     if(totalS2 != 0){\r\n//         count +=1\r\n//     }   \r\n//     return count\r\n// }\r\n// var checkTotalSoftContraints = checkTotalSoftContraint()\r\n//console.log(\"Total Soft Constraint: \"+checkTotalSoftContraints)\r\n//----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// const change100ToEmpty = (data) => {\r\n//     for(let i = 0; i< data.length; i++){\r\n//         if(data[i] == 100){\r\n//             data[i] = [];\r\n//         }\r\n//     }\r\n//     return data;\r\n// }\r\n// //let finalData = change100ToEmpty(combineData)\r\n\r\n// const change100ToEmptyElective = (data) => {\r\n//     for(let i = 0; i< data.length; i++){\r\n//         if(data[i] == 100){\r\n//             data[i] = [];\r\n//         }\r\n//     }\r\n//     return data;\r\n// }\r\n// let finalDataElective = change100ToEmptyElective(combineElectiveData)\r\n\r\n\r\n// const checkMissingData = (data50,data100,data200,data500,dataE50,dataE100,dataE200,dataE500) => {\r\n//     let countData = []\r\n//     for(let i = 0; i< courseData[0].length;i++){\r\n//         for(let j = 0; j <courseData[0][i][7]; j++){\r\n//             countData.push(courseData[0][i]);\r\n//         }\r\n//     }\r\n\r\n//     let totalGenerateScheduleData = data50 + data100 + data200 + data500 + dataE50 + dataE100 + dataE200 + dataE500\r\n\r\n//     if(countData.length == totalGenerateScheduleData){\r\n  \r\n//     }else{\r\n\r\n//     }\r\n// }\r\n// //checkMissingData(checkAmount50,checkAmount100,checkAmount200,checkAmount500,checkAmountElective50,checkAmountElective100,checkAmountElective200,checkAmountElective500)\r\n\r\n\r\n// checkTotalHardContraintsAll = checkTotalHardContraints\r\n// checkTotalSoftContraintsAll = checkTotalSoftContraints\r\n// //finalDataAll.push(finalData)\r\n// finalDataAllElective.push(finalDataElective)\r\n// //return {checkTotalHardContraints,checkTotalSoftContraints,finalData,finalDataAllElective}\r\n// return {checkTotalHardContraints,checkTotalSoftContraints,finalDataAllElective}\r\n}\r\nfor(let i = 1; i <= 1; i++){\r\n    let antSystemAlgo = antSystem();\r\n}\r\n// -------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// let trigger = 0\r\n\r\n// const iteration = () => {\r\n//         antSystem()\r\n//         let globalBestHS = checkTotalHardContraintsAll \r\n//         let globalBestSS = checkTotalSoftContraintsAll\r\n//         let globalBestScehdule = finalDataAll[0]\r\n//         let globalBestScehduleElective = finalDataAllElective[0]\r\n//     for(let i= 1; i <= 1; i++){\r\n//         antSystem()\r\n//         let localBestHS = checkTotalHardContraintsAll \r\n//         let localBestSS = checkTotalSoftContraintsAll\r\n//         let localBestScehdule = finalDataAll[0]\r\n//         let localBestScehduleElective = finalDataAllElective[0]\r\n//             console.log(\"iteraion: \" + i)\r\n//             if(globalBestHS > localBestHS ){\r\n//                 globalBestHS = localBestHS\r\n//                 globalBestSS = localBestSS\r\n//                 globalBestScehdule = localBestScehdule\r\n//                 globalBestScehduleElective = localBestScehduleElective\r\n//             }\r\n//             if(localBestHS == 0){\r\n//                 console.log(\"iteraion: \" + i)\r\n//                 console.log(\"workable solution is found\")\r\n//                 globalBestHS = localBestHS\r\n//                 globalBestSS = localBestSS\r\n//                 globalBestScehdule = localBestScehdule\r\n//                 globalBestScehduleElective = localBestScehduleElective\r\n//                 console.log(\"Workable Gloabal best HS: \"+globalBestHS)\r\n//                 console.log(\"Workable Gloabal best SS: \" +globalBestSS)\r\n//                 //console.log(finalDataAll[0])\r\n//                 trigger = 1\r\n//                 return [finalDataAll[0], finalDataAllElective[0]]\r\n//             }\r\n//             else if(localBestHS == 0 && localBestSS == 0){\r\n//                 console.log(\"iteraion: \" + i)\r\n//                 console.log(\"perfect solution is found\")\r\n//                 globalBestHS = localBestHS\r\n//                 globalBestSS = localBestSS\r\n//                 globalBestScehdule = localBestScehdule\r\n//                 console.log(\"Perfect Gloabal best HS: \"+globalBestHS)\r\n//                 console.log(\"Perfect Gloabal best SS: \" +globalBestSS)\r\n//                 console.log(finalDataAll[0])\r\n//                 trigger = 1\r\n//                 return [finalDataAll[0], finalDataAllElective[0]]\r\n//             }\r\n//     }\r\n//     return [finalDataAll[0], finalDataAllElective[0]]\r\n// }\r\n// let interations = iteration()\r\n\r\n// let presentableData = []\r\n// let presentableDataElective = []\r\n\r\n// if(trigger == 1){\r\n// //shot course code, course name and lecturer    \r\n// const changeToPresentationData = (data) => {\r\n//     for(let i= 0; i <= data[0].length; i++){\r\n//         try {\r\n//             presentableData.push([data[0][i][1],data[0][i][2],data[0][i][5]])\r\n//         } catch (error) {\r\n            \r\n//         }\r\n//     }\r\n//     for(let i= 0; i <= data[1].length; i++){\r\n//         try {\r\n//             presentableDataElective.push([data[1][i][1],data[1][i][2],data[1][i][5]])\r\n//         } catch (error) {\r\n            \r\n//         }\r\n//     }\r\n// }\r\n// changeToPresentationData(interations)\r\n\r\n\r\n// let allRoomName = []\r\n// for(let i = 0; i < roomData[0].length; i++){\r\n//     allRoomName.push(roomData[0][i][0])\r\n// }\r\n// allRoomName.unshift(\"Room\");\r\n// if(allRoomName.pop() == undefined){\r\n// }\r\n\r\n\r\n// let weekday = ['Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday','Monday',\r\n// 'Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday','Tuesday',\r\n// 'Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday','Thursday',\r\n// 'Friday','Friday','Friday','Friday','Friday','Friday','Friday','Friday']\r\n\r\n// let wed = ['Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday']\r\n\r\n\r\n// const create2dArray = (weekdayArray,partDay,arrayAll, partAll) => {\r\n//     var tmp = [];\r\n\r\n//     for(var i = 0; i < weekdayArray.length; i += partDay) {\r\n//         tmp.push(weekdayArray.slice(i, i + partDay));\r\n//     }\r\n//     for(var i = 0; i < arrayAll.length; i += partAll) {\r\n//         tmp.push(arrayAll.slice(i, i + partAll));\r\n//     }\r\n//     return tmp;\r\n// }\r\n// let dataset = create2dArray(weekday,38,presentableData,38)\r\n// console.log(dataset);\r\n\r\n// const create2dArrayElective = (weekdayArray,partDay,arrayAll, partAll) => {\r\n//     var tmp = [];\r\n\r\n//     for(var i = 0; i < weekdayArray.length; i += partDay) {\r\n//         tmp.push(weekdayArray.slice(i, i + partDay));\r\n//     }\r\n//     for(var i = 0; i < arrayAll.length; i += partAll) {\r\n//         tmp.push(arrayAll.slice(i, i + partAll));\r\n//     }\r\n//     return tmp;\r\n// }\r\n// let datasetElective = create2dArrayElective(wed,10,presentableDataElective,10);\r\n// console.log(datasetElective)\r\n\r\n// //let compileDataset = dataset.concat(datasetElective);\r\n// //console.log(dataset)\r\n\r\n// const insertRoomName = (roomData,array) => {\r\n//     for(let i= 0; i<array.length; i++){\r\n//         array[i].unshift(roomData[i]);\r\n//     }\r\n//     return array;\r\n// }\r\n\r\n// insertRoomName(allRoomName,dataset)\r\n\r\n// const insertRoomNameElective = (roomData,array) => {\r\n//     for(let i= 0; i<array.length; i++){\r\n//         array[i].unshift(roomData[i]);\r\n//     }\r\n//     return array;\r\n// }\r\n\r\n// insertRoomName(allRoomName,datasetElective)\r\n\r\n\r\n// /** Convert a 2D array into a CSV string\r\n//  */\r\n//   function arrayToCsv(data){\r\n//     //console.log(data)\r\n//     return data.map(row =>\r\n//       row\r\n//       .map(String)  // convert every value to String\r\n//       .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\r\n//       .map(v => `\"${v}\"`)  // quote it\r\n//       .join(',')  // comma-separated\r\n//     ).join('\\r\\n');  // rows starting on new lines\r\n//   }\r\n\r\n// let csv = arrayToCsv(\r\n//     dataset\r\n// );\r\n\r\n// function downloadBlob(content, filename, contentType) {\r\n//     // Create a blob\r\n//     var blob = new Blob([content], { type: contentType });\r\n//     var url = URL.createObjectURL(blob);\r\n  \r\n//     // Create a link to download it\r\n//     var pom = document.createElement('a');\r\n//     pom.href = url;\r\n//     pom.setAttribute('download', filename);\r\n//     pom.click();\r\n//   }\r\n\r\n//   /** Convert a 2D array into a CSV string\r\n//    * elective\r\n//  */\r\n//    function arrayToCsvElective(data){\r\n//     //console.log(data)\r\n//     return data.map(row =>\r\n//       row\r\n//       .map(String)  // convert every value to String\r\n//       .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\r\n//       .map(v => `\"${v}\"`)  // quote it\r\n//       .join(',')  // comma-separated\r\n//     ).join('\\r\\n');  // rows starting on new lines\r\n//   }\r\n\r\n// let csvElective = arrayToCsvElective(\r\n//     datasetElective\r\n// );\r\n\r\n// function downloadBlobElective(content, filename, contentType) {\r\n//     // Create a blob\r\n//     var blob = new Blob([content], { type: contentType });\r\n//     var url = URL.createObjectURL(blob);\r\n  \r\n//     // Create a link to download it\r\n//     var pom = document.createElement('a');\r\n//     pom.href = url;\r\n//     pom.setAttribute('download', filename);\r\n//     pom.click();\r\n//   }\r\n\r\n//   downloadBlob(csv, 'ModifiedAntSystem_GeneratedSchedule.csv', 'text/csv;charset=utf-8;')\r\n//   downloadBlobElective(csvElective, 'ModifiedAntSystemElective_GeneratedSchedule.csv', 'text/csv;charset=utf-8;')\r\n// }else{\r\n//     alert(\"no workable solution found, please refersh until get workable solution\")\r\n// }\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n        }\r\n    return(\r\n        <React.Fragment>\r\n            <h1>\r\n                Generate Schedule Page\r\n            </h1>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}