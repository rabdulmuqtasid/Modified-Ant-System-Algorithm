{"ast":null,"code":"// import React,{ useEffect,useState, useContext, Component } from \"react\";\n// class Ant extends Component {\n//     constructor(alpha, beta, Q) {\n//         this.alpha = alpha;\n//         this.beta = beta;\n//         this.Q = Q || 1;\n//         this.base = 0;\n//         this.walk = [];\n//         this.walkLength = null;\n//       }\n//           /**\n//      * Set the base node for this ant\n//      * \n//      * @param {Number} baseId\n//      */\n//     setBase(base) {\n//         this.base = base;\n//       }\n//       /**\n//        * Construct a solution to the problem\n//        * \n//        * @param  {Array} distances\n//        * @param  {Array} pheromones\n//        * @return {[type]}            [description]\n//        */\n//       doWalk(distances, pheromones) {\n//         this.walk = [this.base];\n//         this.walkLength = null;\n//         for(let i = 1; i < distances.length; i++) {\n//           this.walk.push(this.chooseNext(this.walk[i-1], distances, pheromones));\n//         }\n//         this.walk.push(this.walk[0]);\n//         this.walkLength = this.calculateWalkLength(distances);\n//       }\n//       chooseNext(currentNode, distances, pheromones) {\n//         let sumall = 0;\n//         let unvisited = [];\n//         for(let i = 0; i < distances.length; i++) {\n//           if (this.walk.indexOf(i) === -1) {\n//             unvisited.push(i);\n//           }\n//         }\n//         for(let i = 0; i < pheromones.length; i++) {\n//           if (i !== currentNode && unvisited.indexOf(i) !== -1) {\n//             sumall += Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\n//           }\n//         }\n//         let probs = [];\n//         let summul = 0;\n//         for(let i = 0; i < distances[currentNode].length; i++) {\n//           if (i !== currentNode && unvisited.indexOf(i) !== -1) {\n//             let mul = Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\n//             probs.push(mul/sumall);\n//             summul += mul;\n//           }\n//         }\n//         let rnd = Math.random();\n//         let x = 0;\n//         let tally = probs[x];\n//         while (rnd > tally && x < probs.length - 1) {\n//           tally += probs[++x];\n//         }\n//         return unvisited[x];\n//       }\n//       calculateWalkLength(distances) {\n//         let len = 0;\n//         for(let i = 1; i < this.walk.length; i++) {\n//           len += distances[this.walk[i-1]][this.walk[i]];\n//         }\n//         return len;\n//       }\n//       layPheromones(pheromones) {\n//         for(let i = 1; i < this.walk.length; i++) {\n//           pheromones[this.walk[i-1]][this.walk[i]] += (1/this.walkLength) * this.Q;\n//           pheromones[this.walk[i]][this.walk[i-1]] += (1/this.walkLength) * this.Q;\n//         }\n//       }\n//       render() {\n//         return (\n//           <React.Fragment/>\n//         );\n//       }\n// };\n// export default Ant;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/Algorithm/Ant.js"],"names":[],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React,{ useEffect,useState, useContext, Component } from \"react\";\r\n\r\n// class Ant extends Component {\r\n\r\n//     constructor(alpha, beta, Q) {\r\n//         this.alpha = alpha;\r\n//         this.beta = beta;\r\n//         this.Q = Q || 1;\r\n    \r\n//         this.base = 0;\r\n//         this.walk = [];\r\n//         this.walkLength = null;\r\n//       }\r\n//           /**\r\n//      * Set the base node for this ant\r\n//      * \r\n//      * @param {Number} baseId\r\n//      */\r\n//     setBase(base) {\r\n//         this.base = base;\r\n//       }\r\n    \r\n//       /**\r\n//        * Construct a solution to the problem\r\n//        * \r\n//        * @param  {Array} distances\r\n//        * @param  {Array} pheromones\r\n//        * @return {[type]}            [description]\r\n//        */\r\n//       doWalk(distances, pheromones) {\r\n//         this.walk = [this.base];\r\n//         this.walkLength = null;\r\n//         for(let i = 1; i < distances.length; i++) {\r\n//           this.walk.push(this.chooseNext(this.walk[i-1], distances, pheromones));\r\n//         }\r\n//         this.walk.push(this.walk[0]);\r\n//         this.walkLength = this.calculateWalkLength(distances);\r\n//       }\r\n    \r\n//       chooseNext(currentNode, distances, pheromones) {\r\n//         let sumall = 0;\r\n//         let unvisited = [];\r\n//         for(let i = 0; i < distances.length; i++) {\r\n//           if (this.walk.indexOf(i) === -1) {\r\n//             unvisited.push(i);\r\n//           }\r\n//         }\r\n    \r\n//         for(let i = 0; i < pheromones.length; i++) {\r\n//           if (i !== currentNode && unvisited.indexOf(i) !== -1) {\r\n//             sumall += Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\r\n//           }\r\n//         }\r\n    \r\n//         let probs = [];\r\n//         let summul = 0;\r\n//         for(let i = 0; i < distances[currentNode].length; i++) {\r\n//           if (i !== currentNode && unvisited.indexOf(i) !== -1) {\r\n//             let mul = Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\r\n//             probs.push(mul/sumall);\r\n//             summul += mul;\r\n//           }\r\n//         }\r\n    \r\n//         let rnd = Math.random();\r\n//         let x = 0;\r\n//         let tally = probs[x];\r\n//         while (rnd > tally && x < probs.length - 1) {\r\n//           tally += probs[++x];\r\n//         }\r\n        \r\n//         return unvisited[x];\r\n//       }\r\n    \r\n//       calculateWalkLength(distances) {\r\n//         let len = 0;\r\n//         for(let i = 1; i < this.walk.length; i++) {\r\n          \r\n//           len += distances[this.walk[i-1]][this.walk[i]];\r\n//         }\r\n        \r\n//         return len;\r\n//       }\r\n    \r\n//       layPheromones(pheromones) {\r\n//         for(let i = 1; i < this.walk.length; i++) {\r\n//           pheromones[this.walk[i-1]][this.walk[i]] += (1/this.walkLength) * this.Q;\r\n//           pheromones[this.walk[i]][this.walk[i-1]] += (1/this.walkLength) * this.Q;\r\n//         }\r\n//       }\r\n//       render() {\r\n//         return (\r\n//           <React.Fragment/>\r\n//         );\r\n//       }\r\n// };\r\n// export default Ant;"]},"metadata":{},"sourceType":"module"}