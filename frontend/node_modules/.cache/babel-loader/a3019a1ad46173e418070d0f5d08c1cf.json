{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { create, find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\nlet finalDataAll = [];\nlet finalDataAllElective = [];\nlet checkHardConstraintOutsite = 0;\nlet checkSoftConstraintOutsite = 0;\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState();\n  const [CsvData, setCsvData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code'], Dataset['Slot1'], Dataset['Slot2']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]);\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const lecturerData = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData50 = [];\n    const filterData100 = [];\n    const filterData200 = [];\n    const filterData500 = [];\n    const filterDataElective50 = [];\n    const filterDataElective100 = [];\n    const filterDataElective200 = [];\n    const filterDataElective500 = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      let lecturer = [courseData[0][i][5]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n      lecturer.reduce(function (results, item, index, array) {\n        results[index] = item;\n        lecturerData.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    }\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\n    const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\n    notDuplicatesLecturer.pop(); //console.log(notDuplicatesLecturer)\n\n    let courseDataXElective = [];\n    let courseDataWithElective = [];\n    courseData[0].pop(); //saparate faculty course with the elective course\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) != 'TMU') {\n        courseData[0][i].splice();\n\n        if (courseData[0][i][1].slice(0, 3) != 'TMX') {\n          courseData[0][i].splice();\n          courseDataXElective.push(courseData[0][i]);\n        }\n      }\n    } //saparate elective course with the faculty course\n\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) == 'TMU' || courseData[0][i][1].slice(0, 3) == 'TMX') {\n        courseDataWithElective.push(courseData[0][i]);\n      }\n    } //insert data without elective courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataXElective.length; i++) {\n      if (courseDataXElective[i][0] < 50) {\n        filterData50.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\n        filterData100.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200) {\n        filterData200.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\n        filterData500.push(courseDataXElective[i]);\n      }\n    } //console.log(filterData50)\n    //insert data without faculty courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataWithElective.length; i++) {\n      if (courseDataWithElective[i][0] < 50) {\n        filterDataElective50.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\n        filterDataElective100.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200) {\n        filterDataElective200.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\n        filterDataElective500.push(courseDataWithElective[i]);\n      }\n    } // console.log(filterDataElective50);\n    // console.log(filterDataElective100);\n    // console.log(filterDataElective200);\n    // console.log(filterDataElective500);\n\n\n    let roomUnder50 = [];\n    let roomUnder100 = [];\n    let roomUnder200 = [];\n    let roomUnder500 = [];\n\n    const checkNumberofRoom = () => {\n      for (let i = 0; i < roomData[0].length; i++) {\n        let room = roomData[0][i][1]; //console.log(roomData[0][i][1]);\n\n        if (room < 50) {\n          roomUnder50.push(room);\n        } else if (room > 50 && room < 100) {\n          roomUnder100.push(room);\n        } else if (room > 100 && room < 200) {\n          roomUnder200.push(room);\n        } else if (room > 200) {\n          roomUnder500.push(room);\n        }\n      }\n    };\n\n    checkNumberofRoom();\n\n    const createArray = data => {\n      var result = [];\n\n      for (let i = 0; i < data; i++) {\n        result[i] = [];\n      }\n\n      return result;\n    };\n\n    let DataArray50 = roomUnder50.length * 38;\n    let DataArray100 = roomUnder100.length * 38;\n    let DataArray200 = roomUnder200.length * 38;\n    let DataArray500 = roomUnder500.length * 38;\n    let DataArrayElective50 = roomUnder50.length * 10;\n    let DataArrayElective100 = roomUnder100.length * 10;\n    let DataArrayElective200 = roomUnder200.length * 10;\n    let DataArrayElective500 = roomUnder500.length * 10; //----------------------------------------------------------------------------------------------------------------------------------------\n\n    var checkTotalHardContraintsAll = 0;\n    var checkTotalSoftContraintsAll = 0;\n\n    const antSystem = () => {\n      //Faculty courses\n      //create 1d array for dataset 50\n      const array1DElective50 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrElective50 = array1DElective50(DataArrayElective50);\n      let extraDataElective50_Slot2_2 = [];\n      let extraData50Elective_Slot2_1 = [];\n      let insertedDataElective50_Slot2_2 = [];\n      let insertedDataElective50_Slot2_1 = [];\n\n      const AntAlgoInsertElective50 = array => {\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let k4 = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let remainderArray3 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterDataElective50.length; x++) {\n          test.push(filterDataElective50[x]);\n        }\n\n        for (let i = array.length - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let slot1 = test[k][9];\n            let slot2 = test[k][10];\n\n            if (hourMS == 3) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100 && array[i - 1] == 100 && array[i + 1] == 100) {\n                array[i] = array[j];\n                array[i - 1] = array[j - 1];\n                array[i + 1] = array[j + 1];\n                array[j] = test[k];\n                array[j - 1] = test[k];\n                array[j + 1] = test[k];\n              } //  else{\n              //     remainderArray3.push(test[k]);    \n              // }\n\n            } else if (hourMS == 2) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k];\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            } else if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                //slot in slot1 = 2\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const z = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[z];\n                      array[i - 1] = array[z - 1];\n                      array[i] = test[k];\n                      array[i - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[z];\n                      array[i + 1] = array[z + 1];\n                      array[z] = test[k];\n                      array[z + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } //slot in slot1 = 2\n                else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const v = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[v];\n                      array[i - 1] = array[v - 1];\n                      array[v] = test[k];\n                      array[v - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[v];\n                      array[i + 1] = array[v + 1];\n                      array[v] = test[k];\n                      array[v + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        } //console.log(remainderArraySlot1);\n        //for(let x = 0; x < remainderArraySlot1.length; x++){\n\n\n        for (let z = 0; z < array.length; z++) {\n          for (let x = 0; x < remainderArraySlot1.length; x++) {\n            if (array[z] == remainderArraySlot1[x]) {\n              for (let b = 1; b <= totalRoom; b++) {\n                if (array[z + 38 * b] == 100 && array[z + 38 * b - 1] == 100) {\n                  array[z + 38 * b] = 0;\n                  array[z + 38 * b - 1] = 0;\n                }\n\n                if (array[z - 38 * b] == 100 && array[z - 38 * b - 1] == 100) {\n                  array[z - 38 * b] = 0;\n                  array[z - 38 * b - 1] = 0;\n                }\n              }\n            }\n          }\n        } //slot in 3\n\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (array[i + 1] == 100 && array[i + 2] == 100) {\n              // slot 3 hours in 1 go\n              if (k4 < remainderArray3.length) {\n                array[i] = remainderArray3[k4];\n                array[i + 1] = remainderArray3[k4];\n                array[i + 2] = remainderArray3[k4];\n              }\n\n              k4++;\n            }\n          } else {\n            if (remainderArray3[k4] != undefined) {\n              insertedDataElective50_Slot2_1.push(remainderArray3[k4]);\n            }\n          }\n        } //fullfill the slot 3\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          }\n        } //console.log(remainderArray);\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const c = Math.floor(Math.random() * (x + 1));\n              array[x] = array[c];\n              array[x + 1] = array[c + 1];\n              array[c] = remainderArray[k2];\n              array[c + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective50_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const b = Math.floor(Math.random() * (x + 1));\n              array[x] = array[b];\n              array[x + 1] = array[b + 1];\n              array[b] = remainderArray[k2];\n              array[b + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 1) {\n                insertedDataElective50_Slot2_1.push(remainderArray[k2]);\n              }\n\n              if (slot2 == 2) {\n                insertedDataElective50_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          }\n        } //if there is array in -1, reslot in into the array\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedDataElective50_Slot2_1.push(array[-1]); // array[-1] = undefined\n        }\n\n        return array;\n      };\n\n      var AntArrInsElective50 = AntAlgoInsertElective50(AntArrElective50);\n\n      const checkAmountDataElective50B = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 50 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmountB = checkAmountDataElective50B(AntArrInsElective50);\n\n      const slot2Equal1forElective50 = array => {\n        let k = 0;\n        let test2 = []; //console.log(insertedDataElective50_Slot2_1)\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (array[x + 1] == 100 && array[x + 2] == 100) {\n              // slot 3 hours in 1 go\n              if (k < insertedDataElective50_Slot2_1.length) {\n                array[x] = insertedDataElective50_Slot2_1[k];\n                array[x + 1] = insertedDataElective50_Slot2_1[k];\n                array[x + 2] = insertedDataElective50_Slot2_1[k];\n              }\n\n              k++;\n            }\n          }\n        } //console.log(test2)\n\n\n        return array;\n      };\n\n      slot2Equal1forElective50(AntArrElective50);\n\n      const slot2Equal2forElective50 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedDataElective50_Slot2_2.length) {\n              array[x] = insertedDataElective50_Slot2_2[k];\n              array[x + 1] = insertedDataElective50_Slot2_2[k];\n            } else {\n              if (insertedDataElective50_Slot2_2[k] != undefined) {\n                extraDataElective50_Slot2_2.push(insertedDataElective50_Slot2_2[k]);\n              }\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < extraDataElective50_Slot2_2.length) {\n              array[x] = extraDataElective50_Slot2_2[k];\n              array[x + 1] = extraDataElective50_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal2forElective50(AntArrElective50);\n      let reshuffle = [];\n      let notDupeShuffle = [];\n\n      const check1Teacher_50 = array => {\n        let count = 0;\n        let indexArray = 0;\n        let indexArray2 = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffle.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffle.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffle.length; x++) {\n          try {\n            if (reshuffle[x][0] != reshuffle[x + 1][0]) {\n              notDupeShuffle.push(reshuffle[x]);\n            }\n          } catch {}\n        }\n\n        reshuffle.pop(notDupeShuffle);\n      };\n\n      check1Teacher_50(AntArrElective50);\n\n      const reshuffle50 = (data, array) => {\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != undefined) {\n                if (data[x][0] == i) {\n                  array[i] = 0;\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              count += 1;\n              array[i] = data[k][1];\n            }\n\n            k++;\n          }\n        } // for (var i = array.length - 1; i > 0; i--) {\n        //     var j = Math.floor(Math.random() * (i + 1));\n        //     if(k < data.length){\n        //         if(array[i] == 100){\n        //             array[i] = array[j];\n        //             array[j] = data[k][1];\n        //         }\n        //     }\n        //     k++\n        // }\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        console.log(\"count: \" + count);\n      };\n\n      reshuffle50(notDupeShuffle, AntArrElective50);\n\n      const checkAmountData50_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 50 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData50_2(AntArrInsElective50);\n      console.log(AntArrInsElective50);\n      console.log(\"Amount of data: \" + checkAmount_2);\n\n      const checkAmountData50_0 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 0) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_0 = checkAmountData50_0(AntArrInsElective50);\n      console.log(\"zero counter: \" + checkAmount_0); //----------------------------------------------------------------------------------------------------------------------------------------\n\n      const check1Group = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 37;\n        }\n\n        for (let x = 1; x <= totalRoom; x++) {\n          try {\n            //for(let x= 1 ; x <= totalRoom ; x++){\n            for (let i = 0; i < array.length; i++) {\n              indexArray = x * 37;\n\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      //console.log(array[i])\n                      //console.log(array[i+indexArray])\n                      count += 1;\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      }; // var checkH1_50 = check1Group(AntArr50)\n      // console.log(\"HS1 50: \" + checkH1_50);\n\n\n      var checkH1_50 = check1Group(AntArrElective50);\n      console.log(\"HS1 50: \" + checkH1_50);\n\n      const check1Teacher = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    //if(array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\n                    //    console.log(i)\n                    //    console.log(array[i])\n                    //    console.log(i+indexArray)\n                    //    console.log(array[i+indexArray])\n                    count += 1;\n                  } // if(array[i][5] == array[i+indexArray][5] && array[i-1][5] == array[i+indexArray-1][5]){\n                  //     count +=1\n                  //  }\n\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      };\n\n      var checkH5_50 = check1Teacher(AntArrElective50);\n      console.log(\"HS5 50: \" + checkH5_50); // console.log(\"H5 All: \"+checkH5_ALL)\n      // console.log(\"H5 Elective: \"+checkH5_ALLElective)\n    };\n\n    for (let i = 1; i <= 100; i++) {\n      console.log(\"iteration: \" + i);\n      antSystem();\n    } // -------------------------------------------------------------------------------------------------------------------------------------------\n    //----------------------------------------------------------------------------------------------------------------------------------------\n\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 13\n    }\n  }, \"Generate Schedule Page\"));\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["create","find","forEach","indexOf","React","useEffect","useState","useContext","useParams","_","CSVLink","LoadingSpinner","finalDataAll","finalDataAllElective","checkHardConstraintOutsite","checkSoftConstraintOutsite","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","CsvData","setCsvData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","lecturerData","roomName","roomSize","filterData50","filterData100","filterData200","filterData500","filterDataElective50","filterDataElective100","filterDataElective200","filterDataElective500","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","lecturer","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","notDuplicatesLecturer","pop","courseDataXElective","courseDataWithElective","slice","splice","roomUnder50","roomUnder100","roomUnder200","roomUnder500","checkNumberofRoom","createArray","data","result","DataArray50","DataArray100","DataArray200","DataArray500","DataArrayElective50","DataArrayElective100","DataArrayElective200","DataArrayElective500","checkTotalHardContraintsAll","checkTotalSoftContraintsAll","antSystem","array1DElective50","AntArrElective50","extraDataElective50_Slot2_2","extraData50Elective_Slot2_1","insertedDataElective50_Slot2_2","insertedDataElective50_Slot2_1","AntAlgoInsertElective50","test","k","k2","k3","k4","remainderArray","remainderArraySlot1","remainderArray3","totalRoom","x","hourMS","slot1","slot2","j","Math","floor","random","b","z","v","undefined","q","c","AntArrInsElective50","checkAmountDataElective50B","count","checkAmountB","slot2Equal1forElective50","test2","slot2Equal2forElective50","reshuffle","notDupeShuffle","check1Teacher_50","indexArray","indexArray2","reshuffle50","checkAmountData50_2","checkAmount_2","checkAmountData50_0","checkAmount_0","check1Group","checkH1_50","check1Teacher","checkH5_50"],"mappings":"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","sourcesContent":["import { create, find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport _ from 'lodash';\r\nimport { CSVLink } from \"react-csv\";\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\n\r\nlet finalDataAll = [];\r\nlet finalDataAllElective = [];\r\nlet checkHardConstraintOutsite = 0;\r\nlet checkSoftConstraintOutsite = 0;\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    const [CsvData, setCsvData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code'],Dataset['Slot1'],Dataset['Slot2']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const lecturerData = []\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData50  = [];\r\n            const filterData100  = [];\r\n            const filterData200  = [];\r\n            const filterData500  = [];\r\n            const filterDataElective50  = [];\r\n            const filterDataElective100  = [];\r\n            const filterDataElective200  = [];\r\n            const filterDataElective500  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                let lecturer = [courseData[0][i][5]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                lecturer.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    lecturerData.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n \r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n            const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\r\n            notDuplicatesLecturer.pop();\r\n            //console.log(notDuplicatesLecturer)\r\n\r\n\r\n            let courseDataXElective = []\r\n            let courseDataWithElective = []\r\n            courseData[0].pop()\r\n\r\n            //saparate faculty course with the elective course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) != 'TMU'){\r\n                    courseData[0][i].splice()\r\n                    if(  courseData[0][i][1].slice(0,3) != 'TMX'){\r\n                        courseData[0][i].splice()\r\n                        courseDataXElective.push(courseData[0][i])\r\n                    }\r\n                }\r\n            }\r\n\r\n            //saparate elective course with the faculty course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) == 'TMU' ||  courseData[0][i][1].slice(0,3) == 'TMX'){\r\n                    courseDataWithElective.push(courseData[0][i])\r\n                }\r\n            }\r\n\r\n            //insert data without elective courses into correct room capacity\r\n                for(let i = 0; i< courseDataXElective.length;i++){\r\n                        if (courseDataXElective[i][0] < 50) {\r\n                            filterData50.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\r\n                            \r\n                            filterData100.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200 ) {\r\n                            filterData200.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\r\n                            filterData500.push(courseDataXElective[i]);\r\n                        }\r\n                }\r\n                //console.log(filterData50)\r\n\r\n                //insert data without faculty courses into correct room capacity\r\n                for(let i = 0; i< courseDataWithElective.length;i++){\r\n                    if (courseDataWithElective[i][0] < 50) {\r\n                        filterDataElective50.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\r\n                        \r\n                        filterDataElective100.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200 ) {\r\n                        filterDataElective200.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\r\n                        filterDataElective500.push(courseDataWithElective[i]);\r\n                    }\r\n                }\r\n                // console.log(filterDataElective50);\r\n                // console.log(filterDataElective100);\r\n                // console.log(filterDataElective200);\r\n                // console.log(filterDataElective500);\r\n\r\n\r\n            let roomUnder50 = []\r\n            let roomUnder100 = []\r\n            let roomUnder200 = []\r\n            let roomUnder500 = []\r\n            const checkNumberofRoom = () => {\r\n                for(let i = 0; i < roomData[0].length; i++){\r\n                    let room = roomData[0][i][1]\r\n                    //console.log(roomData[0][i][1]);\r\n                    if(room < 50){\r\n                        roomUnder50.push(room)\r\n                    }else if(room > 50 && room < 100){\r\n                        roomUnder100.push(room)\r\n\r\n                    }else if(room > 100 && room < 200){\r\n                        roomUnder200.push(room)\r\n\r\n                    }else if(room > 200){\r\n                        roomUnder500.push(room)\r\n                    }\r\n                }\r\n            }\r\n            checkNumberofRoom();\r\n\r\n\r\n            const createArray = (data) => {\r\n                var result = []\r\n\r\n                    for(let i = 0; i<data; i++){\r\n                        result[i] = []\r\n                    }\r\n                return result;\r\n            }\r\n\r\n            let DataArray50 = roomUnder50.length * 38;\r\n            let DataArray100 = roomUnder100.length * 38;\r\n            let DataArray200 = roomUnder200.length * 38;\r\n            let DataArray500 = roomUnder500.length * 38;\r\n\r\n            let DataArrayElective50 = roomUnder50.length * 10;\r\n            let DataArrayElective100 = roomUnder100.length * 10;\r\n            let DataArrayElective200 = roomUnder200.length * 10;\r\n            let DataArrayElective500 = roomUnder500.length * 10;\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nvar checkTotalHardContraintsAll = 0\r\nvar checkTotalSoftContraintsAll = 0\r\n\r\nconst antSystem = () => {\r\n\r\n    //Faculty courses\r\n\r\n    //create 1d array for dataset 50\r\n    const array1DElective50 = (data) => {\r\n        var result = []\r\n    \r\n        for(let i = 0; i< data; i++){\r\n            result[i]= 100;\r\n        }\r\n        return result;\r\n    }\r\n    var AntArrElective50 = array1DElective50(DataArrayElective50);\r\n    \r\n    let extraDataElective50_Slot2_2 = []\r\n    let extraData50Elective_Slot2_1 = []\r\n    let insertedDataElective50_Slot2_2 = []\r\n    let insertedDataElective50_Slot2_1= []\r\n    \r\n    const AntAlgoInsertElective50 = (array) => {\r\n        let test = []\r\n        let k = 0;\r\n        let k2 =0\r\n        let k3 =0\r\n        let k4 =0 \r\n    \r\n        let remainderArray = []\r\n        let remainderArraySlot1 = []\r\n        let remainderArray3 = []\r\n    \r\n        let totalRoom = array.length / 38\r\n    \r\n        for(let x=0; x<filterDataElective50.length;x++){\r\n            test.push(filterDataElective50[x]);\r\n        }\r\n    \r\n         for(let i = array.length-1;i>0;i--){\r\n             if(k < test.length){\r\n             let hourMS = test[k][7]\r\n             let slot1 = test[k][9]\r\n             let slot2 = test[k][10]\r\n    \r\n             if(hourMS == 3){\r\n                 const j = Math.floor(Math.random()*(i+1));\r\n                 if(array[i] == 100 && array[i-1] == 100 && array[i+1]==100){\r\n                         array[i] = array[j];\r\n                         array[i-1] = array[j-1];\r\n                         array[i+1] = array[j+1];\r\n                         array[j] = test[k];\r\n                         array[j-1] = test[k];\r\n                         array[j+1] = test[k];\r\n                         \r\n                    }\r\n                    //  else{\r\n                    //     remainderArray3.push(test[k]);    \r\n                    // }\r\n                 }\r\n    \r\n              else if(hourMS == 2){\r\n                 const j = Math.floor(Math.random()*(i+1));\r\n                 if(array[i] == 100){\r\n                     if(array[i-1] == 100 ){\r\n                         array[i] = array[j];\r\n                         array[i-1] = array[j-1];\r\n                         array[j] = test[k];\r\n                         array[j-1] = test[k];\r\n                         \r\n                     }else if(array[i+1] == 100){\r\n                         array[i] = array[j];\r\n                         array[i+1] = array[j+1];\r\n                         array[j] = test[k];\r\n                         array[j+1] = test[k];\r\n                         \r\n                     }\r\n                     else{\r\n                         remainderArray.push(test[k]);\r\n                         \r\n                     }\r\n                 }else{\r\n                     remainderArray.push(test[k]);\r\n                 }\r\n                 }\r\n\r\n                else if(hourMS == 4){\r\n                    const j = Math.floor(Math.random()*(i+1));\r\n                    if(array[i] == 100){\r\n                        //slot in slot1 = 2\r\n                        if(array[i-1] == 100 ){\r\n                            array[i] = array[j];\r\n                            array[i-1] = array[j-1];\r\n                            array[j] = test[k];\r\n                            array[j-1] = test[k];\r\n                            \r\n                            // make stack become 0\r\n                            for(let b = 1; b <= totalRoom; b++){\r\n                             if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                                 array[j+38*b] = 0         \r\n                                 array[j+38*b-1] = 0\r\n                             }\r\n                             if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                                 array[j-38*b] = 0         \r\n                                 array[j-38*b-1] = 0\r\n                             }\r\n                            }\r\n                            const z = Math.floor(Math.random()*(i+1));\r\n                            if(array[i] == 100){\r\n                                //slot in slot1 = 2\r\n                                if(array[i-1] == 100 ){\r\n                                    array[i] = array[z];\r\n                                    array[i-1] = array[z-1];\r\n                                    array[i] = test[k];\r\n                                    array[i-1] = test[k];\r\n                                }\r\n                                else if(array[i+1] == 100 ){\r\n                                     array[i] = array[z];\r\n                                     array[i+1] = array[z+1];\r\n                                     array[z] = test[k];\r\n                                     array[z+1] = test[k];\r\n                                }\r\n                                else{\r\n                                 remainderArraySlot1.push(test[k]);\r\n                                 }\r\n                             }\r\n                             else{\r\n                                 remainderArraySlot1.push(test[k]);\r\n                             }\r\n                             //revert back to 100\r\n                             for(let x =0; x<array.length; x++){\r\n                                 if(array[x] == 0){\r\n                                     array[x] = 100\r\n                                 }\r\n                             }\r\n                        }\r\n                        //slot in slot1 = 2\r\n                        else if(array[i+1] == 100 ){\r\n                            array[i] = array[j];\r\n                            array[i+1] = array[j+1];\r\n                            array[j] = test[k];\r\n                            array[j+1] = test[k];\r\n                            \r\n                             // make stack become 0\r\n                            for(let b = 1; b <= totalRoom; b++){\r\n                             if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                                 array[j+38*b] = 0         \r\n                                 array[j+38*b-1] = 0\r\n                             }\r\n                             if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                                 array[j-38*b] = 0         \r\n                                 array[j-38*b-1] = 0\r\n                             }\r\n                            }\r\n                            const v = Math.floor(Math.random()*(i+1));\r\n                            if(array[i] == 100){\r\n                                //slot in slot1 = 2\r\n                                if(array[i-1] == 100 ){\r\n                                    array[i] = array[v];\r\n                                    array[i-1] = array[v-1];\r\n                                    array[v] = test[k];\r\n                                    array[v-1] = test[k];\r\n                                }\r\n                                else if(array[i+1] == 100){\r\n                                     array[i] = array[v];\r\n                                     array[i+1] = array[v+1];\r\n                                     array[v] = test[k];\r\n                                     array[v+1] = test[k];\r\n                                }\r\n                                else{\r\n                                 remainderArraySlot1.push(test[k]);\r\n                                 }\r\n                             }\r\n                             else{\r\n                                 remainderArraySlot1.push(test[k]);\r\n                             }\r\n                             //revert back to 100\r\n                             for(let x =0; x<array.length; x++){\r\n                                 if(array[x] == 0){\r\n                                     array[x] = 100\r\n                                 }\r\n                             }\r\n                        }\r\n                        else{\r\n                            remainderArray.push(test[k]);\r\n                        }\r\n                    }else{\r\n                        remainderArray.push(test[k]);\r\n                        \r\n                    }\r\n                 }\r\n             }\r\n             k++  \r\n         }\r\n         //console.log(remainderArraySlot1);\r\n         //for(let x = 0; x < remainderArraySlot1.length; x++){\r\n         for(let z =0; z< array.length; z++){\r\n             for(let x = 0; x < remainderArraySlot1.length; x++){\r\n                 if(array[z] == remainderArraySlot1[x]){\r\n                     for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[z+38*b]==100 && array[z+38*b-1]==100){\r\n                             array[z+38*b] = 0         \r\n                             array[z+38*b-1] = 0\r\n                         }\r\n                         if( array[z-38*b]==100 && array[z-38*b-1]==100){\r\n                             array[z-38*b] = 0         \r\n                             array[z-38*b-1] = 0\r\n                         }\r\n                        }\r\n                 }\r\n             }\r\n         }\r\n\r\n         //slot in 3\r\n         for(let i = 0; i < array.length; i++){\r\n            if(array[i] == 100){\r\n                if(array[i+1] == 100 && array[i+2]==100){// slot 3 hours in 1 go\r\n                    if(k4 < remainderArray3.length){\r\n                        array[i] = remainderArray3[k4];\r\n                        array[i+1] = remainderArray3[k4];\r\n                        array[i+2] = remainderArray3[k4];\r\n                    }\r\n                    k4++\r\n                }\r\n            }else{\r\n                if(remainderArray3[k4] != undefined){\r\n                    insertedDataElective50_Slot2_1.push(remainderArray3[k4]);   \r\n                }\r\n            }\r\n         }\r\n    \r\n         //fullfill the slot 3\r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] == 100){\r\n                 if(k3 < remainderArraySlot1.length){\r\n                     const q = Math.floor(Math.random()*(x+1));\r\n                         array[x] = array[q]\r\n                         array[x+1] = array[q+1]\r\n                         array[q] = remainderArraySlot1[k3]\r\n                         array[q+1] = remainderArraySlot1[k3]\r\n                 }else{\r\n                     if(remainderArraySlot1[k3] != undefined){\r\n                         insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3])\r\n                     }\r\n                 }\r\n                 k3++   \r\n             }else if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k3 < remainderArraySlot1.length){\r\n                     const q = Math.floor(Math.random()*(x+1));\r\n                         array[x] = array[q]\r\n                         array[x+1] = array[q+1]\r\n                         array[q] = remainderArraySlot1[k3]\r\n                         array[q+1] = remainderArraySlot1[k3]\r\n                 }else{\r\n                     if(remainderArraySlot1[k3] != undefined){\r\n                         insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3])\r\n                     }\r\n                 }\r\n                 k3++   \r\n             }\r\n         }\r\n    \r\n    \r\n         //console.log(remainderArray);\r\n         for(let x = 0; x< array.length; x++){\r\n                 if(array[x] == 100 && array[x+1] ==100 ){\r\n                     if(k2 < remainderArray.length){\r\n                         const c = Math.floor(Math.random()*(x+1));\r\n                         array[x] = array[c]\r\n                         array[x+1] = array[c+1]\r\n                         array[c] = remainderArray[k2]\r\n                         array[c+1] = remainderArray[k2]\r\n                     }\r\n                     try{\r\n                         let slot2 = remainderArray[k2][10]\r\n                         if(slot2 == 2){\r\n                             insertedDataElective50_Slot2_2.push(remainderArray[k2])\r\n                         }\r\n                     }catch{}\r\n                 k2++   \r\n             }else if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k2 < remainderArray.length){\r\n                     const b = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[b]\r\n                     array[x+1] = array[b+1]\r\n                     array[b] = remainderArray[k2]\r\n                     array[b+1] = remainderArray[k2]\r\n                 }\r\n                 try{\r\n                     let slot2 = remainderArray[k2][10]\r\n                     if(slot2 == 1){\r\n                         insertedDataElective50_Slot2_1.push(remainderArray[k2])\r\n                     }\r\n                     if(slot2 == 2){\r\n                         insertedDataElective50_Slot2_2.push(remainderArray[k2])\r\n                     }\r\n                 }catch{}\r\n             k2++   \r\n         }\r\n         }\r\n    \r\n         //if there is array in -1, reslot in into the array\r\n         for(let x =0; x<array.length; x++){\r\n             if(array[x] == 0){\r\n                 array[x] = 100\r\n             }\r\n         }\r\n         if(array[-1] != undefined){\r\n             insertedDataElective50_Slot2_1.push(array[-1]);\r\n             // array[-1] = undefined\r\n         }\r\n    \r\n        return array;\r\n    }\r\n    var AntArrInsElective50 = AntAlgoInsertElective50(AntArrElective50);\r\n    \r\n    const checkAmountDataElective50B = (array) => {\r\n     let count = 0\r\n     for(let i = 0; i < array.length; i++){\r\n             if(array[i] != 100 && array[i] !=50 && array[i] != 0 && array[i] != undefined){\r\n                 count += 1\r\n             }\r\n     }\r\n     return count\r\n     }\r\n    var checkAmountB = checkAmountDataElective50B(AntArrInsElective50)\r\n    \r\n    \r\n     const slot2Equal1forElective50 = (array) => {\r\n         let k = 0;\r\n         let test2 = []\r\n         //console.log(insertedDataElective50_Slot2_1)\r\n         \r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100){\r\n                if(array[x+1] == 100 && array[x+2]==100){// slot 3 hours in 1 go\r\n                    if(k < insertedDataElective50_Slot2_1.length){\r\n                        array[x] = insertedDataElective50_Slot2_1[k];\r\n                        array[x+1] = insertedDataElective50_Slot2_1[k];\r\n                        array[x+2] = insertedDataElective50_Slot2_1[k];\r\n                    }\r\n                    k++\r\n                }  \r\n             }\r\n         }\r\n         //console.log(test2)\r\n         return array;\r\n     }\r\n     slot2Equal1forElective50(AntArrElective50);\r\n    \r\n    \r\n     const slot2Equal2forElective50 = (array) => {\r\n         let k = 0;\r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100){\r\n                 if(k < insertedDataElective50_Slot2_2.length){\r\n                         array[x] = insertedDataElective50_Slot2_2[k]\r\n                         array[x+1] = insertedDataElective50_Slot2_2[k]\r\n                 }else{\r\n                     if(insertedDataElective50_Slot2_2[k] != undefined){\r\n                         extraDataElective50_Slot2_2.push(insertedDataElective50_Slot2_2[k])\r\n                     }\r\n                 }\r\n                 k++   \r\n             }\r\n         }\r\n    \r\n         for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100){\r\n                 if(k < extraDataElective50_Slot2_2.length){\r\n                     array[x] = extraDataElective50_Slot2_2[k]\r\n                     array[x+1] = extraDataElective50_Slot2_2[k]\r\n                 }\r\n             k++   \r\n             }\r\n         }\r\n         return array;\r\n    }\r\n     slot2Equal2forElective50(AntArrElective50);\r\n\r\n\r\n    let reshuffle = []\r\n    let notDupeShuffle = []\r\n    const check1Teacher_50 = (array) => {\r\n        let count =0\r\n        let indexArray = 0\r\n        let indexArray2 = 0\r\n        let totalRoom = array.length / 38\r\n        for(let x= 1 ; x <= totalRoom ; x++){\r\n         indexArray = (x * 38)\r\n            try{\r\n             for(let i = 1; i<array.length ; i++){\r\n                    if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                        try{\r\n                            if(array[i][5] == array[i+indexArray][5] ){\r\n                                reshuffle.push([i+indexArray,array[i+indexArray]]);\r\n                             }\r\n                             if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                                try{\r\n                                    reshuffle.push([i+indexArray,array[i+indexArray]]);\r\n                                }catch{}\r\n                            }\r\n                        }catch{}\r\n                    }    \r\n                }\r\n            }catch{}\r\n        }\r\n        for(let x =0; x < reshuffle.length; x++){\r\n            try{\r\n                if( reshuffle[x][0] != reshuffle[x+1][0]){\r\n                notDupeShuffle.push(reshuffle[x]);\r\n            }\r\n\r\n            }catch{}\r\n\r\n        }\r\n        reshuffle.pop(notDupeShuffle);\r\n\r\n    }\r\n    check1Teacher_50(AntArrElective50)\r\n\r\n    const reshuffle50 = (data,array) => {\r\n\r\n        let k = 0\r\n        let count =0\r\n        let totalRoom = array.length / 38\r\n\r\n        for(let x =0; x < data.length; x ++){\r\n            for(let i =0; i < array.length ; i++){\r\n                try{\r\n                    if(array[i] != undefined){\r\n                        if(data[x][0] == i){\r\n                            array[i] = 0\r\n                            for(let b = 1 ; b<= totalRoom ; b++){\r\n                                if( array[i+38*b]==100){\r\n                                    array[i+38*b] = 0\r\n                                }\r\n                                if( array[i-38*b]==100 ){\r\n                                    array[i-38*b] = 0\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }catch{}\r\n            }\r\n\r\n        }\r\n\r\n\r\n            for(let i = 0; i < array.length; i++){\r\n                    if(array[i] == 100){\r\n                        if(k< data.length){\r\n                        count +=1\r\n                        array[i] = data[k][1]\r\n                        }\r\n                        k++\r\n                }\r\n            }\r\n\r\n            // for (var i = array.length - 1; i > 0; i--) {\r\n            //     var j = Math.floor(Math.random() * (i + 1));\r\n            //     if(k < data.length){\r\n            //         if(array[i] == 100){\r\n            //             array[i] = array[j];\r\n            //             array[j] = data[k][1];\r\n            //         }\r\n            //     }\r\n            //     k++\r\n            // }\r\n\r\n            for(let x = 0; x< array.length; x++){\r\n                if(array[x] == 0){\r\n                    array[x] = 100\r\n                }\r\n            }\r\n            console.log(\"count: \"+ count)\r\n    }\r\n    reshuffle50(notDupeShuffle,AntArrElective50);\r\n\r\n    const checkAmountData50_2 = (array) => {\r\n        let count = 0\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] != 100 && array[i] !=50 && array[i] != 0 && array[i] != undefined){\r\n                    count += 1\r\n                }\r\n        }\r\n        return count\r\n    }\r\n    var checkAmount_2 = checkAmountData50_2(AntArrInsElective50)\r\n    console.log(AntArrInsElective50)\r\n    console.log(\"Amount of data: \"+checkAmount_2);\r\n    \r\n    const checkAmountData50_0 = (array) => {\r\n        let count = 0\r\n        for(let i = 0; i < array.length; i++){\r\n                if( array[i] == 0 ){\r\n                    count += 1\r\n                }\r\n        }\r\n        return count\r\n    }\r\n    var checkAmount_0 = checkAmountData50_0(AntArrInsElective50)\r\n    console.log(\"zero counter: \"+checkAmount_0);\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nconst check1Group = (array) => {\r\n   let count =0\r\n   let indexArray = 0\r\n   let totalRoom = array.length / 38\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n       indexArray = (x * 37)\r\n   }\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n       try{\r\n           //for(let x= 1 ; x <= totalRoom ; x++){\r\n            for(let i = 0; i<array.length ; i++){\r\n               indexArray = (x * 37)\r\n               if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0){\r\n                   try{\r\n                       //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\r\n                       if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                //console.log(array[i])\r\n                                //console.log(array[i+indexArray])\r\n                                count +=1\r\n                            }catch{}\r\n                       }\r\n                   }catch{}\r\n               }   \r\n           }\r\n       }catch{}\r\n   }\r\n   return count\r\n\r\n}\r\n\r\n// var checkH1_50 = check1Group(AntArr50)\r\n// console.log(\"HS1 50: \" + checkH1_50);\r\nvar checkH1_50 = check1Group(AntArrElective50)\r\nconsole.log(\"HS1 50: \" + checkH1_50);\r\n\r\nconst check1Teacher = (array) => {\r\n   let count =0\r\n   let indexArray = 0\r\n   let totalRoom = array.length / 38\r\n   for(let x= 1 ; x <= totalRoom ; x++){\r\n    indexArray = (x * 38)\r\n       try{\r\n        for(let i = 1; i<array.length ; i++){\r\n               if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                   try{\r\n                       if(array[i][5] == array[i+indexArray][5] ){\r\n                       //if(array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\r\n                        //    console.log(i)\r\n                        //    console.log(array[i])\r\n                        //    console.log(i+indexArray)\r\n                        //    console.log(array[i+indexArray])\r\n                           count +=1\r\n                        }\r\n                        // if(array[i][5] == array[i+indexArray][5] && array[i-1][5] == array[i+indexArray-1][5]){\r\n                        //     count +=1\r\n                        //  }\r\n                   }catch{}\r\n               }    \r\n           }\r\n       }catch{}\r\n   }\r\n   return count\r\n\r\n\r\n}\r\n\r\nvar checkH5_50 = check1Teacher(AntArrElective50)\r\nconsole.log(\"HS5 50: \" + checkH5_50);\r\n// console.log(\"H5 All: \"+checkH5_ALL)\r\n// console.log(\"H5 Elective: \"+checkH5_ALLElective)\r\n}\r\nfor(let i=1 ; i <= 100 ; i++){\r\n    console.log(\"iteration: \" + i);\r\n    antSystem()\r\n}\r\n\r\n// -------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n        }\r\n    return(\r\n        <React.Fragment>\r\n            <h1>\r\n                Generate Schedule Page\r\n            </h1>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}