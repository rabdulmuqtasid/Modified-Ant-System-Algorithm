{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\Algorithm\\\\Ant.js\";\nimport React, { useEffect, useState, useContext, Component } from \"react\";\n\nclass Ant extends Component {\n  constructor(alpha, beta, Q) {\n    this.alpha = alpha;\n    this.beta = beta;\n    this.Q = Q || 1;\n    this.base = 0;\n    this.walk = [];\n    this.walkLength = null;\n  }\n  /**\r\n  * Set the base node for this ant\r\n  * \r\n  * @param {Number} baseId\r\n  */\n\n\n  setBase(base) {\n    this.base = base;\n  }\n  /**\r\n   * Construct a solution to the problem\r\n   * \r\n   * @param  {Array} distances\r\n   * @param  {Array} pheromones\r\n   * @return {[type]}            [description]\r\n   */\n\n\n  doWalk(distances, pheromones) {\n    this.walk = [this.base];\n    this.walkLength = null;\n\n    for (let i = 1; i < distances.length; i++) {\n      this.walk.push(this.chooseNext(this.walk[i - 1], distances, pheromones));\n    }\n\n    this.walk.push(this.walk[0]);\n    this.walkLength = this.calculateWalkLength(distances);\n  }\n\n  chooseNext(currentNode, distances, pheromones) {\n    let sumall = 0;\n    let unvisited = [];\n\n    for (let i = 0; i < distances.length; i++) {\n      if (this.walk.indexOf(i) === -1) {\n        unvisited.push(i);\n      }\n    }\n\n    for (let i = 0; i < pheromones.length; i++) {\n      if (i !== currentNode && unvisited.indexOf(i) !== -1) {\n        sumall += Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow(1 / distances[currentNode][i], this.beta);\n      }\n    }\n\n    let probs = [];\n    let summul = 0;\n\n    for (let i = 0; i < distances[currentNode].length; i++) {\n      if (i !== currentNode && unvisited.indexOf(i) !== -1) {\n        let mul = Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow(1 / distances[currentNode][i], this.beta);\n        probs.push(mul / sumall);\n        summul += mul;\n      }\n    }\n\n    let rnd = Math.random();\n    let x = 0;\n    let tally = probs[x];\n\n    while (rnd > tally && x < probs.length - 1) {\n      tally += probs[++x];\n    }\n\n    return unvisited[x];\n  }\n\n  calculateWalkLength(distances) {\n    let len = 0;\n\n    for (let i = 1; i < this.walk.length; i++) {\n      len += distances[this.walk[i - 1]][this.walk[i]];\n    }\n\n    return len;\n  }\n\n  layPheromones(pheromones) {\n    for (let i = 1; i < this.walk.length; i++) {\n      pheromones[this.walk[i - 1]][this.walk[i]] += 1 / this.walkLength * this.Q;\n      pheromones[this.walk[i]][this.walk[i - 1]] += 1 / this.walkLength * this.Q;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    });\n  }\n\n}\n\n;\nexport default Ant;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/Algorithm/Ant.js"],"names":["React","useEffect","useState","useContext","Component","Ant","constructor","alpha","beta","Q","base","walk","walkLength","setBase","doWalk","distances","pheromones","i","length","push","chooseNext","calculateWalkLength","currentNode","sumall","unvisited","indexOf","Math","pow","probs","summul","mul","rnd","random","x","tally","len","layPheromones","render"],"mappings":"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","sourcesContent":["import React,{ useEffect,useState, useContext, Component } from \"react\";\r\n\r\nclass Ant extends Component {\r\n\r\n    constructor(alpha, beta, Q) {\r\n        this.alpha = alpha;\r\n        this.beta = beta;\r\n        this.Q = Q || 1;\r\n    \r\n        this.base = 0;\r\n        this.walk = [];\r\n        this.walkLength = null;\r\n      }\r\n          /**\r\n     * Set the base node for this ant\r\n     * \r\n     * @param {Number} baseId\r\n     */\r\n    setBase(base) {\r\n        this.base = base;\r\n      }\r\n    \r\n      /**\r\n       * Construct a solution to the problem\r\n       * \r\n       * @param  {Array} distances\r\n       * @param  {Array} pheromones\r\n       * @return {[type]}            [description]\r\n       */\r\n      doWalk(distances, pheromones) {\r\n        this.walk = [this.base];\r\n        this.walkLength = null;\r\n        for(let i = 1; i < distances.length; i++) {\r\n          this.walk.push(this.chooseNext(this.walk[i-1], distances, pheromones));\r\n        }\r\n        this.walk.push(this.walk[0]);\r\n        this.walkLength = this.calculateWalkLength(distances);\r\n      }\r\n    \r\n      chooseNext(currentNode, distances, pheromones) {\r\n        let sumall = 0;\r\n        let unvisited = [];\r\n        for(let i = 0; i < distances.length; i++) {\r\n          if (this.walk.indexOf(i) === -1) {\r\n            unvisited.push(i);\r\n          }\r\n        }\r\n    \r\n        for(let i = 0; i < pheromones.length; i++) {\r\n          if (i !== currentNode && unvisited.indexOf(i) !== -1) {\r\n            sumall += Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\r\n          }\r\n        }\r\n    \r\n        let probs = [];\r\n        let summul = 0;\r\n        for(let i = 0; i < distances[currentNode].length; i++) {\r\n          if (i !== currentNode && unvisited.indexOf(i) !== -1) {\r\n            let mul = Math.pow(pheromones[currentNode][i], this.alpha) * Math.pow((1/distances[currentNode][i]), this.beta);\r\n            probs.push(mul/sumall);\r\n            summul += mul;\r\n          }\r\n        }\r\n    \r\n        let rnd = Math.random();\r\n        let x = 0;\r\n        let tally = probs[x];\r\n        while (rnd > tally && x < probs.length - 1) {\r\n          tally += probs[++x];\r\n        }\r\n        \r\n        return unvisited[x];\r\n      }\r\n    \r\n      calculateWalkLength(distances) {\r\n        let len = 0;\r\n        for(let i = 1; i < this.walk.length; i++) {\r\n          \r\n          len += distances[this.walk[i-1]][this.walk[i]];\r\n        }\r\n        \r\n        return len;\r\n      }\r\n    \r\n      layPheromones(pheromones) {\r\n        for(let i = 1; i < this.walk.length; i++) {\r\n          pheromones[this.walk[i-1]][this.walk[i]] += (1/this.walkLength) * this.Q;\r\n          pheromones[this.walk[i]][this.walk[i-1]] += (1/this.walkLength) * this.Q;\r\n        }\r\n      }\r\n      render() {\r\n        return (\r\n          <React.Fragment/>\r\n        );\r\n      }\r\n};\r\nexport default Ant;"]},"metadata":{},"sourceType":"module"}