{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { forEach } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\n        //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\n        // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\n\n        setroomData([ertRoom]); // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []); // const [uploadedData] = Dataset();\n  // const Room = (room) => {\n  //     console.log(room);\n  // }\n  // const Course = (data) => {\n  //     console.log(data);\n  // }\n  //const test = props.Dataset;\n\n  if (!isLoading && loadedFile) {\n    console.log(roomData[0]);\n\n    const create2dArray = (row, column) => {\n      var x = '';\n      var result = [];\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = null;\n        }\n      }\n\n      return result;\n    };\n\n    let Column = roomData[0].length;\n    let Row = 51;\n    var ground = create2dArray(Column, Row);\n    console.log(ground);\n  }\n\n  const checkViolateHardCont = () => {};\n\n  const checkViolateSoftCont = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["forEach","React","useEffect","useState","useContext","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ok","Error","message","err","console","log","create2dArray","row","column","x","result","i","j","Column","length","Row","ground","checkViolateHardCont","checkViolateSoftCont"],"mappings":"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","sourcesContent":["import { forEach } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\r\n            //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\r\n            setroomData([ertRoom]);\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n    // const [uploadedData] = Dataset();\r\n    // const Room = (room) => {\r\n    //     console.log(room);\r\n    // }\r\n    // const Course = (data) => {\r\n    //     console.log(data);\r\n    // }\r\n    //const test = props.Dataset;\r\n        if(!isLoading && loadedFile){\r\n            console.log(roomData[0]);\r\n            \r\n            const create2dArray = (row, column) => {\r\n                var x = '';\r\n                var result = []\r\n                for(let i = 0; i< row; i++){\r\n                    result[i]=[];\r\n                    for(let j = 0; j<column; j++){   \r\n                        result[i][j] = null;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n        \r\n            }\r\n            let Column = roomData[0].length\r\n            let Row = 51\r\n            var ground = create2dArray(Column,Row);\r\n            console.log(ground)\r\n        }\r\n\r\n\r\n    const checkViolateHardCont = () => {\r\n\r\n    };\r\n    const checkViolateSoftCont = () => {\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}