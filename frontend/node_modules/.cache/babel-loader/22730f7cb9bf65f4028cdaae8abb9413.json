{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GetDataset\\\\getDataset.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\n\nconst Dataset = props => {\n  const test = props.test;\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState();\n  const [Keys, setKeys] = useState(); //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\n        let ertData = JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\n        const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\n\n        const ertSize = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n\n        const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n\n        const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n\n        const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n\n        const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n\n        const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n\n        const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n\n        const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n\n        const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n\n        const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n\n        const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n\n        const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n\n        const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n        //console.log(\"Dataset: \" + ertLocation);\n        // console.log(\"X value= \" + ertCName);\n        // for (let i = 0 ; i<test1.length; i++){\n        //      let x = test1[i].Location;\n        //      console.log(\"X value= \" +x);\n        // }\n        //console.log(\"Test 1: \"+ test1);\n        //let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        //let setK = Object.keys(responsedata.files.Dataset[1])\n        //setKeys([setK])\n        //console.log(\"STRINGIFYDATA: \" + stringifyData);\n        //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\n        //console.log(\"Test: \" + test1);\n\n        setCsvData([ertLocation]); //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\n        //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata.users);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []); // console.log(\"Csv\" + CsvData);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 14\n    }\n  }, \"test:\", test1), \"//   \");\n};\n\nexport default Dataset;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GetDataset/getDataset.js"],"names":["React","useEffect","useState","useContext","CSVLink","ArraySchedule","LoadingSpinner","Dataset","props","test","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","Keys","setKeys","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","ertData","ertLocation","map","ertRoom","ertSize","ertSlot","ertCCode","ertCName","ertCHours","ertYear","ertSemester","ertProCode","ertLecturer","ertGroup","ertHMS","ertProgram","ertTtlStudent","ok","Error","message","users","err","console","log","test1"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,UAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,EAAtC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,EAAhC,CALuB,CAMvB;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMiB,WAAW,GAAG,YAAW;AAC3BP,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH;AACA;AACA,cAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BnB,OAA1C,CAApB;AACA,YAAIoB,OAAO,GAAEH,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAArD,CAAb;AAEA,cAAMqB,WAAW,GAAGP,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAI,CAACA,OAAO,CAAC,UAAD,CAAR,CAA7D,CAApB,CARG,CAQsG;;AACzG,cAAMuB,OAAO,GAAGT,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,MAAD,CAApE,CAAhB,CATG,CAS4F;;AAC/F,cAAOwB,OAAO,GAAEV,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,MAAD,CAApE,CAAhB,CAVG,CAU4F;;AAC/F,cAAMyB,OAAO,GAAGX,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,MAAD,CAApE,CAAhB,CAXG,CAW4F;;AAE/F,cAAM0B,QAAQ,GAAGZ,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,aAAD,CAApE,CAAjB,CAbG,CAaoG;;AACvG,cAAM2B,QAAQ,GAAGb,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,aAAD,CAApE,CAAjB,CAdG,CAcoG;;AACvG,cAAM4B,SAAS,GAAGd,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,cAAD,CAApE,CAAlB,CAfG,CAesG;;AACzG,cAAM6B,OAAO,GAAGf,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,MAAD,CAApE,CAAhB,CAhBG,CAgB4F;;AAC/F,cAAM8B,WAAW,GAAGhB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,UAAD,CAApE,CAApB,CAjBG,CAiBoG;;AACvG,cAAM+B,UAAU,GAAGjB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,cAAD,CAApE,CAAnB,CAlBG,CAkBuG;;AAC1G,cAAMgC,WAAW,GAAGlB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,UAAD,CAApE,CAApB,CAnBG,CAmBoG;;AACvG,cAAMiC,QAAQ,GAAGnB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,OAAD,CAApE,CAAjB,CApBG,CAoB8F;;AACjG,cAAMkC,MAAM,GAAGpB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,KAAD,CAApE,CAAf,CArBG,CAqB0F;;AAC7F,cAAMmC,UAAU,GAAGrB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,gBAAD,CAApE,CAAnB,CAtBG,CAsByG;;AAC5G,cAAMoC,aAAa,GAAGtB,YAAY,CAACK,aAAb,CAA2BnB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CsB,GAA9C,CAAkDtB,OAAO,IAAIA,OAAO,CAAC,kBAAD,CAApE,CAAtB,CAvBG,CAuB8G;AAEjH;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAQ,QAAAA,UAAU,CAAC,CAACa,WAAD,CAAD,CAAV,CAvCG,CAwCH;AACA;;AACA,YAAI,CAACT,QAAQ,CAACyB,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUxB,YAAY,CAACyB,OAAvB,CAAN;AACH;;AACDjC,QAAAA,cAAc,CAACQ,YAAY,CAAC0B,KAAd,CAAd;AACApC,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OA/CD,CA+CC,OAAMqC,GAAN,EAAU;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACF,OAAhB;AACH;;AACDnC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,KAtDD;;AAuDAO,IAAAA,WAAW;AACd,GAzDQ,EAyDP,EAzDO,CAAT,CARuB,CAoEvB;;AACA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAUiC,KAAV,CADL,UADJ;AAQH,CA7ED;;AA+EA,eAAe5C,OAAf","sourcesContent":["import React,{ useEffect,useState, useContext } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\r\n\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\nconst Dataset = (props) => {\r\n    const test = props.test\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState();\r\n    const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            let ertData =JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\r\n            \r\n            const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\r\n            const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n\r\n            //console.log(\"Dataset: \" + ertLocation);\r\n\r\n            // console.log(\"X value= \" + ertCName);\r\n            // for (let i = 0 ; i<test1.length; i++){\r\n            //      let x = test1[i].Location;\r\n            //      console.log(\"X value= \" +x);\r\n            // }\r\n            //console.log(\"Test 1: \"+ test1);\r\n            //let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            //let setK = Object.keys(responsedata.files.Dataset[1])\r\n            //setKeys([setK])\r\n            //console.log(\"STRINGIFYDATA: \" + stringifyData);\r\n            //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\r\n            //console.log(\"Test: \" + test1);\r\n            setCsvData([ertLocation]);\r\n            //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\r\n            //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata.users);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n\r\n    // console.log(\"Csv\" + CsvData);\r\n    return(\r\n        <React.Fragment>\r\n             <h1>test:{test1}</h1>\r\n    //   {/* <CSVLink data = {CsvData} enclosingCharacter= {`,`}>Download Me</CSVLink>\r\n    //         {isLoading && <div className=\"center\"><LoadingSpinner/></div>} */}\r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\nexport default Dataset;"]},"metadata":{},"sourceType":"module"}