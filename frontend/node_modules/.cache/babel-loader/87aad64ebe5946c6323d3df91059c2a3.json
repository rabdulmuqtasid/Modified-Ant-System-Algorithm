{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\UploadPage\\\\UploadFile.js\";\nimport React, { useCallback, useState } from \"react\";\nimport { parse } from \"papaparse\";\nimport { useDropzone } from 'react-dropzone';\nimport './UploadFile.css';\n\nconst UploadFile = () => {\n  const [Data, setData] = useState([]);\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = parse(reader.result, {\n          header: true\n        });\n        const lenght = binaryStr.data.length;\n        console.log(binaryStr.rows.Count);\n\n        for (let x = 0; x < lenght; x++) {\n          if (binaryStr.data[x] == '') {\n            console.log(binaryStr.data[x]);\n          } else {\n            console.log('full');\n          } //console.log(binaryStr.data[x]);\n\n        } //console.log(binaryStr.data)\n\n\n        setData(existing => [...existing, ...binaryStr.data]);\n      }; //reader.readAsArrayBuffer(file)\n\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    accept: \".csv\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })), isDragActive ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Drop the files here ...\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Drag 'n' drop some files here, or click to select files\"));\n};\n\nexport default UploadFile;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/UploadPage/UploadFile.js"],"names":["React","useCallback","useState","parse","useDropzone","UploadFile","Data","setData","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","header","lenght","data","length","rows","Count","x","existing","readAsText","getRootProps","getInputProps","isDragActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAAQC,KAAR,QAAoB,WAApB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,OAAO,kBAAP;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAEvB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAMM,MAAM,GAAGP,WAAW,CAACQ,aAAa,IAAI;AAC1CA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACtB;AACE,cAAMC,SAAS,GAAGhB,KAAK,CAACS,MAAM,CAACQ,MAAR,EAAe;AAACC,UAAAA,MAAM,EAAC;AAAR,SAAf,CAAvB;AACA,cAAMC,MAAM,GAAGH,SAAS,CAACI,IAAV,CAAeC,MAA9B;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYG,SAAS,CAACM,IAAV,CAAeC,KAA3B;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,MAAf,EAAuBK,CAAC,EAAxB,EAA2B;AACzB,cAAGR,SAAS,CAACI,IAAV,CAAeI,CAAf,KAAqB,EAAxB,EAA2B;AACzBZ,YAAAA,OAAO,CAACC,GAAR,CAAYG,SAAS,CAACI,IAAV,CAAeI,CAAf,CAAZ;AACD,WAFD,MAEK;AACHZ,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,WALwB,CAMzB;;AACD,SAZmB,CAalB;;;AACAT,QAAAA,OAAO,CAAEqB,QAAD,IAAa,CAAC,GAAGA,QAAJ,EAAc,GAAGT,SAAS,CAACI,IAA3B,CAAd,CAAP;AACH,OAfD,CAL8B,CAqB9B;;;AACAX,MAAAA,MAAM,CAACiB,UAAP,CAAkBlB,IAAlB;AACD,KAvBD;AAyBD,GA1ByB,EA0BvB,EA1BuB,CAA1B;AA4BA,QAAM;AAACmB,IAAAA,YAAD;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAA8C5B,WAAW,CAAC;AAACI,IAAAA;AAAD,GAAD,CAA/D;AAEA,sBACE,6CAASsB,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,+CAAWC,aAAa,EAAxB;AAA4B,IAAA,MAAM,EAAC,MAAnC;AAA0C,IAAA,QAAQ,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAGIC,YAAY,gBACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADU,gBAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DALN,CADF;AAWD,CA7CD;;AA+CA,eAAe3B,UAAf","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport {parse} from \"papaparse\";\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nimport './UploadFile.css';\r\n\r\nconst UploadFile = () => {\r\n\r\n  const [Data,setData] = useState([]);\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = () => {\r\n      // Do whatever you want with the file contents\r\n        const binaryStr = parse(reader.result,{header:true});\r\n        const lenght = binaryStr.data.length\r\n        console.log(binaryStr.rows.Count)\r\n        for(let x=0; x<lenght; x++){\r\n          if(binaryStr.data[x] == ''){\r\n            console.log(binaryStr.data[x]);  \r\n          }else{\r\n            console.log('full');\r\n          }\r\n          //console.log(binaryStr.data[x]);\r\n        }\r\n          //console.log(binaryStr.data)\r\n          setData((existing)=> [...existing, ...binaryStr.data])\r\n      }\r\n      //reader.readAsArrayBuffer(file)\r\n      reader.readAsText(file)\r\n    })\r\n    \r\n  }, [])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\".csv\" multiple/>\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UploadFile;"]},"metadata":{},"sourceType":"module"}