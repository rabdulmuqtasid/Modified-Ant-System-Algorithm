{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\copy code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\UploadPage\\\\UploadFile.js\";\nimport React, { useCallback, useContext, useState } from \"react\";\nimport { parse } from \"papaparse\";\nimport { useDropzone } from 'react-dropzone';\nimport LoadingSpinner from '../../components/Modal/LoadingSpinner';\nimport { useHttpClient } from \"../hooks/http-hook\";\nimport { AuthContext } from \"../contexts/auth-context\";\nimport './UploadFile.css';\n\nconst UploadFile = () => {\n  const [Filename, setFileName] = useState([]);\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  console.log(auth.userId);\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = async () => {\n        setFileName(existing => [...existing, file.name]);\n        const binaryStr = parse(reader.result, {\n          header: true,\n          blackrows: false\n        });\n        let test = JSON.stringify(binaryStr.data);\n\n        try {\n          const response = await sendRequest('http://localhost:5000/api/files/', 'POST', JSON.stringify({\n            userId: auth.userId,\n            Dataset: binaryStr.data\n          }), {\n            'Content-Type': 'application/json'\n          });\n          const responsedata = await response.json();\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    className: \"upload-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), Filename.map(Dataset => /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, Dataset)), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    accept: \".csv\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  })), isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }), isDragActive ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, \"Drop the files here ...\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Drag and drop some files here, or click to select files\")));\n};\n\nexport default UploadFile;","map":{"version":3,"sources":["C:/Users/acit/Desktop/copy code/FYP Code/frontend/src/components/UploadPage/UploadFile.js"],"names":["React","useCallback","useContext","useState","parse","useDropzone","LoadingSpinner","useHttpClient","AuthContext","UploadFile","Filename","setFileName","auth","isLoading","error","sendRequest","clearError","console","log","userId","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","onerror","onload","existing","name","binaryStr","result","header","blackrows","test","JSON","stringify","data","response","Dataset","responsedata","json","err","readAsText","getRootProps","getInputProps","isDragActive","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useState} from \"react\";\r\nimport {parse} from \"papaparse\";\r\nimport {useDropzone} from 'react-dropzone';\r\nimport LoadingSpinner from '../../components/Modal/LoadingSpinner';\r\nimport { useHttpClient } from \"../hooks/http-hook\";\r\nimport { AuthContext } from \"../contexts/auth-context\";\r\n\r\nimport './UploadFile.css';\r\n\r\nconst UploadFile =  () => {\r\n\r\n  const [Filename,setFileName] = useState([]);\r\n  const auth =  useContext(AuthContext);\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n\r\n  console.log(auth.userId)\r\n\r\n  const onDrop = useCallback( acceptedFiles => {\r\n    acceptedFiles.forEach((file) => { \r\n      const reader = new FileReader()\r\n\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = async () => {\r\n        setFileName((existing)=> [...existing, file.name])\r\n        const binaryStr = parse(reader.result,{header:true,blackrows: false});\r\n        let test = JSON.stringify(binaryStr.data);\r\n         try {\r\n           const response = await sendRequest('http://localhost:5000/api/files/', 'POST', JSON.stringify({\r\n            userId: auth.userId,\r\n            Dataset: binaryStr.data\r\n           }),{ 'Content-Type': 'application/json' });\r\n           const responsedata = await response.json();\r\n         }catch(err){\r\n           console.log(err);\r\n         }\r\n      }\r\n      reader.readAsText(file)\r\n    })\r\n    \r\n  }, [])\r\n\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <div {...getRootProps()} className=\"upload-file\">\r\n      {Filename.map((Dataset)=>(\r\n        <h2>{Dataset}</h2>\r\n      ))}\r\n      <input {...getInputProps()} accept=\".csv\" multiple />\r\n      {isLoading && <LoadingSpinner asOverlay />}\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag and drop some files here, or click to select files</p>\r\n      }\r\n    </div>\r\n    \r\n    </React.Fragment>\r\n\r\n  )\r\n}\r\n\r\nexport default UploadFile;"]},"metadata":{},"sourceType":"module"}