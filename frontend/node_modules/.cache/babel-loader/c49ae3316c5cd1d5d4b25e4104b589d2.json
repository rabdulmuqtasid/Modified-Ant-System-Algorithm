{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GetDataset\\\\getDataset.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\ndata = [{\n  firstname: \"Ahmed\",\n  lastname: \"Tomi\",\n  email: \"ah@smthing.co.com\"\n}, {\n  firstname: \"Raed\",\n  lastname: \"Labes\",\n  email: \"rl@smthing.co.com\"\n}, {\n  firstname: \"Yezzi\",\n  lastname: \"Min l3b\",\n  email: \"ymin@cocococo.com\"\n}];\n\nconst Dataset = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false); //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/files/62453d78d4c3bc106b042909');\n        const responsedata = await response.json(); //let stringifyData = JSON.stringify(responsedata.Dataset);\n\n        let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        console.log(\"Get Data: \" + stringifyData);\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 51\n    }\n  })), /*#__PURE__*/React.createElement(CSVLink, {\n    data: data,\n    enclosingCharacter: `,`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Download Me\"));\n};\n\nexport default Dataset;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GetDataset/getDataset.js"],"names":["React","useEffect","useState","useContext","CSVLink","LoadingSpinner","data","firstname","lastname","email","Dataset","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","files","console","log","ok","Error","message","err"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AAEAC,IAAI,GAAG,CACH;AAAEC,EAAAA,SAAS,EAAE,OAAb;AAAsBC,EAAAA,QAAQ,EAAE,MAAhC;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CADG,EAEH;AAAEF,EAAAA,SAAS,EAAE,MAAb;AAAqBC,EAAAA,QAAQ,EAAE,OAA/B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CAFG,EAGH;AAAEF,EAAAA,SAAS,EAAE,OAAb;AAAsBC,EAAAA,QAAQ,EAAE,SAAhC;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAHG,CAAP;;AAMA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,UAAD,EAAaC,cAAb,IAA+Bb,QAAQ,CAAC,KAAD,CAA7C,CAHuB,CAIvB;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,WAAW,GAAG,YAAW;AAC3BH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAFG,CAGH;;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,KAAb,CAAmBd,OAAlC,CAApB;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAcL,aAA1B;;AACA,YAAI,CAACJ,QAAQ,CAACU,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUT,YAAY,CAACU,OAAvB,CAAN;AACH;;AACDd,QAAAA,cAAc,CAACI,YAAD,CAAd;AACAN,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OAXD,CAWC,OAAMiB,GAAN,EAAU;AACPL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACD,OAAhB;AACH;;AACDhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAjBD;;AAkBAG,IAAAA,WAAW;AACd,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,SAAS,iBAAI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CADlB,eAEI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEN,IAAf;AAAqB,IAAA,kBAAkB,EAAI,GAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,CADJ;AAQH,CAnCD;;AAqCA,eAAeI,OAAf","sourcesContent":["import React,{ useEffect,useState, useContext } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\ndata = [\r\n    { firstname: \"Ahmed\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" },\r\n    { firstname: \"Raed\", lastname: \"Labes\", email: \"rl@smthing.co.com\" },\r\n    { firstname: \"Yezzi\", lastname: \"Min l3b\", email: \"ymin@cocococo.com\" }\r\n  ];\r\n\r\nconst Dataset = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            const response = await fetch('http://localhost:5000/api/files/62453d78d4c3bc106b042909');\r\n            const responsedata = await response.json();\r\n            //let stringifyData = JSON.stringify(responsedata.Dataset);\r\n            let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            console.log(\"Get Data: \"+ stringifyData);\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <div className=\"center\"><LoadingSpinner/></div>}\r\n            <CSVLink data={data} enclosingCharacter= {`,`} >\r\n                Download Me\r\n            </CSVLink>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Dataset;"]},"metadata":{},"sourceType":"module"}