{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GenerateSchedulePage\\\\GenerateScheduleElective.js\";\nimport { concat, create, find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\nlet finalDataAll = [];\nlet finalDataAllElective = [];\nlet checkHardConstraintOutsite = 0;\nlet checkSoftConstraintOutsite = 0;\n\nconst ArrayScheduleElective = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState();\n  const [CsvData, setCsvData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code'], Dataset['Slot1'], Dataset['Slot2']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]);\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const lecturerData = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData50 = [];\n    const filterData100 = [];\n    const filterData200 = [];\n    const filterData500 = [];\n    const filterDataElective50 = [];\n    const filterDataElective100 = [];\n    const filterDataElective200 = [];\n    const filterDataElective500 = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      let lecturer = [courseData[0][i][5]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n      lecturer.reduce(function (results, item, index, array) {\n        results[index] = item;\n        lecturerData.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    }\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\n    const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\n    notDuplicatesLecturer.pop(); //console.log(notDuplicatesLecturer)\n\n    let courseDataXElective = [];\n    let courseDataWithElective = [];\n    courseData[0].pop(); //saparate faculty course with the elective course\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) != 'TMU') {\n        courseData[0][i].splice();\n\n        if (courseData[0][i][1].slice(0, 3) != 'TMX') {\n          courseData[0][i].splice();\n          courseDataXElective.push(courseData[0][i]);\n        }\n      }\n    } //saparate elective course with the faculty course\n\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][1].slice(0, 3) == 'TMU' || courseData[0][i][1].slice(0, 3) == 'TMX') {\n        courseDataWithElective.push(courseData[0][i]);\n      }\n    } //insert data without elective courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataXElective.length; i++) {\n      if (courseDataXElective[i][0] < 50) {\n        filterData50.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\n        filterData100.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200) {\n        filterData200.push(courseDataXElective[i]);\n      }\n\n      if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\n        filterData500.push(courseDataXElective[i]);\n      }\n    } //console.log(filterData50)\n    //insert data without faculty courses into correct room capacity\n\n\n    for (let i = 0; i < courseDataWithElective.length; i++) {\n      if (courseDataWithElective[i][0] < 50) {\n        filterDataElective50.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\n        filterDataElective100.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200) {\n        filterDataElective200.push(courseDataWithElective[i]);\n      }\n\n      if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\n        filterDataElective500.push(courseDataWithElective[i]);\n      }\n    } // console.log(filterDataElective50);\n    // console.log(filterDataElective100);\n    // console.log(filterDataElective200);\n    // console.log(filterDataElective500);\n\n\n    let roomUnder50 = [];\n    let roomUnder100 = [];\n    let roomUnder200 = [];\n    let roomUnder500 = [];\n\n    const checkNumberofRoom = () => {\n      for (let i = 0; i < roomData[0].length; i++) {\n        let room = roomData[0][i][1]; //console.log(roomData[0][i][1]);\n\n        if (room < 50) {\n          roomUnder50.push(room);\n        } else if (room > 50 && room < 100) {\n          roomUnder100.push(room);\n        } else if (room > 100 && room < 200) {\n          roomUnder200.push(room);\n        } else if (room > 200) {\n          roomUnder500.push(room);\n        }\n      }\n    };\n\n    checkNumberofRoom();\n\n    const createArray = data => {\n      var result = [];\n\n      for (let i = 0; i < data; i++) {\n        result[i] = [];\n      }\n\n      return result;\n    };\n\n    let DataArray50 = roomUnder50.length * 38;\n    let DataArray100 = roomUnder100.length * 38;\n    let DataArray200 = roomUnder200.length * 38;\n    let DataArray500 = roomUnder500.length * 38;\n    let combineArray = DataArray50 + DataArray100 + DataArray200 + DataArray500;\n    let startIndex100 = DataArray50 - 1;\n    let startIndex200 = DataArray50 + DataArray100 - 1;\n    let startIndex500 = DataArray50 + DataArray100 + DataArray200 - 1;\n    let DataArrayElective50 = roomUnder50.length * 10;\n    let DataArrayElective100 = roomUnder100.length * 10;\n    let DataArrayElective200 = roomUnder200.length * 10;\n    let DataArrayElective500 = roomUnder500.length * 10;\n    let combineArrayElective = DataArrayElective50 + DataArrayElective100 + DataArrayElective200 + DataArrayElective500; //----------------------------------------------------------------------------------------------------------------------------------------\n\n    var checkTotalHardContraintsAll = 0;\n    var checkTotalSoftContraintsAll = 0;\n\n    const antSystem = () => {\n      //___________________________________________________________________________________________________________________________________\n      const array1DElectiveCombine = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrCombine = array1DElectiveCombine(combineArrayElective);\n\n      const array1DElective50 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrElective50 = array1DElective50(DataArrayElective50);\n      let extraDataElective50_Slot2_2 = [];\n      let extraData50Elective_Slot2_1 = [];\n      let insertedDataElective50_Slot2_2 = [];\n      let insertedDataElective50_Slot2_1 = [];\n\n      const AntAlgoInsertElective50 = array => {\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let k4 = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let remainderArray3 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterDataElective50.length; x++) {\n          test.push(filterDataElective50[x]);\n        }\n\n        for (let i = array.length - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let slot1 = test[k][9];\n            let slot2 = test[k][10];\n\n            if (hourMS == 3) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100 && array[i - 1] == 100 && array[i + 1] == 100) {\n                array[i] = array[j];\n                array[i - 1] = array[j - 1];\n                array[i + 1] = array[j + 1];\n                array[j] = test[k];\n                array[j - 1] = test[k];\n                array[j + 1] = test[k];\n              } else {\n                remainderArray3.push(test[k]);\n              }\n            } else if (hourMS == 2) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k];\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            } else if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                //slot in slot1 = 2\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const z = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[z];\n                      array[i - 1] = array[z - 1];\n                      array[i] = test[k];\n                      array[i - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[z];\n                      array[i + 1] = array[z + 1];\n                      array[z] = test[k];\n                      array[z + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } //slot in slot1 = 2\n                else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const v = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[v];\n                      array[i - 1] = array[v - 1];\n                      array[v] = test[k];\n                      array[v - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[v];\n                      array[i + 1] = array[v + 1];\n                      array[v] = test[k];\n                      array[v + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        }\n\n        for (let z = 0; z < array.length; z++) {\n          for (let x = 0; x < remainderArraySlot1.length; x++) {\n            if (array[z] == remainderArraySlot1[x]) {\n              for (let b = 1; b <= totalRoom; b++) {\n                if (array[z + 38 * b] == 100 && array[z + 38 * b - 1] == 100) {\n                  array[z + 38 * b] = 0;\n                  array[z + 38 * b - 1] = 0;\n                }\n\n                if (array[z - 38 * b] == 100 && array[z - 38 * b - 1] == 100) {\n                  array[z - 38 * b] = 0;\n                  array[z - 38 * b - 1] = 0;\n                }\n              }\n            }\n          }\n        } //slot in 3\n\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100 && array[i + 1] == 100 && array[i + 2] == 100) {\n            if (k4 < remainderArray3.length) {\n              array[i] = remainderArray3[k4];\n              array[i + 1] = remainderArray3[k4];\n              array[i + 2] = remainderArray3[k4];\n            }\n\n            k4++;\n          }\n        } //fullfill the slot 3\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const c = Math.floor(Math.random() * (x + 1));\n              array[x] = array[c];\n              array[x + 1] = array[c + 1];\n              array[c] = remainderArray[k2];\n              array[c + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective50_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const b = Math.floor(Math.random() * (x + 1));\n              array[x] = array[b];\n              array[x + 1] = array[b + 1];\n              array[b] = remainderArray[k2];\n              array[b + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective50_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          }\n        } //if there is array in -1, reslot in into the array\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedDataElective50_Slot2_1.push(array[-1]);\n        }\n\n        return array;\n      };\n\n      var AntArrInsElective50 = AntAlgoInsertElective50(AntArrElective50);\n\n      const slot2Equal1forElective50 = array => {\n        let k = 0;\n        let test2 = [];\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (k < insertedDataElective50_Slot2_1.length) {\n              array[x] = insertedDataElective50_Slot2_1[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal1forElective50(AntArrElective50);\n\n      const slot2Equal2forElective50 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedDataElective50_Slot2_2.length) {\n              array[x] = insertedDataElective50_Slot2_2[k];\n              array[x + 1] = insertedDataElective50_Slot2_2[k];\n            } else {\n              if (insertedDataElective50_Slot2_2[k] != undefined) {\n                extraDataElective50_Slot2_2.push(insertedDataElective50_Slot2_2[k]);\n              }\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < extraDataElective50_Slot2_2.length) {\n              array[x] = extraDataElective50_Slot2_2[k];\n              array[x + 1] = extraDataElective50_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal2forElective50(AntArrElective50);\n      let reshuffleElectice50 = [];\n      let notDupeShuffleElective50 = [];\n\n      const checkHC_50_Elective = array => {\n        let count = 0;\n        let indexArray = 0;\n        let indexArray2 = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffleElectice50.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffleElectice50.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffleElectice50.length; x++) {\n          try {\n            if (reshuffleElectice50[x][0] != reshuffleElectice50[x + 1][0]) {\n              notDupeShuffleElective50.push(reshuffleElectice50[x]);\n            }\n          } catch {}\n        }\n\n        reshuffleElectice50.pop(notDupeShuffleElective50);\n      };\n\n      checkHC_50_Elective(AntArrElective50);\n\n      const reshuffleElectice50_50 = (data, array) => {\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != undefined) {\n                if (data[x][0] == i) {\n                  array[i] = 0;\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              count += 1;\n              array[i] = data[k][1];\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        console.log(\"count: \" + count);\n      };\n\n      reshuffleElectice50_50(notDupeShuffleElective50, AntArrElective50);\n\n      const checkAmountData50_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 50 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData50_2(AntArrInsElective50);\n      console.log(AntArrInsElective50);\n      console.log(\"Amount of data: \" + checkAmount_2); //___________________________________________________________________________________________________________________________________\n      //___________________________________________________________________________________________________________________________________\n\n      const array1DElective100 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrElective100 = array1DElective100(DataArrayElective100);\n      let extraDataElective100_Slot2_2 = [];\n      let extraData100Elective_Slot2_1 = [];\n      let insertedDataElective100_Slot2_2 = [];\n      let insertedDataElective100_Slot2_1 = [];\n\n      const AntAlgoInsertElective100 = array => {\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let k4 = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let remainderArray3 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterDataElective100.length; x++) {\n          test.push(filterDataElective100[x]);\n        }\n\n        for (let i = array.length - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let slot1 = test[k][9];\n            let slot2 = test[k][10];\n\n            if (hourMS == 3) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100 && array[i - 1] == 100 && array[i + 1] == 100) {\n                array[i] = array[j];\n                array[i - 1] = array[j - 1];\n                array[i + 1] = array[j + 1];\n                array[j] = test[k];\n                array[j - 1] = test[k];\n                array[j + 1] = test[k];\n              } else {\n                remainderArray3.push(test[k]);\n              }\n            } else if (hourMS == 2) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k];\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            } else if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                //slot in slot1 = 2\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const z = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[z];\n                      array[i - 1] = array[z - 1];\n                      array[i] = test[k];\n                      array[i - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[z];\n                      array[i + 1] = array[z + 1];\n                      array[z] = test[k];\n                      array[z + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } //slot in slot1 = 2\n                else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const v = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[v];\n                      array[i - 1] = array[v - 1];\n                      array[v] = test[k];\n                      array[v - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[v];\n                      array[i + 1] = array[v + 1];\n                      array[v] = test[k];\n                      array[v + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        }\n\n        for (let z = 0; z < array.length; z++) {\n          for (let x = 0; x < remainderArraySlot1.length; x++) {\n            if (array[z] == remainderArraySlot1[x]) {\n              for (let b = 1; b <= totalRoom; b++) {\n                if (array[z + 38 * b] == 100 && array[z + 38 * b - 1] == 100) {\n                  array[z + 38 * b] = 0;\n                  array[z + 38 * b - 1] = 0;\n                }\n\n                if (array[z - 38 * b] == 100 && array[z - 38 * b - 1] == 100) {\n                  array[z - 38 * b] = 0;\n                  array[z - 38 * b - 1] = 0;\n                }\n              }\n            }\n          }\n        } //slot in 3\n\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100 && array[i + 1] == 100 && array[i + 2] == 100) {\n            if (k4 < remainderArray3.length) {\n              array[i] = remainderArray3[k4];\n              array[i + 1] = remainderArray3[k4];\n              array[i + 2] = remainderArray3[k4];\n            }\n\n            k4++;\n          }\n        } //fullfill the slot 3\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective100_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective100_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const c = Math.floor(Math.random() * (x + 1));\n              array[x] = array[c];\n              array[x + 1] = array[c + 1];\n              array[c] = remainderArray[k2];\n              array[c + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective100_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const b = Math.floor(Math.random() * (x + 1));\n              array[x] = array[b];\n              array[x + 1] = array[b + 1];\n              array[b] = remainderArray[k2];\n              array[b + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective100_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          }\n        } //if there is array in -1, reslot in into the array\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedDataElective100_Slot2_1.push(array[-1]);\n        }\n\n        return array;\n      };\n\n      var AntArrInsElective100 = AntAlgoInsertElective100(AntArrElective100);\n\n      const slot2Equal1forElective100 = array => {\n        let k = 0;\n        let test2 = [];\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (k < insertedDataElective100_Slot2_1.length) {\n              array[x] = insertedDataElective100_Slot2_1[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal1forElective100(AntArrElective100);\n\n      const slot2Equal2forElective100 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedDataElective100_Slot2_2.length) {\n              array[x] = insertedDataElective100_Slot2_2[k];\n              array[x + 1] = insertedDataElective100_Slot2_2[k];\n            } else {\n              if (insertedDataElective100_Slot2_2[k] != undefined) {\n                extraDataElective100_Slot2_2.push(insertedDataElective100_Slot2_2[k]);\n              }\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < extraDataElective100_Slot2_2.length) {\n              array[x] = extraDataElective100_Slot2_2[k];\n              array[x + 1] = extraDataElective100_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal2forElective100(AntArrElective100);\n      let reshuffleElective100 = [];\n      let notDupeShuffleElective100 = [];\n\n      const checkHC_100_Elective = array => {\n        let count = 0;\n        let indexArray = 0;\n        let indexArray2 = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffleElective100.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffleElective100.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffleElective100.length; x++) {\n          try {\n            if (reshuffleElective100[x][0] != reshuffleElective100[x + 1][0]) {\n              notDupeShuffleElective100.push(reshuffleElective100[x]);\n            }\n          } catch {}\n        }\n\n        reshuffleElective100.pop(notDupeShuffleElective100);\n      };\n\n      checkHC_100_Elective(AntArrElective100);\n\n      const reshuffleElective100_100 = (data, array) => {\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != undefined) {\n                if (data[x][0] == i) {\n                  array[i] = 0;\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              count += 1;\n              array[i] = data[k][1];\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        console.log(\"count: \" + count);\n      };\n\n      reshuffleElective100_100(notDupeShuffleElective100, AntArrElective100);\n\n      const checkAmountData100_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 100 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData100_2(AntArrInsElective100);\n      console.log(AntArrInsElective100);\n      console.log(\"Amount of data: \" + checkAmount_2); //___________________________________________________________________________________________________________________________________\n      //___________________________________________________________________________________________________________________________________\n\n      const array1DElective200 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrElective200 = array1DElective200(DataArrayElective200);\n      let extraDataElective200_Slot2_2 = [];\n      let extraData200Elective_Slot2_1 = [];\n      let insertedDataElective200_Slot2_2 = [];\n      let insertedDataElective200_Slot2_1 = [];\n\n      const AntAlgoInsertElective200 = array => {\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let k4 = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let remainderArray3 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterDataElective200.length; x++) {\n          test.push(filterDataElective200[x]);\n        }\n\n        for (let i = array.length - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let slot1 = test[k][9];\n            let slot2 = test[k][10];\n\n            if (hourMS == 3) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100 && array[i - 1] == 100 && array[i + 1] == 100) {\n                array[i] = array[j];\n                array[i - 1] = array[j - 1];\n                array[i + 1] = array[j + 1];\n                array[j] = test[k];\n                array[j - 1] = test[k];\n                array[j + 1] = test[k];\n              } else {\n                remainderArray3.push(test[k]);\n              }\n            } else if (hourMS == 2) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k];\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            } else if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                //slot in slot1 = 2\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const z = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[z];\n                      array[i - 1] = array[z - 1];\n                      array[i] = test[k];\n                      array[i - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[z];\n                      array[i + 1] = array[z + 1];\n                      array[z] = test[k];\n                      array[z + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } //slot in slot1 = 2\n                else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const v = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[v];\n                      array[i - 1] = array[v - 1];\n                      array[v] = test[k];\n                      array[v - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[v];\n                      array[i + 1] = array[v + 1];\n                      array[v] = test[k];\n                      array[v + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        }\n\n        for (let z = 0; z < array.length; z++) {\n          for (let x = 0; x < remainderArraySlot1.length; x++) {\n            if (array[z] == remainderArraySlot1[x]) {\n              for (let b = 1; b <= totalRoom; b++) {\n                if (array[z + 38 * b] == 100 && array[z + 38 * b - 1] == 100) {\n                  array[z + 38 * b] = 0;\n                  array[z + 38 * b - 1] = 0;\n                }\n\n                if (array[z - 38 * b] == 100 && array[z - 38 * b - 1] == 100) {\n                  array[z - 38 * b] = 0;\n                  array[z - 38 * b - 1] = 0;\n                }\n              }\n            }\n          }\n        } //slot in 3\n\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100 && array[i + 1] == 100 && array[i + 2] == 100) {\n            if (k4 < remainderArray3.length) {\n              array[i] = remainderArray3[k4];\n              array[i + 1] = remainderArray3[k4];\n              array[i + 2] = remainderArray3[k4];\n            }\n\n            k4++;\n          }\n        } //fullfill the slot 3\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective200_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective200_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const c = Math.floor(Math.random() * (x + 1));\n              array[x] = array[c];\n              array[x + 1] = array[c + 1];\n              array[c] = remainderArray[k2];\n              array[c + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective200_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const b = Math.floor(Math.random() * (x + 1));\n              array[x] = array[b];\n              array[x + 1] = array[b + 1];\n              array[b] = remainderArray[k2];\n              array[b + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective200_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          }\n        } //if there is array in -1, reslot in into the array\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedDataElective200_Slot2_1.push(array[-1]);\n        }\n\n        return array;\n      };\n\n      var AntArrInsElective200 = AntAlgoInsertElective200(AntArrElective200);\n\n      const slot2Equal1forElective200 = array => {\n        let k = 0;\n        let test2 = [];\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (k < insertedDataElective200_Slot2_1.length) {\n              array[x] = insertedDataElective200_Slot2_1[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal1forElective200(AntArrElective200);\n\n      const slot2Equal2forElective200 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedDataElective200_Slot2_2.length) {\n              array[x] = insertedDataElective200_Slot2_2[k];\n              array[x + 1] = insertedDataElective200_Slot2_2[k];\n            } else {\n              if (insertedDataElective200_Slot2_2[k] != undefined) {\n                extraDataElective200_Slot2_2.push(insertedDataElective200_Slot2_2[k]);\n              }\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < extraDataElective200_Slot2_2.length) {\n              array[x] = extraDataElective200_Slot2_2[k];\n              array[x + 1] = extraDataElective200_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal2forElective200(AntArrElective200);\n      let reshuffleElective200 = [];\n      let notDupeShuffleElective200 = [];\n\n      const checkHC_200_Elective = array => {\n        let count = 0;\n        let indexArray = 0;\n        let indexArray2 = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffleElective200.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffleElective200.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffleElective200.length; x++) {\n          try {\n            if (reshuffleElective200[x][0] != reshuffleElective200[x + 1][0]) {\n              notDupeShuffleElective200.push(reshuffleElective200[x]);\n            }\n          } catch {}\n        }\n\n        reshuffleElective200.pop(notDupeShuffleElective200);\n      };\n\n      checkHC_200_Elective(AntArrElective200);\n\n      const reshuffleElective200_200 = (data, array) => {\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != undefined) {\n                if (data[x][0] == i) {\n                  array[i] = 0;\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              count += 1;\n              array[i] = data[k][1];\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        console.log(\"count: \" + count);\n      };\n\n      reshuffleElective200_200(notDupeShuffleElective200, AntArrElective200);\n\n      const checkAmountData200_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 200 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData200_2(AntArrInsElective200);\n      console.log(AntArrInsElective200);\n      console.log(\"Amount of data: \" + checkAmount_2); //___________________________________________________________________________________________________________________________________\n      //___________________________________________________________________________________________________________________________________\n\n      const array1DElective500 = data => {\n        var result = [];\n\n        for (let i = 0; i < data; i++) {\n          result[i] = 100;\n        }\n\n        return result;\n      };\n\n      var AntArrElective500 = array1DElective500(DataArrayElective500);\n      let extraDataElective500_Slot2_2 = [];\n      let extraData500Elective_Slot2_1 = [];\n      let insertedDataElective500_Slot2_2 = [];\n      let insertedDataElective500_Slot2_1 = [];\n\n      const AntAlgoInsertElective500 = array => {\n        let test = [];\n        let k = 0;\n        let k2 = 0;\n        let k3 = 0;\n        let k4 = 0;\n        let remainderArray = [];\n        let remainderArraySlot1 = [];\n        let remainderArray3 = [];\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < filterDataElective500.length; x++) {\n          test.push(filterDataElective500[x]);\n        }\n\n        for (let i = array.length - 1; i > 0; i--) {\n          if (k < test.length) {\n            let hourMS = test[k][7];\n            let slot1 = test[k][9];\n            let slot2 = test[k][10];\n\n            if (hourMS == 3) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100 && array[i - 1] == 100 && array[i + 1] == 100) {\n                array[i] = array[j];\n                array[i - 1] = array[j - 1];\n                array[i + 1] = array[j + 1];\n                array[j] = test[k];\n                array[j - 1] = test[k];\n                array[j + 1] = test[k];\n              } else {\n                remainderArray3.push(test[k]);\n              }\n            } else if (hourMS == 2) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k];\n                } else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k];\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            } else if (hourMS == 4) {\n              const j = Math.floor(Math.random() * (i + 1));\n\n              if (array[i] == 100) {\n                //slot in slot1 = 2\n                if (array[i - 1] == 100) {\n                  array[i] = array[j];\n                  array[i - 1] = array[j - 1];\n                  array[j] = test[k];\n                  array[j - 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const z = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[z];\n                      array[i - 1] = array[z - 1];\n                      array[i] = test[k];\n                      array[i - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[z];\n                      array[i + 1] = array[z + 1];\n                      array[z] = test[k];\n                      array[z + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } //slot in slot1 = 2\n                else if (array[i + 1] == 100) {\n                  array[i] = array[j];\n                  array[i + 1] = array[j + 1];\n                  array[j] = test[k];\n                  array[j + 1] = test[k]; // make stack become 0\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[j + 38 * b] == 100 && array[j + 38 * b - 1] == 100) {\n                      array[j + 38 * b] = 0;\n                      array[j + 38 * b - 1] = 0;\n                    }\n\n                    if (array[j - 38 * b] == 100 && array[j - 38 * b - 1] == 100) {\n                      array[j - 38 * b] = 0;\n                      array[j - 38 * b - 1] = 0;\n                    }\n                  }\n\n                  const v = Math.floor(Math.random() * (i + 1));\n\n                  if (array[i] == 100) {\n                    //slot in slot1 = 2\n                    if (array[i - 1] == 100) {\n                      array[i] = array[v];\n                      array[i - 1] = array[v - 1];\n                      array[v] = test[k];\n                      array[v - 1] = test[k];\n                    } else if (array[i + 1] == 100) {\n                      array[i] = array[v];\n                      array[i + 1] = array[v + 1];\n                      array[v] = test[k];\n                      array[v + 1] = test[k];\n                    } else {\n                      remainderArraySlot1.push(test[k]);\n                    }\n                  } else {\n                    remainderArraySlot1.push(test[k]);\n                  } //revert back to 100\n\n\n                  for (let x = 0; x < array.length; x++) {\n                    if (array[x] == 0) {\n                      array[x] = 100;\n                    }\n                  }\n                } else {\n                  remainderArray.push(test[k]);\n                }\n              } else {\n                remainderArray.push(test[k]);\n              }\n            }\n          }\n\n          k++;\n        }\n\n        for (let z = 0; z < array.length; z++) {\n          for (let x = 0; x < remainderArraySlot1.length; x++) {\n            if (array[z] == remainderArraySlot1[x]) {\n              for (let b = 1; b <= totalRoom; b++) {\n                if (array[z + 38 * b] == 100 && array[z + 38 * b - 1] == 100) {\n                  array[z + 38 * b] = 0;\n                  array[z + 38 * b - 1] = 0;\n                }\n\n                if (array[z - 38 * b] == 100 && array[z - 38 * b - 1] == 100) {\n                  array[z - 38 * b] = 0;\n                  array[z - 38 * b - 1] = 0;\n                }\n              }\n            }\n          }\n        } //slot in 3\n\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100 && array[i + 1] == 100 && array[i + 2] == 100) {\n            if (k4 < remainderArray3.length) {\n              array[i] = remainderArray3[k4];\n              array[i + 1] = remainderArray3[k4];\n              array[i + 2] = remainderArray3[k4];\n            }\n\n            k4++;\n          }\n        } //fullfill the slot 3\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective500_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k3 < remainderArraySlot1.length) {\n              const q = Math.floor(Math.random() * (x + 1));\n              array[x] = array[q];\n              array[x + 1] = array[q + 1];\n              array[q] = remainderArraySlot1[k3];\n              array[q + 1] = remainderArraySlot1[k3];\n            } else {\n              if (remainderArraySlot1[k3] != undefined) {\n                insertedDataElective500_Slot2_2.push(remainderArraySlot1[k3]);\n              }\n            }\n\n            k3++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const c = Math.floor(Math.random() * (x + 1));\n              array[x] = array[c];\n              array[x + 1] = array[c + 1];\n              array[c] = remainderArray[k2];\n              array[c + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective500_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          } else if (array[x] == 100 && array[x + 1] == 100) {\n            if (k2 < remainderArray.length) {\n              const b = Math.floor(Math.random() * (x + 1));\n              array[x] = array[b];\n              array[x + 1] = array[b + 1];\n              array[b] = remainderArray[k2];\n              array[b + 1] = remainderArray[k2];\n            }\n\n            try {\n              let slot2 = remainderArray[k2][10];\n\n              if (slot2 == 2) {\n                insertedDataElective500_Slot2_2.push(remainderArray[k2]);\n              }\n            } catch {}\n\n            k2++;\n          }\n        } //if there is array in -1, reslot in into the array\n\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        if (array[-1] != undefined) {\n          insertedDataElective500_Slot2_1.push(array[-1]);\n        }\n\n        return array;\n      };\n\n      var AntArrInsElective500 = AntAlgoInsertElective500(AntArrElective500);\n\n      const slot2Equal1forElective500 = array => {\n        let k = 0;\n        let test2 = [];\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100) {\n            if (k < insertedDataElective500_Slot2_1.length) {\n              array[x] = insertedDataElective500_Slot2_1[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal1forElective500(AntArrElective500);\n\n      const slot2Equal2forElective500 = array => {\n        let k = 0;\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < insertedDataElective500_Slot2_2.length) {\n              array[x] = insertedDataElective500_Slot2_2[k];\n              array[x + 1] = insertedDataElective500_Slot2_2[k];\n            } else {\n              if (insertedDataElective500_Slot2_2[k] != undefined) {\n                extraDataElective500_Slot2_2.push(insertedDataElective500_Slot2_2[k]);\n              }\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 100 && array[x + 1] == 100) {\n            if (k < extraDataElective500_Slot2_2.length) {\n              array[x] = extraDataElective500_Slot2_2[k];\n              array[x + 1] = extraDataElective500_Slot2_2[k];\n            }\n\n            k++;\n          }\n        }\n\n        return array;\n      };\n\n      slot2Equal2forElective500(AntArrElective500);\n      let reshuffleElective500 = [];\n      let notDupeShuffleElective500 = [];\n\n      const checkHC_500_Elective = array => {\n        let count = 0;\n        let indexArray = 0;\n        let indexArray2 = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    reshuffleElective500.push([i + indexArray, array[i + indexArray]]);\n                  }\n\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      reshuffleElective500.push([i + indexArray, array[i + indexArray]]);\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        for (let x = 0; x < reshuffleElective500.length; x++) {\n          try {\n            if (reshuffleElective500[x][0] != reshuffleElective500[x + 1][0]) {\n              notDupeShuffleElective500.push(reshuffleElective500[x]);\n            }\n          } catch {}\n        }\n\n        reshuffleElective500.pop(notDupeShuffleElective500);\n      };\n\n      checkHC_500_Elective(AntArrElective500);\n\n      const reshuffleElective500_500 = (data, array) => {\n        let k = 0;\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 0; x < data.length; x++) {\n          for (let i = 0; i < array.length; i++) {\n            try {\n              if (array[i] != undefined) {\n                if (data[x][0] == i) {\n                  array[i] = 0;\n\n                  for (let b = 1; b <= totalRoom; b++) {\n                    if (array[i + 38 * b] == 100) {\n                      array[i + 38 * b] = 0;\n                    }\n\n                    if (array[i - 38 * b] == 100) {\n                      array[i - 38 * b] = 0;\n                    }\n                  }\n                }\n              }\n            } catch {}\n          }\n        }\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 100) {\n            if (k < data.length) {\n              count += 1;\n              array[i] = data[k][1];\n            }\n\n            k++;\n          }\n        }\n\n        for (let x = 0; x < array.length; x++) {\n          if (array[x] == 0) {\n            array[x] = 100;\n          }\n        }\n\n        console.log(\"count: \" + count);\n      };\n\n      reshuffleElective500_500(notDupeShuffleElective500, AntArrElective500);\n\n      const checkAmountData500_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 500 && array[i] != 0 && array[i] != undefined) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_2 = checkAmountData500_2(AntArrInsElective500);\n      console.log(AntArrInsElective500);\n      console.log(\"Amount of data: \" + checkAmount_2);\n\n      const checkAmountDataCombine_2 = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] != 100 && array[i] != 100 && array[i] != 0 && array[i] != undefined && array[i] != 1) {\n            count += 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkAmount_combine = checkAmountDataCombine_2(AntArrCombine); // console.log(AntArrCombine)\n      // console.log(\"Amount of data: \" +checkAmount_combine);\n\n      const checkAmountDataCombine = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          if (array[i] == 0) {\n            count += 1;\n          }\n        }\n\n        return count;\n      }; //var checkAmount_0 = checkAmountData100_0(AntArr100)\n\n\n      var checkAmount_combineData = checkAmountDataCombine(AntArrCombine); //console.log(\"zero counter: \"+checkAmount_combineData);\n      //console.log(dataCombine)\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n      // Hard Constraint \n      // H1: No student attend more than one class/ event at the same time\n      // H2: The room is large enough to accomodate all of the student in attendace while also meeting the requirement \n      // H3: At any given time, each room can onle have one course booked\n      // H4: No student attend class during 12:00 pm -2:00 due to solat jumaat\n      // H5: One teacher can only teach one class at one time.\n      //Check for the H1 violation: same group attend more than 1 class at 1 time\n\n      const check1Group = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n        }\n\n        for (let x = 1; x <= totalRoom; x++) {\n          try {\n            //for(let x= 1 ; x <= totalRoom ; x++){\n            for (let i = 0; i < array.length; i++) {\n              indexArray = x * 37;\n\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 1 && array[i + indexArray] != 0) {\n                try {\n                  //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\n                  if (array[i][6] == array[i + indexArray][6] && array[i][5] == array[i + indexArray][5]) {\n                    try {\n                      // console.log(i)\n                      // console.log(i+indexArray)\n                      count += 1;\n                    } catch {}\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      };\n\n      var checkH1_ALL = check1Group(AntArrCombine); //console.log(\"HC1 Counter: \"+checkH1_ALL);\n      //var checkH1_ALLElective = check1Group(dataCombineElective)\n      //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\n\n      const checkRoomQuota = array => {\n        let count = 0;\n        return count;\n      }; //var checkH2_ALL = checkRoomQuota(dataCombine)\n      //var checkH2_ALLElective = checkRoomQuota(dataCombineElective)\n      //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\n\n\n      const checkSolatJummat = array => {\n        let count = 0;\n        return count;\n      }; //var checkH4_ALL = checkSolatJummat(dataCombine)\n      //var checkH4_ALLElective = checkSolatJummat(dataCombineElective)\n      //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\n\n\n      const check1Teacher = array => {\n        let count = 0;\n        let indexArray = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          indexArray = x * 38;\n\n          try {\n            for (let i = 1; i < array.length; i++) {\n              if (array[i + indexArray] != 100 && array[i + indexArray] != undefined && array[i + indexArray] != 1 && array[i + indexArray] != 0) {\n                try {\n                  if (array[i][5] == array[i + indexArray][5]) {\n                    //    console.log(i)\n                    //    console.log(i+indexArray)\n                    count += 1;\n                  }\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      };\n\n      var checkH5_ALL = check1Teacher(AntArrCombine); //console.log(\"HC5 Counter: \"+checkH5_ALL)\n      //var checkH5_ALLElective = check1Group(dataCombineElective)\n\n      const checkHC = (data1, data2) => {\n        let count = 0;\n\n        if (data1 != 0) {\n          count += 1;\n        }\n\n        if (data2 != 0) {\n          count += 1;\n        }\n\n        return count;\n      };\n\n      let checkTotalHardContraints = checkHC(checkH5_ALL, checkH1_ALL);\n      console.log(\"Total Hard Constraint: \" + checkTotalHardContraints); //----------------------------------------------------------------------------------------------------------------------------------------\n      // Soft Constraint \n      // S1: A student has a class schedule toward the end of the day\n      // S2: A student have more than two class in a row\n      //Check for the S1 violation: student have class at the end of the day\n\n      const checkEndOfClass = array => {\n        let count = 0;\n        let totalRoom = array.length / 38;\n\n        for (let x = 1; x <= totalRoom; x++) {\n          let indexArray = x * 37;\n\n          if (array[indexArray] != 100) {\n            count = 1;\n          }\n        }\n\n        return count;\n      };\n\n      var checkSC1_ALL = checkEndOfClass(AntArrCombine); //Check for the S2 violation: teacher have 2 class in a row\n\n      const check2ClassInARow = array => {\n        let count = 0;\n\n        for (let i = 0; i < array.length; i++) {\n          try {\n            if (array[i][5] != undefined && array[i + 3][5] != undefined && array[i + 2][5] != undefined && array[i + 4][5] != undefined) {\n              if (array[i][5] == array[i + 3][5] && array[i + 2][5] == array[i + 4][5]) {\n                count = 1;\n              }\n            }\n          } catch {}\n        }\n\n        return count;\n      };\n\n      var checkSC2_ALL = checkEndOfClass(AntArrCombine); //----------------------------------------------------------------------------------------------------------------------------------------------\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n      //----------------------------------------------------------------------------------------------------------------------------------------\n      //-----------------------------------------------------------------------------------------------------------------------------------------------\n\n      const checkTotalSoftContraint = () => {\n        let count = 0;\n        let totalSC = checkSC1_ALL + checkSC2_ALL;\n\n        if (totalSC != 0) {\n          count += 1;\n        }\n\n        return count;\n      };\n\n      var checkTotalSoftContraints = checkTotalSoftContraint();\n      console.log(\"Total Soft Constraint: \" + checkTotalSoftContraints); //----------------------------------------------------------------------------------------------------------------------------------------------\n\n      const change100ToEmptyElective = data => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i] == 100) {\n            data[i] = [];\n          }\n        }\n\n        return data;\n      };\n\n      let finalDataElective = change100ToEmptyElective(AntArrCombine);\n      checkTotalHardContraintsAll = checkTotalHardContraints;\n      checkTotalSoftContraintsAll = checkTotalSoftContraints;\n      finalDataAllElective.push(finalDataElective);\n      return {\n        checkTotalHardContraints,\n        checkTotalSoftContraints,\n        finalDataAllElective\n      }; //___________________________________________________________________________________________________________________________________\n    };\n\n    let trigger = 0;\n    var t0 = performance.now();\n\n    const iteration = () => {\n      //antSystem()\n      let globalBestHS = checkTotalHardContraintsAll;\n      let globalBestSS = checkTotalSoftContraintsAll;\n      let globalBestScehdule = finalDataAllElective[0];\n\n      for (let i = 1; i <= 1; i++) {\n        antSystem();\n        let localBestHS = checkTotalHardContraintsAll;\n        let localBestSS = checkTotalSoftContraintsAll;\n        let localBestScehdule = finalDataAllElective[0];\n        console.log(\"iteraion: \" + i);\n\n        if (globalBestHS > localBestHS) {\n          globalBestHS = localBestHS;\n          globalBestSS = localBestSS;\n          globalBestScehdule = localBestScehdule;\n        }\n\n        if (localBestHS == 0) {\n          console.log(\"iteraion: \" + i);\n          console.log(\"workable solution is found\");\n          globalBestHS = localBestHS;\n          globalBestSS = localBestSS;\n          globalBestScehdule = localBestScehdule;\n          console.log(\"Workable Gloabal best HS: \" + globalBestHS);\n          console.log(\"Workable Gloabal best SS: \" + globalBestSS); //console.log(finalDataAll[0])\n\n          trigger = 1;\n          return [finalDataAllElective[0]];\n        } else if (localBestHS == 0 && localBestSS == 0) {\n          console.log(\"iteraion: \" + i);\n          console.log(\"perfect solution is found\");\n          globalBestHS = localBestHS;\n          globalBestSS = localBestSS;\n          globalBestScehdule = localBestScehdule;\n          console.log(\"Perfect Gloabal best HS: \" + globalBestHS);\n          console.log(\"Perfect Gloabal best SS: \" + globalBestSS);\n          console.log(finalDataAll[0]);\n          trigger = 1;\n          return [finalDataAllElective[0]];\n        }\n      }\n\n      return [finalDataAllElective[0]];\n    };\n\n    let interations = iteration();\n    let presentableDataElective = [];\n\n    if (trigger == 1) {\n      //shot course code, course name and lecturer\n      console.log(data);\n\n      const changeToPresentationData = data => {\n        for (let i = 0; i <= data[0].length; i++) {\n          try {\n            presentableDataElective.push([data[1][i][1], data[1][i][2], data[1][i][5]]);\n          } catch (error) {}\n        }\n      };\n\n      changeToPresentationData(interations);\n      let allRoomName = [];\n\n      for (let i = 0; i < roomData[0].length; i++) {\n        allRoomName.push(roomData[0][i][0]);\n      }\n\n      allRoomName.unshift(\"Room\");\n\n      if (allRoomName.pop() == undefined) {}\n\n      let wed = ['Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday', 'Wednesday'];\n\n      const create2dArrayElective = (weekdayArray, partDay, arrayAll, partAll) => {\n        var tmp = [];\n\n        for (var i = 0; i < weekdayArray.length; i += partDay) {\n          tmp.push(weekdayArray.slice(i, i + partDay));\n        }\n\n        for (var i = 0; i < arrayAll.length; i += partAll) {\n          tmp.push(arrayAll.slice(i, i + partAll));\n        }\n\n        return tmp;\n      };\n\n      let datasetElective = create2dArrayElective(wed, 10, presentableDataElective, 10);\n      console.log(datasetElective); //console.log(dataset)\n\n      const insertRoomNameElective = (roomData, array) => {\n        for (let i = 0; i < array.length; i++) {\n          array[i].unshift(roomData[i]);\n        }\n\n        return array;\n      };\n\n      insertRoomNameElective(allRoomName, datasetElective);\n      /** Convert a 2D array into a CSV string\r\n       * elective\r\n      */\n\n      function arrayToCsvElective(data) {\n        //console.log(data)\n        return data.map(row => row.map(String) // convert every value to String\n        .map(v => v.replaceAll('\"', '\"\"')) // escape double colons\n        .map(v => `\"${v}\"`) // quote it\n        .join(',') // comma-separated\n        ).join('\\r\\n'); // rows starting on new lines\n      }\n\n      let csvElective = arrayToCsvElective(datasetElective);\n\n      function downloadBlobElective(content, filename, contentType) {\n        // Create a blob\n        var blob = new Blob([content], {\n          type: contentType\n        });\n        var url = URL.createObjectURL(blob); // Create a link to download it\n\n        var pom = document.createElement('a');\n        pom.href = url;\n        pom.setAttribute('download', filename);\n        pom.click();\n      }\n\n      var t1 = performance.now();\n      console.log(\"Duration: \" + (t1 - t0));\n      downloadBlobElective(csvElective, 'ModifiedAntSystemElective_GeneratedSchedule.csv', 'text/csv;charset=utf-8;');\n    } else {\n      var t1 = performance.now();\n      console.log(\"Duration: \" + (t1 - t0) + \" milliseconds\");\n      alert(\"no workable solution found, please refersh until get workable solution\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 2425,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 2426,\n      columnNumber: 17\n    }\n  }, \"Generate Schedule Page Elective\"));\n};\n\nexport default ArrayScheduleElective;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GenerateSchedulePage/GenerateScheduleElective.js"],"names":["concat","create","find","forEach","indexOf","React","useEffect","useState","useContext","useParams","_","CSVLink","LoadingSpinner","finalDataAll","finalDataAllElective","checkHardConstraintOutsite","checkSoftConstraintOutsite","ArrayScheduleElective","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","CsvData","setCsvData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","lecturerData","roomName","roomSize","filterData50","filterData100","filterData200","filterData500","filterDataElective50","filterDataElective100","filterDataElective200","filterDataElective500","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","lecturer","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","notDuplicatesLecturer","pop","courseDataXElective","courseDataWithElective","slice","splice","roomUnder50","roomUnder100","roomUnder200","roomUnder500","checkNumberofRoom","createArray","data","result","DataArray50","DataArray100","DataArray200","DataArray500","combineArray","startIndex100","startIndex200","startIndex500","DataArrayElective50","DataArrayElective100","DataArrayElective200","DataArrayElective500","combineArrayElective","checkTotalHardContraintsAll","checkTotalSoftContraintsAll","antSystem","array1DElectiveCombine","AntArrCombine","array1DElective50","AntArrElective50","extraDataElective50_Slot2_2","extraData50Elective_Slot2_1","insertedDataElective50_Slot2_2","insertedDataElective50_Slot2_1","AntAlgoInsertElective50","test","k","k2","k3","k4","remainderArray","remainderArraySlot1","remainderArray3","totalRoom","x","hourMS","slot1","slot2","j","Math","floor","random","b","z","v","q","undefined","c","AntArrInsElective50","slot2Equal1forElective50","test2","slot2Equal2forElective50","reshuffleElectice50","notDupeShuffleElective50","checkHC_50_Elective","count","indexArray","indexArray2","reshuffleElectice50_50","checkAmountData50_2","checkAmount_2","array1DElective100","AntArrElective100","extraDataElective100_Slot2_2","extraData100Elective_Slot2_1","insertedDataElective100_Slot2_2","insertedDataElective100_Slot2_1","AntAlgoInsertElective100","AntArrInsElective100","slot2Equal1forElective100","slot2Equal2forElective100","reshuffleElective100","notDupeShuffleElective100","checkHC_100_Elective","reshuffleElective100_100","checkAmountData100_2","array1DElective200","AntArrElective200","extraDataElective200_Slot2_2","extraData200Elective_Slot2_1","insertedDataElective200_Slot2_2","insertedDataElective200_Slot2_1","AntAlgoInsertElective200","AntArrInsElective200","slot2Equal1forElective200","slot2Equal2forElective200","reshuffleElective200","notDupeShuffleElective200","checkHC_200_Elective","reshuffleElective200_200","checkAmountData200_2","array1DElective500","AntArrElective500","extraDataElective500_Slot2_2","extraData500Elective_Slot2_1","insertedDataElective500_Slot2_2","insertedDataElective500_Slot2_1","AntAlgoInsertElective500","AntArrInsElective500","slot2Equal1forElective500","slot2Equal2forElective500","reshuffleElective500","notDupeShuffleElective500","checkHC_500_Elective","reshuffleElective500_500","checkAmountData500_2","checkAmountDataCombine_2","checkAmount_combine","checkAmountDataCombine","checkAmount_combineData","check1Group","checkH1_ALL","checkRoomQuota","checkSolatJummat","check1Teacher","checkH5_ALL","checkHC","data1","data2","checkTotalHardContraints","checkEndOfClass","checkSC1_ALL","check2ClassInARow","checkSC2_ALL","checkTotalSoftContraint","totalSC","checkTotalSoftContraints","change100ToEmptyElective","finalDataElective","trigger","t0","performance","now","iteration","globalBestHS","globalBestSS","globalBestScehdule","localBestHS","localBestSS","localBestScehdule","interations","presentableDataElective","changeToPresentationData","error","allRoomName","unshift","wed","create2dArrayElective","weekdayArray","partDay","arrayAll","partAll","tmp","datasetElective","insertRoomNameElective","arrayToCsvElective","row","String","replaceAll","join","csvElective","downloadBlobElective","content","filename","contentType","blob","Blob","type","url","URL","createObjectURL","pom","document","createElement","href","setAttribute","click","t1","alert"],"mappings":"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","sourcesContent":["import { concat, create, find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport _ from 'lodash';\r\nimport { CSVLink } from \"react-csv\";\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\n\r\nlet finalDataAll = [];\r\nlet finalDataAllElective = [];\r\nlet checkHardConstraintOutsite = 0;\r\nlet checkSoftConstraintOutsite = 0;\r\n\r\nconst ArrayScheduleElective = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    const [CsvData, setCsvData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code'],Dataset['Slot1'],Dataset['Slot2']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const lecturerData = []\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData50  = [];\r\n            const filterData100  = [];\r\n            const filterData200  = [];\r\n            const filterData500  = [];\r\n            const filterDataElective50  = [];\r\n            const filterDataElective100  = [];\r\n            const filterDataElective200  = [];\r\n            const filterDataElective500  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                let lecturer = [courseData[0][i][5]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                lecturer.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    lecturerData.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n \r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n            const notDuplicatesLecturer = lecturerData.filter((item, index) => index == lecturerData.indexOf(item));\r\n            notDuplicatesLecturer.pop();\r\n            //console.log(notDuplicatesLecturer)\r\n\r\n\r\n            let courseDataXElective = []\r\n            let courseDataWithElective = []\r\n            courseData[0].pop()\r\n\r\n            //saparate faculty course with the elective course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) != 'TMU'){\r\n                    courseData[0][i].splice()\r\n                    if(  courseData[0][i][1].slice(0,3) != 'TMX'){\r\n                        courseData[0][i].splice()\r\n                        courseDataXElective.push(courseData[0][i])\r\n                    }\r\n                }\r\n            }\r\n\r\n            //saparate elective course with the faculty course\r\n            for(let i=0; i< courseData[0].length; i++){\r\n                if(courseData[0][i][1].slice(0,3) == 'TMU' ||  courseData[0][i][1].slice(0,3) == 'TMX'){\r\n                    courseDataWithElective.push(courseData[0][i])\r\n                }\r\n            }\r\n\r\n            //insert data without elective courses into correct room capacity\r\n                for(let i = 0; i< courseDataXElective.length;i++){\r\n                        if (courseDataXElective[i][0] < 50) {\r\n                            filterData50.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 50 && courseDataXElective[i][0] < 100) {\r\n                            \r\n                            filterData100.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 100 && courseDataXElective[i][0] < 200 ) {\r\n                            filterData200.push(courseDataXElective[i]);\r\n                        }\r\n                        if (courseDataXElective[i][0] >= 200 && courseDataXElective[i][0] < 500) {\r\n                            filterData500.push(courseDataXElective[i]);\r\n                        }\r\n                }\r\n                //console.log(filterData50)\r\n\r\n                //insert data without faculty courses into correct room capacity\r\n                for(let i = 0; i< courseDataWithElective.length;i++){\r\n                    if (courseDataWithElective[i][0] < 50) {\r\n                        filterDataElective50.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 50 && courseDataWithElective[i][0] < 100) {\r\n                        \r\n                        filterDataElective100.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 100 && courseDataWithElective[i][0] < 200 ) {\r\n                        filterDataElective200.push(courseDataWithElective[i]);\r\n                    }\r\n                    if (courseDataWithElective[i][0] >= 200 && courseDataWithElective[i][0] < 500) {\r\n                        filterDataElective500.push(courseDataWithElective[i]);\r\n                    }\r\n                }\r\n                // console.log(filterDataElective50);\r\n                // console.log(filterDataElective100);\r\n                // console.log(filterDataElective200);\r\n                // console.log(filterDataElective500);\r\n\r\n\r\n            let roomUnder50 = []\r\n            let roomUnder100 = []\r\n            let roomUnder200 = []\r\n            let roomUnder500 = []\r\n            const checkNumberofRoom = () => {\r\n                for(let i = 0; i < roomData[0].length; i++){\r\n                    let room = roomData[0][i][1]\r\n                    //console.log(roomData[0][i][1]);\r\n                    if(room < 50){\r\n                        roomUnder50.push(room)\r\n                    }else if(room > 50 && room < 100){\r\n                        roomUnder100.push(room)\r\n\r\n                    }else if(room > 100 && room < 200){\r\n                        roomUnder200.push(room)\r\n\r\n                    }else if(room > 200){\r\n                        roomUnder500.push(room)\r\n                    }\r\n                }\r\n            }\r\n            checkNumberofRoom();\r\n\r\n\r\n            const createArray = (data) => {\r\n                var result = []\r\n\r\n                    for(let i = 0; i<data; i++){\r\n                        result[i] = []\r\n                    }\r\n                return result;\r\n            }\r\n\r\n            let DataArray50 = roomUnder50.length * 38;\r\n            let DataArray100 = roomUnder100.length * 38;\r\n            let DataArray200 = roomUnder200.length * 38;\r\n            let DataArray500 = roomUnder500.length * 38;\r\n            let combineArray = DataArray50 + DataArray100 + DataArray200 + DataArray500\r\n\r\n            let startIndex100 = DataArray50-1\r\n            let startIndex200 = DataArray50+ DataArray100-1\r\n            let startIndex500 = DataArray50 +DataArray100+DataArray200-1\r\n\r\n            let DataArrayElective50 = roomUnder50.length * 10;\r\n            let DataArrayElective100 = roomUnder100.length * 10;\r\n            let DataArrayElective200 = roomUnder200.length * 10;\r\n            let DataArrayElective500 = roomUnder500.length * 10;\r\n            let combineArrayElective = DataArrayElective50 + DataArrayElective100 + DataArrayElective200 + DataArrayElective500\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nvar checkTotalHardContraintsAll = 0\r\nvar checkTotalSoftContraintsAll = 0\r\n\r\nconst antSystem = () => {\r\n    //___________________________________________________________________________________________________________________________________\r\nconst array1DElectiveCombine = (data) => {\r\n    var result = []\r\n\r\n    for(let i = 0; i< data; i++){\r\n        result[i]= 100;\r\n    }\r\n    return result;\r\n}\r\nvar AntArrCombine = array1DElectiveCombine(combineArrayElective);\r\n\r\n\r\nconst array1DElective50 = (data) => {\r\n    var result = []\r\n\r\n    for(let i = 0; i< data; i++){\r\n        result[i]= 100;\r\n    }\r\n    return result;\r\n}\r\nvar AntArrElective50 = array1DElective50(DataArrayElective50);\r\n\r\nlet extraDataElective50_Slot2_2 = []\r\nlet extraData50Elective_Slot2_1 = []\r\nlet insertedDataElective50_Slot2_2 = []\r\nlet insertedDataElective50_Slot2_1= []\r\n\r\nconst AntAlgoInsertElective50 = (array) => {\r\n    let test = []\r\n    let k = 0;\r\n    let k2 =0\r\n    let k3 =0\r\n    let k4 =0 \r\n\r\n    let remainderArray = []\r\n    let remainderArraySlot1 = []\r\n    let remainderArray3 = []\r\n\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x=0; x<filterDataElective50.length;x++){\r\n        test.push(filterDataElective50[x]);\r\n    }\r\n\r\n     for(let i = array.length-1;i>0;i--){\r\n         if(k < test.length){\r\n         let hourMS = test[k][7]\r\n         let slot1 = test[k][9]\r\n         let slot2 = test[k][10]\r\n\r\n         if(hourMS == 3){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100 && array[i-1] == 100 && array[i+1]==100){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                }\r\n                 else{\r\n                    remainderArray3.push(test[k]);    \r\n                }\r\n             }\r\n\r\n          else if(hourMS == 2){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100){\r\n                 if(array[i-1] == 100 ){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     \r\n                 }else if(array[i+1] == 100){\r\n                     array[i] = array[j];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                 }\r\n                 else{\r\n                     remainderArray.push(test[k]);\r\n                     \r\n                 }\r\n             }else{\r\n                 remainderArray.push(test[k]);\r\n             }\r\n             }\r\n\r\n            else if(hourMS == 4){\r\n                const j = Math.floor(Math.random()*(i+1));\r\n                if(array[i] == 100){\r\n                    //slot in slot1 = 2\r\n                    if(array[i-1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i-1] = array[j-1];\r\n                        array[j] = test[k];\r\n                        array[j-1] = test[k];\r\n                        \r\n                        // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const z = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[z];\r\n                                array[i-1] = array[z-1];\r\n                                array[i] = test[k];\r\n                                array[i-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100 ){\r\n                                 array[i] = array[z];\r\n                                 array[i+1] = array[z+1];\r\n                                 array[z] = test[k];\r\n                                 array[z+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    //slot in slot1 = 2\r\n                    else if(array[i+1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i+1] = array[j+1];\r\n                        array[j] = test[k];\r\n                        array[j+1] = test[k];\r\n                        \r\n                         // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const v = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[v];\r\n                                array[i-1] = array[v-1];\r\n                                array[v] = test[k];\r\n                                array[v-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100){\r\n                                 array[i] = array[v];\r\n                                 array[i+1] = array[v+1];\r\n                                 array[v] = test[k];\r\n                                 array[v+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    else{\r\n                        remainderArray.push(test[k]);\r\n                    }\r\n                }else{\r\n                    remainderArray.push(test[k]);\r\n                    \r\n                }\r\n             }\r\n         }\r\n         k++  \r\n     }\r\n\r\n\r\n     for(let z =0; z< array.length; z++){\r\n         for(let x = 0; x < remainderArraySlot1.length; x++){\r\n             if(array[z] == remainderArraySlot1[x]){\r\n                 for(let b = 1; b <= totalRoom; b++){\r\n                     if( array[z+38*b]==100 && array[z+38*b-1]==100){\r\n                         array[z+38*b] = 0         \r\n                         array[z+38*b-1] = 0\r\n                     }\r\n                     if( array[z-38*b]==100 && array[z-38*b-1]==100){\r\n                         array[z-38*b] = 0         \r\n                         array[z-38*b-1] = 0\r\n                     }\r\n                    }\r\n             }\r\n         }\r\n     }\r\n\r\n     //slot in 3\r\n     for(let i = 0; i < array.length; i++){\r\n        if(array[i] == 100 && array[i+1] == 100 && array[i+2]==100){\r\n                if(k4 < remainderArray3.length){\r\n                    array[i] = remainderArray3[k4];\r\n                    array[i+1] = remainderArray3[k4];\r\n                    array[i+2] = remainderArray3[k4];\r\n                }\r\n                k4++\r\n        }\r\n     }\r\n\r\n     //fullfill the slot 3\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] == 100){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective50_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }\r\n     }\r\n\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k2 < remainderArray.length){\r\n                     const c = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[c]\r\n                     array[x+1] = array[c+1]\r\n                     array[c] = remainderArray[k2]\r\n                     array[c+1] = remainderArray[k2]\r\n                 }\r\n                 try{\r\n                     let slot2 = remainderArray[k2][10]\r\n                     if(slot2 == 2){\r\n                         insertedDataElective50_Slot2_2.push(remainderArray[k2])\r\n                     }\r\n                 }catch{}\r\n             k2++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k2 < remainderArray.length){\r\n                 const b = Math.floor(Math.random()*(x+1));\r\n                 array[x] = array[b]\r\n                 array[x+1] = array[b+1]\r\n                 array[b] = remainderArray[k2]\r\n                 array[b+1] = remainderArray[k2]\r\n             }\r\n             try{\r\n                 let slot2 = remainderArray[k2][10]\r\n                 if(slot2 == 2){\r\n                     insertedDataElective50_Slot2_2.push(remainderArray[k2])\r\n                 }\r\n             }catch{}\r\n         k2++   \r\n     }\r\n     }\r\n\r\n     //if there is array in -1, reslot in into the array\r\n     for(let x =0; x<array.length; x++){\r\n         if(array[x] == 0){\r\n             array[x] = 100\r\n         }\r\n     }\r\n\r\n     if(array[-1] != undefined){\r\n         insertedDataElective50_Slot2_1.push(array[-1]);\r\n     }\r\n\r\n    return array;\r\n}\r\nvar AntArrInsElective50 = AntAlgoInsertElective50(AntArrElective50);\r\n\r\n\r\n const slot2Equal1forElective50 = (array) => {\r\n     let k = 0;\r\n     let test2 = []\r\n     \r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100){\r\n                if(k < insertedDataElective50_Slot2_1.length){\r\n                    array[x] = insertedDataElective50_Slot2_1[k];\r\n                }\r\n                k++\r\n         }\r\n     }\r\n\r\n     return array;\r\n }\r\n slot2Equal1forElective50(AntArrElective50);\r\n\r\n\r\n const slot2Equal2forElective50 = (array) => {\r\n     let k = 0;\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < insertedDataElective50_Slot2_2.length){\r\n                     array[x] = insertedDataElective50_Slot2_2[k]\r\n                     array[x+1] = insertedDataElective50_Slot2_2[k]\r\n             }else{\r\n                 if(insertedDataElective50_Slot2_2[k] != undefined){\r\n                     extraDataElective50_Slot2_2.push(insertedDataElective50_Slot2_2[k])\r\n                 }\r\n             }\r\n             k++   \r\n         }\r\n     }\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < extraDataElective50_Slot2_2.length){\r\n                 array[x] = extraDataElective50_Slot2_2[k]\r\n                 array[x+1] = extraDataElective50_Slot2_2[k]\r\n             }\r\n         k++   \r\n         }\r\n     }\r\n     return array;\r\n}\r\n slot2Equal2forElective50(AntArrElective50);\r\n\r\n\r\nlet reshuffleElectice50 = []\r\nlet notDupeShuffleElective50 = []\r\nconst checkHC_50_Elective = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let indexArray2 = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n     indexArray = (x * 38)\r\n        try{\r\n         for(let i = 1; i<array.length ; i++){\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        if(array[i][5] == array[i+indexArray][5] ){\r\n                            reshuffleElectice50.push([i+indexArray,array[i+indexArray]]);\r\n                         }\r\n                         if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                reshuffleElectice50.push([i+indexArray,array[i+indexArray]]);\r\n                            }catch{}\r\n                        }\r\n                    }catch{}\r\n                }    \r\n            }\r\n        }catch{}\r\n    }\r\n    for(let x =0; x < reshuffleElectice50.length; x++){\r\n        try{\r\n            if( reshuffleElectice50[x][0] != reshuffleElectice50[x+1][0]){\r\n            notDupeShuffleElective50.push(reshuffleElectice50[x]);\r\n        }\r\n\r\n        }catch{}\r\n\r\n    }\r\n    reshuffleElectice50.pop(notDupeShuffleElective50);\r\n\r\n}\r\ncheckHC_50_Elective(AntArrElective50)\r\n\r\nconst reshuffleElectice50_50 = (data,array) => {\r\n\r\n    let k = 0\r\n    let count =0\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x =0; x < data.length; x ++){\r\n        for(let i =0; i < array.length ; i++){\r\n            try{\r\n                if(array[i] != undefined){\r\n                    if(data[x][0] == i){\r\n                        array[i] = 0\r\n                        for(let b = 1 ; b<= totalRoom ; b++){\r\n                            if( array[i+38*b]==100){\r\n                                array[i+38*b] = 0\r\n                            }\r\n                            if( array[i-38*b]==100 ){\r\n                                array[i-38*b] = 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }catch{}\r\n        }\r\n\r\n    }\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] == 100){\r\n                    if(k< data.length){\r\n                    count +=1\r\n                    array[i] = data[k][1]\r\n                    }\r\n                    k++\r\n            }\r\n        }\r\n\r\n        for(let x = 0; x< array.length; x++){\r\n            if(array[x] == 0){\r\n                array[x] = 100\r\n            }\r\n        }\r\n        console.log(\"count: \"+ count)\r\n}\r\nreshuffleElectice50_50(notDupeShuffleElective50,AntArrElective50);\r\n\r\nconst checkAmountData50_2 = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if(array[i] != 100 && array[i] !=50 && array[i] != 0 && array[i] != undefined){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\nvar checkAmount_2 = checkAmountData50_2(AntArrInsElective50)\r\nconsole.log(AntArrInsElective50)\r\nconsole.log(\"Amount of data: \"+checkAmount_2);\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\nconst array1DElective100 = (data) => {\r\n    var result = []\r\n\r\n    for(let i = 0; i< data; i++){\r\n        result[i]= 100;\r\n    }\r\n    return result;\r\n}\r\nvar AntArrElective100 = array1DElective100(DataArrayElective100);\r\n\r\nlet extraDataElective100_Slot2_2 = []\r\nlet extraData100Elective_Slot2_1 = []\r\nlet insertedDataElective100_Slot2_2 = []\r\nlet insertedDataElective100_Slot2_1= []\r\n\r\nconst AntAlgoInsertElective100 = (array) => {\r\n    let test = []\r\n    let k = 0;\r\n    let k2 =0\r\n    let k3 =0\r\n    let k4 =0 \r\n\r\n    let remainderArray = []\r\n    let remainderArraySlot1 = []\r\n    let remainderArray3 = []\r\n\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x=0; x<filterDataElective100.length;x++){\r\n        test.push(filterDataElective100[x]);\r\n    }\r\n\r\n     for(let i = array.length-1;i>0;i--){\r\n         if(k < test.length){\r\n         let hourMS = test[k][7]\r\n         let slot1 = test[k][9]\r\n         let slot2 = test[k][10]\r\n\r\n         if(hourMS == 3){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100 && array[i-1] == 100 && array[i+1]==100){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                }\r\n                 else{\r\n                    remainderArray3.push(test[k]);    \r\n                }\r\n             }\r\n\r\n          else if(hourMS == 2){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100){\r\n                 if(array[i-1] == 100 ){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     \r\n                 }else if(array[i+1] == 100){\r\n                     array[i] = array[j];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                 }\r\n                 else{\r\n                     remainderArray.push(test[k]);\r\n                     \r\n                 }\r\n             }else{\r\n                 remainderArray.push(test[k]);\r\n             }\r\n             }\r\n\r\n            else if(hourMS == 4){\r\n                const j = Math.floor(Math.random()*(i+1));\r\n                if(array[i] == 100){\r\n                    //slot in slot1 = 2\r\n                    if(array[i-1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i-1] = array[j-1];\r\n                        array[j] = test[k];\r\n                        array[j-1] = test[k];\r\n                        \r\n                        // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const z = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[z];\r\n                                array[i-1] = array[z-1];\r\n                                array[i] = test[k];\r\n                                array[i-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100 ){\r\n                                 array[i] = array[z];\r\n                                 array[i+1] = array[z+1];\r\n                                 array[z] = test[k];\r\n                                 array[z+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    //slot in slot1 = 2\r\n                    else if(array[i+1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i+1] = array[j+1];\r\n                        array[j] = test[k];\r\n                        array[j+1] = test[k];\r\n                        \r\n                         // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const v = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[v];\r\n                                array[i-1] = array[v-1];\r\n                                array[v] = test[k];\r\n                                array[v-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100){\r\n                                 array[i] = array[v];\r\n                                 array[i+1] = array[v+1];\r\n                                 array[v] = test[k];\r\n                                 array[v+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    else{\r\n                        remainderArray.push(test[k]);\r\n                    }\r\n                }else{\r\n                    remainderArray.push(test[k]);\r\n                    \r\n                }\r\n             }\r\n         }\r\n         k++  \r\n     }\r\n\r\n\r\n     for(let z =0; z< array.length; z++){\r\n         for(let x = 0; x < remainderArraySlot1.length; x++){\r\n             if(array[z] == remainderArraySlot1[x]){\r\n                 for(let b = 1; b <= totalRoom; b++){\r\n                     if( array[z+38*b]==100 && array[z+38*b-1]==100){\r\n                         array[z+38*b] = 0         \r\n                         array[z+38*b-1] = 0\r\n                     }\r\n                     if( array[z-38*b]==100 && array[z-38*b-1]==100){\r\n                         array[z-38*b] = 0         \r\n                         array[z-38*b-1] = 0\r\n                     }\r\n                    }\r\n             }\r\n         }\r\n     }\r\n\r\n     //slot in 3\r\n     for(let i = 0; i < array.length; i++){\r\n        if(array[i] == 100 && array[i+1] == 100 && array[i+2]==100){\r\n                if(k4 < remainderArray3.length){\r\n                    array[i] = remainderArray3[k4];\r\n                    array[i+1] = remainderArray3[k4];\r\n                    array[i+2] = remainderArray3[k4];\r\n                }\r\n                k4++\r\n        }\r\n     }\r\n\r\n     //fullfill the slot 3\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] == 100){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective100_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective100_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }\r\n     }\r\n\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k2 < remainderArray.length){\r\n                     const c = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[c]\r\n                     array[x+1] = array[c+1]\r\n                     array[c] = remainderArray[k2]\r\n                     array[c+1] = remainderArray[k2]\r\n                 }\r\n                 try{\r\n                     let slot2 = remainderArray[k2][10]\r\n                     if(slot2 == 2){\r\n                         insertedDataElective100_Slot2_2.push(remainderArray[k2])\r\n                     }\r\n                 }catch{}\r\n             k2++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k2 < remainderArray.length){\r\n                 const b = Math.floor(Math.random()*(x+1));\r\n                 array[x] = array[b]\r\n                 array[x+1] = array[b+1]\r\n                 array[b] = remainderArray[k2]\r\n                 array[b+1] = remainderArray[k2]\r\n             }\r\n             try{\r\n                 let slot2 = remainderArray[k2][10]\r\n                 if(slot2 == 2){\r\n                     insertedDataElective100_Slot2_2.push(remainderArray[k2])\r\n                 }\r\n             }catch{}\r\n         k2++   \r\n     }\r\n     }\r\n\r\n     //if there is array in -1, reslot in into the array\r\n     for(let x =0; x<array.length; x++){\r\n         if(array[x] == 0){\r\n             array[x] = 100\r\n         }\r\n     }\r\n\r\n     if(array[-1] != undefined){\r\n         insertedDataElective100_Slot2_1.push(array[-1]);\r\n     }\r\n\r\n    return array;\r\n}\r\nvar AntArrInsElective100 = AntAlgoInsertElective100(AntArrElective100);\r\n\r\n\r\n const slot2Equal1forElective100 = (array) => {\r\n     let k = 0;\r\n     let test2 = []\r\n     \r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100){\r\n                if(k < insertedDataElective100_Slot2_1.length){\r\n                    array[x] = insertedDataElective100_Slot2_1[k];\r\n                }\r\n                k++\r\n         }\r\n     }\r\n\r\n     return array;\r\n }\r\n slot2Equal1forElective100(AntArrElective100);\r\n\r\n\r\n const slot2Equal2forElective100 = (array) => {\r\n     let k = 0;\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < insertedDataElective100_Slot2_2.length){\r\n                     array[x] = insertedDataElective100_Slot2_2[k]\r\n                     array[x+1] = insertedDataElective100_Slot2_2[k]\r\n             }else{\r\n                 if(insertedDataElective100_Slot2_2[k] != undefined){\r\n                     extraDataElective100_Slot2_2.push(insertedDataElective100_Slot2_2[k])\r\n                 }\r\n             }\r\n             k++   \r\n         }\r\n     }\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < extraDataElective100_Slot2_2.length){\r\n                 array[x] = extraDataElective100_Slot2_2[k]\r\n                 array[x+1] = extraDataElective100_Slot2_2[k]\r\n             }\r\n         k++   \r\n         }\r\n     }\r\n     return array;\r\n}\r\n slot2Equal2forElective100(AntArrElective100);\r\n\r\n\r\nlet reshuffleElective100 = []\r\nlet notDupeShuffleElective100 = []\r\nconst checkHC_100_Elective = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let indexArray2 = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n     indexArray = (x * 38)\r\n        try{\r\n         for(let i = 1; i<array.length ; i++){\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        if(array[i][5] == array[i+indexArray][5] ){\r\n                            reshuffleElective100.push([i+indexArray,array[i+indexArray]]);\r\n                         }\r\n                         if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                reshuffleElective100.push([i+indexArray,array[i+indexArray]]);\r\n                            }catch{}\r\n                        }\r\n                    }catch{}\r\n                }    \r\n            }\r\n        }catch{}\r\n    }\r\n    for(let x =0; x < reshuffleElective100.length; x++){\r\n        try{\r\n            if( reshuffleElective100[x][0] != reshuffleElective100[x+1][0]){\r\n            notDupeShuffleElective100.push(reshuffleElective100[x]);\r\n        }\r\n\r\n        }catch{}\r\n\r\n    }\r\n    reshuffleElective100.pop(notDupeShuffleElective100);\r\n\r\n}\r\ncheckHC_100_Elective(AntArrElective100)\r\n\r\nconst reshuffleElective100_100 = (data,array) => {\r\n\r\n    let k = 0\r\n    let count =0\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x =0; x < data.length; x ++){\r\n        for(let i =0; i < array.length ; i++){\r\n            try{\r\n                if(array[i] != undefined){\r\n                    if(data[x][0] == i){\r\n                        array[i] = 0\r\n                        for(let b = 1 ; b<= totalRoom ; b++){\r\n                            if( array[i+38*b]==100){\r\n                                array[i+38*b] = 0\r\n                            }\r\n                            if( array[i-38*b]==100 ){\r\n                                array[i-38*b] = 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }catch{}\r\n        }\r\n\r\n    }\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] == 100){\r\n                    if(k< data.length){\r\n                    count +=1\r\n                    array[i] = data[k][1]\r\n                    }\r\n                    k++\r\n            }\r\n        }\r\n\r\n        for(let x = 0; x< array.length; x++){\r\n            if(array[x] == 0){\r\n                array[x] = 100\r\n            }\r\n        }\r\n        console.log(\"count: \"+ count)\r\n}\r\nreshuffleElective100_100(notDupeShuffleElective100,AntArrElective100);\r\n\r\nconst checkAmountData100_2 = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if(array[i] != 100 && array[i] !=100 && array[i] != 0 && array[i] != undefined){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\nvar checkAmount_2 = checkAmountData100_2(AntArrInsElective100)\r\nconsole.log(AntArrInsElective100)\r\nconsole.log(\"Amount of data: \"+checkAmount_2);\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\nconst array1DElective200 = (data) => {\r\n    var result = []\r\n\r\n    for(let i = 0; i< data; i++){\r\n        result[i]= 100;\r\n    }\r\n    return result;\r\n}\r\nvar AntArrElective200 = array1DElective200(DataArrayElective200);\r\n\r\nlet extraDataElective200_Slot2_2 = []\r\nlet extraData200Elective_Slot2_1 = []\r\nlet insertedDataElective200_Slot2_2 = []\r\nlet insertedDataElective200_Slot2_1= []\r\n\r\nconst AntAlgoInsertElective200 = (array) => {\r\n    let test = []\r\n    let k = 0;\r\n    let k2 =0\r\n    let k3 =0\r\n    let k4 =0 \r\n\r\n    let remainderArray = []\r\n    let remainderArraySlot1 = []\r\n    let remainderArray3 = []\r\n\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x=0; x<filterDataElective200.length;x++){\r\n        test.push(filterDataElective200[x]);\r\n    }\r\n\r\n     for(let i = array.length-1;i>0;i--){\r\n         if(k < test.length){\r\n         let hourMS = test[k][7]\r\n         let slot1 = test[k][9]\r\n         let slot2 = test[k][10]\r\n\r\n         if(hourMS == 3){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100 && array[i-1] == 100 && array[i+1]==100){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                }\r\n                 else{\r\n                    remainderArray3.push(test[k]);    \r\n                }\r\n             }\r\n\r\n          else if(hourMS == 2){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100){\r\n                 if(array[i-1] == 100 ){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     \r\n                 }else if(array[i+1] == 100){\r\n                     array[i] = array[j];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                 }\r\n                 else{\r\n                     remainderArray.push(test[k]);\r\n                     \r\n                 }\r\n             }else{\r\n                 remainderArray.push(test[k]);\r\n             }\r\n             }\r\n\r\n            else if(hourMS == 4){\r\n                const j = Math.floor(Math.random()*(i+1));\r\n                if(array[i] == 100){\r\n                    //slot in slot1 = 2\r\n                    if(array[i-1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i-1] = array[j-1];\r\n                        array[j] = test[k];\r\n                        array[j-1] = test[k];\r\n                        \r\n                        // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const z = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[z];\r\n                                array[i-1] = array[z-1];\r\n                                array[i] = test[k];\r\n                                array[i-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100 ){\r\n                                 array[i] = array[z];\r\n                                 array[i+1] = array[z+1];\r\n                                 array[z] = test[k];\r\n                                 array[z+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    //slot in slot1 = 2\r\n                    else if(array[i+1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i+1] = array[j+1];\r\n                        array[j] = test[k];\r\n                        array[j+1] = test[k];\r\n                        \r\n                         // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const v = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[v];\r\n                                array[i-1] = array[v-1];\r\n                                array[v] = test[k];\r\n                                array[v-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100){\r\n                                 array[i] = array[v];\r\n                                 array[i+1] = array[v+1];\r\n                                 array[v] = test[k];\r\n                                 array[v+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    else{\r\n                        remainderArray.push(test[k]);\r\n                    }\r\n                }else{\r\n                    remainderArray.push(test[k]);\r\n                    \r\n                }\r\n             }\r\n         }\r\n         k++  \r\n     }\r\n\r\n\r\n     for(let z =0; z< array.length; z++){\r\n         for(let x = 0; x < remainderArraySlot1.length; x++){\r\n             if(array[z] == remainderArraySlot1[x]){\r\n                 for(let b = 1; b <= totalRoom; b++){\r\n                     if( array[z+38*b]==100 && array[z+38*b-1]==100){\r\n                         array[z+38*b] = 0         \r\n                         array[z+38*b-1] = 0\r\n                     }\r\n                     if( array[z-38*b]==100 && array[z-38*b-1]==100){\r\n                         array[z-38*b] = 0         \r\n                         array[z-38*b-1] = 0\r\n                     }\r\n                    }\r\n             }\r\n         }\r\n     }\r\n\r\n     //slot in 3\r\n     for(let i = 0; i < array.length; i++){\r\n        if(array[i] == 100 && array[i+1] == 100 && array[i+2]==100){\r\n                if(k4 < remainderArray3.length){\r\n                    array[i] = remainderArray3[k4];\r\n                    array[i+1] = remainderArray3[k4];\r\n                    array[i+2] = remainderArray3[k4];\r\n                }\r\n                k4++\r\n        }\r\n     }\r\n\r\n     //fullfill the slot 3\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] == 100){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective200_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective200_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }\r\n     }\r\n\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k2 < remainderArray.length){\r\n                     const c = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[c]\r\n                     array[x+1] = array[c+1]\r\n                     array[c] = remainderArray[k2]\r\n                     array[c+1] = remainderArray[k2]\r\n                 }\r\n                 try{\r\n                     let slot2 = remainderArray[k2][10]\r\n                     if(slot2 == 2){\r\n                         insertedDataElective200_Slot2_2.push(remainderArray[k2])\r\n                     }\r\n                 }catch{}\r\n             k2++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k2 < remainderArray.length){\r\n                 const b = Math.floor(Math.random()*(x+1));\r\n                 array[x] = array[b]\r\n                 array[x+1] = array[b+1]\r\n                 array[b] = remainderArray[k2]\r\n                 array[b+1] = remainderArray[k2]\r\n             }\r\n             try{\r\n                 let slot2 = remainderArray[k2][10]\r\n                 if(slot2 == 2){\r\n                     insertedDataElective200_Slot2_2.push(remainderArray[k2])\r\n                 }\r\n             }catch{}\r\n         k2++   \r\n     }\r\n     }\r\n\r\n     //if there is array in -1, reslot in into the array\r\n     for(let x =0; x<array.length; x++){\r\n         if(array[x] == 0){\r\n             array[x] = 100\r\n         }\r\n     }\r\n\r\n     if(array[-1] != undefined){\r\n         insertedDataElective200_Slot2_1.push(array[-1]);\r\n     }\r\n\r\n    return array;\r\n}\r\nvar AntArrInsElective200 = AntAlgoInsertElective200(AntArrElective200);\r\n\r\n\r\n const slot2Equal1forElective200 = (array) => {\r\n     let k = 0;\r\n     let test2 = []\r\n     \r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100){\r\n                if(k < insertedDataElective200_Slot2_1.length){\r\n                    array[x] = insertedDataElective200_Slot2_1[k];\r\n                }\r\n                k++\r\n         }\r\n     }\r\n\r\n     return array;\r\n }\r\n slot2Equal1forElective200(AntArrElective200);\r\n\r\n\r\n const slot2Equal2forElective200 = (array) => {\r\n     let k = 0;\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < insertedDataElective200_Slot2_2.length){\r\n                     array[x] = insertedDataElective200_Slot2_2[k]\r\n                     array[x+1] = insertedDataElective200_Slot2_2[k]\r\n             }else{\r\n                 if(insertedDataElective200_Slot2_2[k] != undefined){\r\n                     extraDataElective200_Slot2_2.push(insertedDataElective200_Slot2_2[k])\r\n                 }\r\n             }\r\n             k++   \r\n         }\r\n     }\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < extraDataElective200_Slot2_2.length){\r\n                 array[x] = extraDataElective200_Slot2_2[k]\r\n                 array[x+1] = extraDataElective200_Slot2_2[k]\r\n             }\r\n         k++   \r\n         }\r\n     }\r\n     return array;\r\n}\r\n slot2Equal2forElective200(AntArrElective200);\r\n\r\n\r\nlet reshuffleElective200 = []\r\nlet notDupeShuffleElective200 = []\r\nconst checkHC_200_Elective = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let indexArray2 = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n     indexArray = (x * 38)\r\n        try{\r\n         for(let i = 1; i<array.length ; i++){\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        if(array[i][5] == array[i+indexArray][5] ){\r\n                            reshuffleElective200.push([i+indexArray,array[i+indexArray]]);\r\n                         }\r\n                         if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                reshuffleElective200.push([i+indexArray,array[i+indexArray]]);\r\n                            }catch{}\r\n                        }\r\n                    }catch{}\r\n                }    \r\n            }\r\n        }catch{}\r\n    }\r\n    for(let x =0; x < reshuffleElective200.length; x++){\r\n        try{\r\n            if( reshuffleElective200[x][0] != reshuffleElective200[x+1][0]){\r\n            notDupeShuffleElective200.push(reshuffleElective200[x]);\r\n        }\r\n\r\n        }catch{}\r\n\r\n    }\r\n    reshuffleElective200.pop(notDupeShuffleElective200);\r\n\r\n}\r\ncheckHC_200_Elective(AntArrElective200)\r\n\r\nconst reshuffleElective200_200 = (data,array) => {\r\n\r\n    let k = 0\r\n    let count =0\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x =0; x < data.length; x ++){\r\n        for(let i =0; i < array.length ; i++){\r\n            try{\r\n                if(array[i] != undefined){\r\n                    if(data[x][0] == i){\r\n                        array[i] = 0\r\n                        for(let b = 1 ; b<= totalRoom ; b++){\r\n                            if( array[i+38*b]==100){\r\n                                array[i+38*b] = 0\r\n                            }\r\n                            if( array[i-38*b]==100 ){\r\n                                array[i-38*b] = 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }catch{}\r\n        }\r\n\r\n    }\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] == 100){\r\n                    if(k< data.length){\r\n                    count +=1\r\n                    array[i] = data[k][1]\r\n                    }\r\n                    k++\r\n            }\r\n        }\r\n\r\n        for(let x = 0; x< array.length; x++){\r\n            if(array[x] == 0){\r\n                array[x] = 100\r\n            }\r\n        }\r\n        console.log(\"count: \"+ count)\r\n}\r\nreshuffleElective200_200(notDupeShuffleElective200,AntArrElective200);\r\n\r\nconst checkAmountData200_2 = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if(array[i] != 100 && array[i] !=200 && array[i] != 0 && array[i] != undefined){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\nvar checkAmount_2 = checkAmountData200_2(AntArrInsElective200)\r\nconsole.log(AntArrInsElective200)\r\nconsole.log(\"Amount of data: \"+checkAmount_2);\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n\r\nconst array1DElective500 = (data) => {\r\n    var result = []\r\n\r\n    for(let i = 0; i< data; i++){\r\n        result[i]= 100;\r\n    }\r\n    return result;\r\n}\r\nvar AntArrElective500 = array1DElective500(DataArrayElective500);\r\n\r\nlet extraDataElective500_Slot2_2 = []\r\nlet extraData500Elective_Slot2_1 = []\r\nlet insertedDataElective500_Slot2_2 = []\r\nlet insertedDataElective500_Slot2_1= []\r\n\r\nconst AntAlgoInsertElective500 = (array) => {\r\n    let test = []\r\n    let k = 0;\r\n    let k2 =0\r\n    let k3 =0\r\n    let k4 =0 \r\n\r\n    let remainderArray = []\r\n    let remainderArraySlot1 = []\r\n    let remainderArray3 = []\r\n\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x=0; x<filterDataElective500.length;x++){\r\n        test.push(filterDataElective500[x]);\r\n    }\r\n\r\n     for(let i = array.length-1;i>0;i--){\r\n         if(k < test.length){\r\n         let hourMS = test[k][7]\r\n         let slot1 = test[k][9]\r\n         let slot2 = test[k][10]\r\n\r\n         if(hourMS == 3){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100 && array[i-1] == 100 && array[i+1]==100){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                }\r\n                 else{\r\n                    remainderArray3.push(test[k]);    \r\n                }\r\n             }\r\n\r\n          else if(hourMS == 2){\r\n             const j = Math.floor(Math.random()*(i+1));\r\n             if(array[i] == 100){\r\n                 if(array[i-1] == 100 ){\r\n                     array[i] = array[j];\r\n                     array[i-1] = array[j-1];\r\n                     array[j] = test[k];\r\n                     array[j-1] = test[k];\r\n                     \r\n                 }else if(array[i+1] == 100){\r\n                     array[i] = array[j];\r\n                     array[i+1] = array[j+1];\r\n                     array[j] = test[k];\r\n                     array[j+1] = test[k];\r\n                     \r\n                 }\r\n                 else{\r\n                     remainderArray.push(test[k]);\r\n                     \r\n                 }\r\n             }else{\r\n                 remainderArray.push(test[k]);\r\n             }\r\n             }\r\n\r\n            else if(hourMS == 4){\r\n                const j = Math.floor(Math.random()*(i+1));\r\n                if(array[i] == 100){\r\n                    //slot in slot1 = 2\r\n                    if(array[i-1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i-1] = array[j-1];\r\n                        array[j] = test[k];\r\n                        array[j-1] = test[k];\r\n                        \r\n                        // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const z = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[z];\r\n                                array[i-1] = array[z-1];\r\n                                array[i] = test[k];\r\n                                array[i-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100 ){\r\n                                 array[i] = array[z];\r\n                                 array[i+1] = array[z+1];\r\n                                 array[z] = test[k];\r\n                                 array[z+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    //slot in slot1 = 2\r\n                    else if(array[i+1] == 100 ){\r\n                        array[i] = array[j];\r\n                        array[i+1] = array[j+1];\r\n                        array[j] = test[k];\r\n                        array[j+1] = test[k];\r\n                        \r\n                         // make stack become 0\r\n                        for(let b = 1; b <= totalRoom; b++){\r\n                         if( array[j+38*b]==100 && array[j+38*b-1]==100){\r\n                             array[j+38*b] = 0         \r\n                             array[j+38*b-1] = 0\r\n                         }\r\n                         if( array[j-38*b]==100 && array[j-38*b-1]==100){\r\n                             array[j-38*b] = 0         \r\n                             array[j-38*b-1] = 0\r\n                         }\r\n                        }\r\n                        const v = Math.floor(Math.random()*(i+1));\r\n                        if(array[i] == 100){\r\n                            //slot in slot1 = 2\r\n                            if(array[i-1] == 100 ){\r\n                                array[i] = array[v];\r\n                                array[i-1] = array[v-1];\r\n                                array[v] = test[k];\r\n                                array[v-1] = test[k];\r\n                            }\r\n                            else if(array[i+1] == 100){\r\n                                 array[i] = array[v];\r\n                                 array[i+1] = array[v+1];\r\n                                 array[v] = test[k];\r\n                                 array[v+1] = test[k];\r\n                            }\r\n                            else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                             }\r\n                         }\r\n                         else{\r\n                             remainderArraySlot1.push(test[k]);\r\n                         }\r\n                         //revert back to 100\r\n                         for(let x =0; x<array.length; x++){\r\n                             if(array[x] == 0){\r\n                                 array[x] = 100\r\n                             }\r\n                         }\r\n                    }\r\n                    else{\r\n                        remainderArray.push(test[k]);\r\n                    }\r\n                }else{\r\n                    remainderArray.push(test[k]);\r\n                    \r\n                }\r\n             }\r\n         }\r\n         k++  \r\n     }\r\n\r\n\r\n     for(let z =0; z< array.length; z++){\r\n         for(let x = 0; x < remainderArraySlot1.length; x++){\r\n             if(array[z] == remainderArraySlot1[x]){\r\n                 for(let b = 1; b <= totalRoom; b++){\r\n                     if( array[z+38*b]==100 && array[z+38*b-1]==100){\r\n                         array[z+38*b] = 0         \r\n                         array[z+38*b-1] = 0\r\n                     }\r\n                     if( array[z-38*b]==100 && array[z-38*b-1]==100){\r\n                         array[z-38*b] = 0         \r\n                         array[z-38*b-1] = 0\r\n                     }\r\n                    }\r\n             }\r\n         }\r\n     }\r\n\r\n     //slot in 3\r\n     for(let i = 0; i < array.length; i++){\r\n        if(array[i] == 100 && array[i+1] == 100 && array[i+2]==100){\r\n                if(k4 < remainderArray3.length){\r\n                    array[i] = remainderArray3[k4];\r\n                    array[i+1] = remainderArray3[k4];\r\n                    array[i+2] = remainderArray3[k4];\r\n                }\r\n                k4++\r\n        }\r\n     }\r\n\r\n     //fullfill the slot 3\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] == 100){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective500_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k3 < remainderArraySlot1.length){\r\n                 const q = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[q]\r\n                     array[x+1] = array[q+1]\r\n                     array[q] = remainderArraySlot1[k3]\r\n                     array[q+1] = remainderArraySlot1[k3]\r\n             }else{\r\n                 if(remainderArraySlot1[k3] != undefined){\r\n                     insertedDataElective500_Slot2_2.push(remainderArraySlot1[k3])\r\n                 }\r\n             }\r\n             k3++   \r\n         }\r\n     }\r\n\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n             if(array[x] == 100 && array[x+1] ==100 ){\r\n                 if(k2 < remainderArray.length){\r\n                     const c = Math.floor(Math.random()*(x+1));\r\n                     array[x] = array[c]\r\n                     array[x+1] = array[c+1]\r\n                     array[c] = remainderArray[k2]\r\n                     array[c+1] = remainderArray[k2]\r\n                 }\r\n                 try{\r\n                     let slot2 = remainderArray[k2][10]\r\n                     if(slot2 == 2){\r\n                         insertedDataElective500_Slot2_2.push(remainderArray[k2])\r\n                     }\r\n                 }catch{}\r\n             k2++   \r\n         }else if(array[x] == 100 && array[x+1] ==100 ){\r\n             if(k2 < remainderArray.length){\r\n                 const b = Math.floor(Math.random()*(x+1));\r\n                 array[x] = array[b]\r\n                 array[x+1] = array[b+1]\r\n                 array[b] = remainderArray[k2]\r\n                 array[b+1] = remainderArray[k2]\r\n             }\r\n             try{\r\n                 let slot2 = remainderArray[k2][10]\r\n                 if(slot2 == 2){\r\n                     insertedDataElective500_Slot2_2.push(remainderArray[k2])\r\n                 }\r\n             }catch{}\r\n         k2++   \r\n     }\r\n     }\r\n\r\n     //if there is array in -1, reslot in into the array\r\n     for(let x =0; x<array.length; x++){\r\n         if(array[x] == 0){\r\n             array[x] = 100\r\n         }\r\n     }\r\n\r\n     if(array[-1] != undefined){\r\n         insertedDataElective500_Slot2_1.push(array[-1]);\r\n     }\r\n\r\n    return array;\r\n}\r\nvar AntArrInsElective500 = AntAlgoInsertElective500(AntArrElective500);\r\n\r\n\r\n const slot2Equal1forElective500 = (array) => {\r\n     let k = 0;\r\n     let test2 = []\r\n     \r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100){\r\n                if(k < insertedDataElective500_Slot2_1.length){\r\n                    array[x] = insertedDataElective500_Slot2_1[k];\r\n                }\r\n                k++\r\n         }\r\n     }\r\n\r\n     return array;\r\n }\r\n slot2Equal1forElective500(AntArrElective500);\r\n\r\n\r\n const slot2Equal2forElective500 = (array) => {\r\n     let k = 0;\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < insertedDataElective500_Slot2_2.length){\r\n                     array[x] = insertedDataElective500_Slot2_2[k]\r\n                     array[x+1] = insertedDataElective500_Slot2_2[k]\r\n             }else{\r\n                 if(insertedDataElective500_Slot2_2[k] != undefined){\r\n                     extraDataElective500_Slot2_2.push(insertedDataElective500_Slot2_2[k])\r\n                 }\r\n             }\r\n             k++   \r\n         }\r\n     }\r\n\r\n     for(let x = 0; x< array.length; x++){\r\n         if(array[x] == 100 && array[x+1] ==100){\r\n             if(k < extraDataElective500_Slot2_2.length){\r\n                 array[x] = extraDataElective500_Slot2_2[k]\r\n                 array[x+1] = extraDataElective500_Slot2_2[k]\r\n             }\r\n         k++   \r\n         }\r\n     }\r\n     return array;\r\n}\r\n slot2Equal2forElective500(AntArrElective500);\r\n\r\n\r\nlet reshuffleElective500 = []\r\nlet notDupeShuffleElective500 = []\r\nconst checkHC_500_Elective = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let indexArray2 = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n     indexArray = (x * 38)\r\n        try{\r\n         for(let i = 1; i<array.length ; i++){\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        if(array[i][5] == array[i+indexArray][5] ){\r\n                            reshuffleElective500.push([i+indexArray,array[i+indexArray]]);\r\n                         }\r\n                         if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                            try{\r\n                                reshuffleElective500.push([i+indexArray,array[i+indexArray]]);\r\n                            }catch{}\r\n                        }\r\n                    }catch{}\r\n                }    \r\n            }\r\n        }catch{}\r\n    }\r\n    for(let x =0; x < reshuffleElective500.length; x++){\r\n        try{\r\n            if( reshuffleElective500[x][0] != reshuffleElective500[x+1][0]){\r\n            notDupeShuffleElective500.push(reshuffleElective500[x]);\r\n        }\r\n\r\n        }catch{}\r\n\r\n    }\r\n    reshuffleElective500.pop(notDupeShuffleElective500);\r\n\r\n}\r\ncheckHC_500_Elective(AntArrElective500)\r\n\r\nconst reshuffleElective500_500 = (data,array) => {\r\n\r\n    let k = 0\r\n    let count =0\r\n    let totalRoom = array.length / 38\r\n\r\n    for(let x =0; x < data.length; x ++){\r\n        for(let i =0; i < array.length ; i++){\r\n            try{\r\n                if(array[i] != undefined){\r\n                    if(data[x][0] == i){\r\n                        array[i] = 0\r\n                        for(let b = 1 ; b<= totalRoom ; b++){\r\n                            if( array[i+38*b]==100){\r\n                                array[i+38*b] = 0\r\n                            }\r\n                            if( array[i-38*b]==100 ){\r\n                                array[i-38*b] = 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }catch{}\r\n        }\r\n\r\n    }\r\n        for(let i = 0; i < array.length; i++){\r\n                if(array[i] == 100){\r\n                    if(k< data.length){\r\n                    count +=1\r\n                    array[i] = data[k][1]\r\n                    }\r\n                    k++\r\n            }\r\n        }\r\n\r\n        for(let x = 0; x< array.length; x++){\r\n            if(array[x] == 0){\r\n                array[x] = 100\r\n            }\r\n        }\r\n        console.log(\"count: \"+ count)\r\n}\r\nreshuffleElective500_500(notDupeShuffleElective500,AntArrElective500);\r\n\r\nconst checkAmountData500_2 = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if(array[i] != 100 && array[i] !=500 && array[i] != 0 && array[i] != undefined){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\nvar checkAmount_2 = checkAmountData500_2(AntArrInsElective500)\r\nconsole.log(AntArrInsElective500)\r\nconsole.log(\"Amount of data: \"+checkAmount_2);\r\n\r\nconst checkAmountDataCombine_2 = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if(array[i] != 100 && array[i] !=100 && array[i] != 0 && array[i] != undefined && array[i] != 1){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\nvar checkAmount_combine = checkAmountDataCombine_2(AntArrCombine)\r\n// console.log(AntArrCombine)\r\n// console.log(\"Amount of data: \" +checkAmount_combine);\r\n\r\nconst checkAmountDataCombine = (array) => {\r\n    let count = 0\r\n    for(let i = 0; i < array.length; i++){\r\n            if( array[i] == 0 ){\r\n                count += 1\r\n            }\r\n    }\r\n    return count\r\n}\r\n //var checkAmount_0 = checkAmountData100_0(AntArr100)\r\n var checkAmount_combineData = checkAmountDataCombine(AntArrCombine)\r\n//console.log(\"zero counter: \"+checkAmount_combineData);\r\n\r\n//console.log(dataCombine)\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------\r\n// Hard Constraint \r\n// H1: No student attend more than one class/ event at the same time\r\n// H2: The room is large enough to accomodate all of the student in attendace while also meeting the requirement \r\n// H3: At any given time, each room can onle have one course booked\r\n// H4: No student attend class during 12:00 pm -2:00 due to solat jumaat\r\n// H5: One teacher can only teach one class at one time.\r\n\r\n//Check for the H1 violation: same group attend more than 1 class at 1 time\r\n\r\nconst check1Group = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n        indexArray = (x * 38)\r\n    }\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n        try{\r\n            //for(let x= 1 ; x <= totalRoom ; x++){\r\n             for(let i = 0; i<array.length ; i++){\r\n                indexArray = (x * 37)\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined  && array[i+indexArray] != 1 && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        //if(array[i][6] == array[i+indexArray][6] && array[i+1][6] == array[i+indexArray+1][6] && array[i][5] == array[i+indexArray][5] && array[i+1][5] == array[i+indexArray+1][5]){\r\n                        if(array[i][6] == array[i+indexArray][6] && array[i][5] == array[i+indexArray][5]){\r\n                             try{\r\n                                 // console.log(i)\r\n                                 // console.log(i+indexArray)\r\n                                 count +=1\r\n                             }catch{}\r\n                        }\r\n                    }catch{}\r\n                }   \r\n            }\r\n        }catch{}\r\n    }\r\n    return count\r\n \r\n }\r\n \r\n var checkH1_ALL = check1Group(AntArrCombine)\r\n //console.log(\"HC1 Counter: \"+checkH1_ALL);\r\n //var checkH1_ALLElective = check1Group(dataCombineElective)\r\n \r\n \r\n \r\n \r\n \r\n //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\r\n \r\n const checkRoomQuota = (array) => {\r\n    let count = 0\r\n    return count \r\n }\r\n //var checkH2_ALL = checkRoomQuota(dataCombine)\r\n //var checkH2_ALLElective = checkRoomQuota(dataCombineElective)\r\n \r\n \r\n //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\r\n const checkSolatJummat = (array) => {\r\n    let count = 0\r\n    return count \r\n }\r\n //var checkH4_ALL = checkSolatJummat(dataCombine)\r\n //var checkH4_ALLElective = checkSolatJummat(dataCombineElective)\r\n \r\n //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\r\n \r\n const check1Teacher = (array) => {\r\n    let count =0\r\n    let indexArray = 0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n     indexArray = (x * 38)\r\n        try{\r\n         for(let i = 1; i<array.length ; i++){\r\n                if(array[i+indexArray] != 100 && array[i+indexArray] != undefined && array[i+indexArray] != 1 && array[i+indexArray] != 0 ){\r\n                    try{\r\n                        if(array[i][5] == array[i+indexArray][5]){\r\n                         //    console.log(i)\r\n                         //    console.log(i+indexArray)\r\n                            count +=1\r\n                         }\r\n                    }catch{}\r\n                }    \r\n            }\r\n        }catch{}\r\n    }\r\n    return count\r\n \r\n \r\n }\r\n var checkH5_ALL = check1Teacher(AntArrCombine)\r\n //console.log(\"HC5 Counter: \"+checkH5_ALL)\r\n //var checkH5_ALLElective = check1Group(dataCombineElective)\r\n \r\n const checkHC = (data1,data2) => {\r\n     let count =0;\r\n     if(data1 != 0){\r\n         count +=1\r\n     }\r\n     if(data2 != 0){\r\n         count +=1\r\n     }\r\n \r\n     return count;\r\n }\r\n let checkTotalHardContraints = checkHC(checkH5_ALL,checkH1_ALL)\r\n console.log(\"Total Hard Constraint: \"+checkTotalHardContraints)\r\n \r\n \r\n //----------------------------------------------------------------------------------------------------------------------------------------\r\n \r\n \r\n // Soft Constraint \r\n // S1: A student has a class schedule toward the end of the day\r\n // S2: A student have more than two class in a row\r\n \r\n \r\n //Check for the S1 violation: student have class at the end of the day\r\n const checkEndOfClass = (array) => {\r\n    let count =0\r\n    let totalRoom = array.length / 38\r\n    for(let x= 1 ; x <= totalRoom ; x++){\r\n        let indexArray = (x * 37)\r\n        if(array[indexArray] != 100 ){\r\n            count = 1\r\n        }\r\n    }\r\n    return count\r\n \r\n }\r\n  var checkSC1_ALL = checkEndOfClass(AntArrCombine)\r\n \r\n \r\n \r\n //Check for the S2 violation: teacher have 2 class in a row\r\n \r\n const check2ClassInARow = (array) => {\r\n    let count =0\r\n    for(let i = 0; i < array.length; i++){\r\n        try{\r\n         if(array[i][5] != undefined && array[i+3][5] != undefined && array[i+2][5] != undefined && array[i+4][5] != undefined){\r\n             if(array[i][5] == array[i+3][5] && array[i+2][5] == array[i+4][5]){\r\n                 count = 1\r\n             }\r\n        }\r\n        }catch{}\r\n    }\r\n    return count\r\n \r\n }\r\n var checkSC2_ALL = checkEndOfClass(AntArrCombine)\r\n \r\n \r\n //----------------------------------------------------------------------------------------------------------------------------------------------\r\n \r\n //-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n \r\n \r\n \r\n //----------------------------------------------------------------------------------------------------------------------------------------\r\n \r\n \r\n \r\n \r\n //-----------------------------------------------------------------------------------------------------------------------------------------------\r\n \r\n const checkTotalSoftContraint = () => {\r\n     let count =0\r\n     let totalSC = checkSC1_ALL + checkSC2_ALL\r\n     \r\n     if(totalSC != 0){\r\n         count +=1\r\n     }\r\n     return count\r\n }\r\n var checkTotalSoftContraints = checkTotalSoftContraint()\r\n console.log(\"Total Soft Constraint: \"+checkTotalSoftContraints)\r\n //----------------------------------------------------------------------------------------------------------------------------------------------\r\n \r\n const change100ToEmptyElective = (data) => {\r\n     for(let i = 0; i< data.length; i++){\r\n         if(data[i] == 100){\r\n             data[i] = [];\r\n         }\r\n     }\r\n     return data;\r\n }\r\n let finalDataElective = change100ToEmptyElective(AntArrCombine)\r\n \r\n \r\n checkTotalHardContraintsAll = checkTotalHardContraints\r\n checkTotalSoftContraintsAll = checkTotalSoftContraints\r\n finalDataAllElective.push(finalDataElective)\r\n return {checkTotalHardContraints,checkTotalSoftContraints,finalDataAllElective}\r\n\r\n//___________________________________________________________________________________________________________________________________\r\n}\r\n\r\nlet trigger = 0\r\nvar t0 = performance.now()\r\nconst iteration = () => {\r\n        //antSystem()\r\n        let globalBestHS = checkTotalHardContraintsAll \r\n        let globalBestSS = checkTotalSoftContraintsAll\r\n        let globalBestScehdule = finalDataAllElective[0]\r\n    for(let i= 1; i <= 1; i++){\r\n        antSystem()\r\n        let localBestHS = checkTotalHardContraintsAll \r\n        let localBestSS = checkTotalSoftContraintsAll\r\n        let localBestScehdule = finalDataAllElective[0]\r\n            console.log(\"iteraion: \" + i)\r\n            if(globalBestHS > localBestHS ){\r\n                globalBestHS = localBestHS\r\n                globalBestSS = localBestSS\r\n                globalBestScehdule = localBestScehdule\r\n            }\r\n            if(localBestHS == 0){\r\n                console.log(\"iteraion: \" + i)\r\n                console.log(\"workable solution is found\")\r\n                globalBestHS = localBestHS\r\n                globalBestSS = localBestSS\r\n                globalBestScehdule = localBestScehdule\r\n                console.log(\"Workable Gloabal best HS: \"+globalBestHS)\r\n                console.log(\"Workable Gloabal best SS: \" +globalBestSS)\r\n                //console.log(finalDataAll[0])\r\n                trigger = 1\r\n                return [finalDataAllElective[0]]\r\n            }\r\n            else if(localBestHS == 0 && localBestSS == 0){\r\n                console.log(\"iteraion: \" + i)\r\n                console.log(\"perfect solution is found\")\r\n                globalBestHS = localBestHS\r\n                globalBestSS = localBestSS\r\n                globalBestScehdule = localBestScehdule\r\n                console.log(\"Perfect Gloabal best HS: \"+globalBestHS)\r\n                console.log(\"Perfect Gloabal best SS: \" +globalBestSS)\r\n                console.log(finalDataAll[0])\r\n                trigger = 1\r\n                return [finalDataAllElective[0]]\r\n            }\r\n    }\r\n    return [finalDataAllElective[0]]\r\n}\r\nlet interations = iteration()\r\n\r\nlet presentableDataElective = []\r\n\r\nif(trigger == 1){\r\n//shot course code, course name and lecturer\r\nconsole.log(data);    \r\nconst changeToPresentationData = (data) => {\r\n    for(let i= 0; i <= data[0].length; i++){\r\n        try {\r\n            presentableDataElective.push([data[1][i][1],data[1][i][2],data[1][i][5]])\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n}\r\nchangeToPresentationData(interations)\r\n\r\n\r\nlet allRoomName = []\r\nfor(let i = 0; i < roomData[0].length; i++){\r\n    allRoomName.push(roomData[0][i][0])\r\n}\r\nallRoomName.unshift(\"Room\");\r\nif(allRoomName.pop() == undefined){\r\n}\r\n\r\n\r\nlet wed = ['Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday','Wednesday']\r\n\r\nconst create2dArrayElective = (weekdayArray,partDay,arrayAll, partAll) => {\r\n    var tmp = [];\r\n\r\n    for(var i = 0; i < weekdayArray.length; i += partDay) {\r\n        tmp.push(weekdayArray.slice(i, i + partDay));\r\n    }\r\n    for(var i = 0; i < arrayAll.length; i += partAll) {\r\n        tmp.push(arrayAll.slice(i, i + partAll));\r\n    }\r\n    return tmp;\r\n}\r\nlet datasetElective = create2dArrayElective(wed,10,presentableDataElective,10);\r\nconsole.log(datasetElective)\r\n//console.log(dataset)\r\n\r\nconst insertRoomNameElective = (roomData,array) => {\r\n    for(let i= 0; i<array.length; i++){\r\n        array[i].unshift(roomData[i]);\r\n    }\r\n    return array;\r\n}\r\n\r\ninsertRoomNameElective(allRoomName,datasetElective)\r\n\r\n\r\n  /** Convert a 2D array into a CSV string\r\n   * elective\r\n */\r\n   function arrayToCsvElective(data){\r\n    //console.log(data)\r\n    return data.map(row =>\r\n      row\r\n      .map(String)  // convert every value to String\r\n      .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\r\n      .map(v => `\"${v}\"`)  // quote it\r\n      .join(',')  // comma-separated\r\n    ).join('\\r\\n');  // rows starting on new lines\r\n  }\r\n\r\nlet csvElective = arrayToCsvElective(\r\n    datasetElective\r\n);\r\n\r\nfunction downloadBlobElective(content, filename, contentType) {\r\n    // Create a blob\r\n    var blob = new Blob([content], { type: contentType });\r\n    var url = URL.createObjectURL(blob);\r\n  \r\n    // Create a link to download it\r\n    var pom = document.createElement('a');\r\n    pom.href = url;\r\n    pom.setAttribute('download', filename);\r\n    pom.click();\r\n  }\r\n\r\n    var t1 = performance.now()\r\n    console.log(\"Duration: \" + (t1-t0))\r\n  downloadBlobElective(csvElective, 'ModifiedAntSystemElective_GeneratedSchedule.csv', 'text/csv;charset=utf-8;')\r\n}else{\r\n    var t1 = performance.now()\r\n    console.log(\"Duration: \" + (t1-t0) + \" milliseconds\" )\r\n    alert(\"no workable solution found, please refersh until get workable solution\")\r\n}\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                <h1>\r\n                    Generate Schedule Page Elective\r\n                </h1>\r\n        \r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    export default ArrayScheduleElective;"]},"metadata":{},"sourceType":"module"}