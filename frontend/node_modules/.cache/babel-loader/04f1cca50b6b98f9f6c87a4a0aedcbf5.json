{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\UploadPage\\\\UploadFile.js\";\nimport React, { useCallback, useState } from \"react\";\nimport { parse } from \"papaparse\";\nimport { useDropzone } from 'react-dropzone'; //import ErrorModal from '../../components/Modal/ErrorModal';\n\nimport LoadingSpinner from '../../components/Modal/LoadingSpinner';\nimport './UploadFile.css';\n\nconst UploadFile = () => {\n  const [Filename, setFileName] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); //const [error, setError] = useState();\n\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = async () => {\n        setFileName(existing => [...existing, file.name]); //console.log(setFileName);\n        // Do whatever you want with the file contents\n\n        const binaryStr = parse(reader.result, {\n          header: true,\n          blackrows: false\n        });\n        let test = JSON.stringify(binaryStr.data);\n\n        try {\n          setIsLoading(true); //const response = await fetch('http://localhost:5000/api/uploadFile/', {\n\n          const response = await fetch('http://localhost:5000/api/uploadFile/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              Dataset: binaryStr\n            })\n          }); //const  responsedata = await response.json();\n\n          const responsedata = await response.json();\n          console.log(responsedata);\n          setIsLoading(false);\n        } catch (err) {\n          setIsLoading(false);\n          console.log(err); //setError(err.message  || 'Something went wrong');\n        } //console.log(binaryStr.data)\n\n      }; //reader.readAsArrayBuffer(file)\n\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    className: \"upload-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), Filename.map(Dataset => /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, Dataset)), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    accept: \".csv\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  })), isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), isDragActive ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Drop the files here ...\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Drag and drop some files here, or click to select files\"));\n};\n\nexport default UploadFile;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/UploadPage/UploadFile.js"],"names":["React","useCallback","useState","parse","useDropzone","LoadingSpinner","UploadFile","Filename","setFileName","isLoading","setIsLoading","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","existing","name","binaryStr","result","header","blackrows","test","JSON","stringify","data","response","fetch","method","headers","body","Dataset","responsedata","json","err","readAsText","getRootProps","getInputProps","isDragActive","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useState} from \"react\";\r\nimport {parse} from \"papaparse\";\r\nimport {useDropzone} from 'react-dropzone';\r\n//import ErrorModal from '../../components/Modal/ErrorModal';\r\nimport LoadingSpinner from '../../components/Modal/LoadingSpinner';\r\n\r\nimport './UploadFile.css';\r\n\r\nconst UploadFile =  () => {\r\n\r\n  const [Filename,setFileName] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  //const [error, setError] = useState();\r\n\r\n  const onDrop = useCallback( acceptedFiles => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = async () => {\r\n        setFileName((existing)=> [...existing, file.name])\r\n        //console.log(setFileName);\r\n      // Do whatever you want with the file contents\r\n        const binaryStr = parse(reader.result,{header:true,blackrows: false});\r\n        let test = JSON.stringify(binaryStr.data);\r\n        try {\r\n          setIsLoading(true);\r\n          //const response = await fetch('http://localhost:5000/api/uploadFile/', {\r\n          const response = await fetch('http://localhost:5000/api/uploadFile/', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              Dataset: binaryStr\r\n            })\r\n          });\r\n          //const  responsedata = await response.json();\r\n          const responsedata = await response.json();\r\n          console.log(responsedata);\r\n          setIsLoading(false);\r\n        }catch(err){\r\n          setIsLoading(false);\r\n          console.log(err);\r\n          //setError(err.message  || 'Something went wrong');\r\n        }\r\n        //console.log(binaryStr.data)\r\n      }\r\n      //reader.readAsArrayBuffer(file)\r\n      reader.readAsText(file)\r\n    })\r\n    \r\n  }, [])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n  return (\r\n    <div {...getRootProps()} className=\"upload-file\">\r\n      {Filename.map((Dataset)=>(\r\n        <h2>{Dataset}</h2>\r\n      ))}\r\n      <input {...getInputProps()} accept=\".csv\" multiple/>\r\n      {isLoading && <LoadingSpinner asOverlay />}\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag and drop some files here, or click to select files</p>\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default UploadFile;"]},"metadata":{},"sourceType":"module"}