{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\n        //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\n        // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]); // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    } // console.log(roomName);\n    // console.log(roomSize);\n    // function courseExtract(array){\n    //     let courseArray = []\n    //     for(let i = 0; i <array.length; i++){\n    //         //courseArray = array[i];\n    //         //console.log(courseArray);\n    //     }\n    //     return courseArray;\n    // }\n    // courseExtract([courseData[0]]);\n\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item)); //console.log(notDuplicatesRoom);            \n    // const insertData = (array) => {\n    //     for(let j =0; j < notDuplicatesRoom.length; j++){\n    //         //console.log(notDuplicatesRoom[j]);\n    //     function checkAdult(age) {\n    //         //console.log(age)\n    //         return age <= 40;\n    //       }\n    //     filterData.push(array.filter(checkAdult));\n    //     }\n    // }\n    // const insertData = (array) => {\n    // function checkRoomSize(size) {\n    //         //console.log(age)\n    //         return size <= 40;\n    //       }\n    //     filterData.push(array.filter(checkRoomSize));\n    //     console.log(filterData);\n    //     }\n    // const filterQuotaData = (array) => {\n    //     function checkRoomSize(size) {\n    //             //console.log(age)\n    //             return size <= 40;\n    //           }\n    //         filterData.push(array.filter(checkRoomSize));\n    //     }\n    // for (let i = 0; i < courseData[0].length; i++) {\n    //         if (courseData[0][i][0] <= 40) {\n    //             filterData.push(courseData[0][i][1]);\n    //         }\n    // }\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      // if (courseData[0][i][0] > 150) {\n      for (let j = 0; j < courseData[0][i][7]; j++) {\n        filterData.push(courseData[0][i]);\n      } // }\n      //filterData.push(courseData[0][i]);\n\n    } //console.log(filterData);\n\n\n    const create2dArray = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData.length; x++) {\n        test.push(filterData[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = []; //result[i][0] = roomData[0][i];\n          //console.log(roomData[0][i]);\n          // result[i][45] = ['Solat Jumaat'];\n          // result[i][46] = ['Solat Jumaat'];\n          // if(test[k][0] <= result[i][0][1] && result[i][j].length == 0){\n\n          if (result[i][j].length == 0) {\n            //console.log(test[k][0]);\n            if (k < test.length) {\n              //const data = test[k];\n              //result[i][j] = data ? [data] : [] ;\n              result[i][j] = [test[k]]; // console.log(test.length);\n            } else {\n              result[i][j] = [];\n            }\n\n            k++;\n          } else {\n            result[i][j] = [];\n          } //console.log(roomSz);\n          // if(result[i][0][1] >  && result[i][j].length == 0){\n          //     const roomSz = test2;\n          //     if(k < test.length) {\n          //         const data = test[k];\n          //         result[i][j] = data ? [data] : [];\n          //         // result[i][j] = data[Math.floor(Math.random())];\n          //         } else {\n          //            result[i][j] = [];\n          //         }\n          //         k++\n          // }else{\n          //     result[i][j] = [];\n          // }\n          // q++\n\n        }\n      }\n\n      return result;\n    }; //console.log(filterData);\n\n\n    let Column = roomData[0].length;\n    let Row = 50; // filterQuotaData(EnrollmentQuota);\n\n    var ground = create2dArray(Column, Row); //console.log(ground);\n\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        for (let x = array[i].length - 1; x > 0; x--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const q = Math.floor(Math.random() * (x + 1));\n          const temp = array[i][x];\n          array[i][x] = array[j][q];\n          array[j][q] = temp; // if(array[i][j][0] != undefined){\n          //     console.log(array[i][j][0][7]); \n          // }\n          // const temp = array[i];\n          // array[i] = array[j];\n          // array[j] = temp;\n        }\n      }\n\n      return array;\n    };\n\n    var shuffleArr = shuffleArray(ground);\n    console.log(shuffleArr);\n\n    const checkViolateHardCont = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          if (array[i][j][0] != undefined) {// if(array[i][0][0][0] <= room[0][0][1] ){\n            //     console.log(array[i][0][0]); \n            //     console.log(array[i][0][0][0]); \n            //     //console.log(\"room:\"+ room[0][0][1]);\n            //     //console.log(\"array\"+ array[i][0][0][0]);\n            //     //console.log(true);\n            //  }else{\n            //      //console.log(false);\n            //      //console.log(\"array: \"+ array[i][0][0][0]);\n            //      count += 1;\n            // }\n            // console.log(array[i][j][0][6]);\n          } //console.log(array[i][j][0][0])\n\n        }\n\n        if (array[i][45].length == 1 || array[i][46].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    };\n\n    const sameGroup = array => {\n      let x = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let k = i + 1; k < array.length; k++) {\n          // for(let j = 0; j < array[i].length; j++){\n          //     for(let q = 0; q < array[k].length; q++){\n          if (array[i][0][0] != undefined && array[k][0][0] != undefined) {\n            if (array[i][0][0][6] != undefined && array[k][0][0][6] != undefined) {\n              if (array[i][0][0][6] != array[k][0][0][6]) {\n                console.log(\"i:\" + array[i][0][0][6]);\n                console.log(\"k:\" + array[k][0][0][6]);\n              }\n            }\n          } //}\n          //}\n\n        }\n      }\n    };\n\n    sameGroup(shuffleArr); //console.log('Hard Constraint Violated: '+checkHardCons);\n\n    var checkHardCons = checkViolateHardCont(shuffleArr);\n    console.log('Hard Constraint Violated: ' + checkHardCons); // const checktest = (array) => {\n    //     for(let i=0;i< array.length; i++){\n    //         for(let j = 0; j< roomData[0].length; j++){\n    //         }\n    //         if(array[i] != undefined){\n    //             //console.log(array[0]);\n    //             //console.log(array[i][0][0][0]);\n    //             //console.log(roomData[0][0][1]);\n    //             for(let x = 0; x < array[0].length; x++){\n    //                 if(array[0][x][0] != undefined){\n    //                     //console.log(array[0][x][0][0]);\n    //                     if(array[0][x][0][0] <= roomData[0][i][1] ){\n    //                         //console.log(array[0][x][0])\n    //                         console.log(true)\n    //                     }else{\n    //                         console.log(false)\n    //                     }\n    //                 }\n    //                 // if(array[0][x] == roomData[0][i][1]){\n    //                 //     console.log(array[0]);\n    //                 //     console.log(roomData[0][0][1]);\n    //                 // }else{\n    //                 //     return false;\n    //                 // }\n    //             }\n    //             }\n    //     }\n    // }\n    // var checktestz = checktest(shuffleArr);\n    // console.log('Hard Constraint Violated: '+checktestz);\n\n    const checkViolateSoftCont = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {}\n\n        if (array[i][49].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    };\n\n    var checkSoftCons = checkViolateSoftCont(shuffleArr);\n    console.log('Soft Constraint Violated: ' + checkSoftCons); // const iteration = (data) => {\n    //     for(let i = 0 ; i < 5 ; i++){\n    //         var iter = data;\n    //         console.log(iter);\n    //     }\n    //     return data\n    // };\n    // iteration(shuffleArr);\n    //let z = 0\n    // while (z < 5) {\n    //     var shuffleArr = shuffleArray(ground)\n    //     console.log(shuffleArr);\n    //     z++;\n    //   }\n    //console.log(HMS);\n    //console.log(courseData)\n  }\n\n  const checkViolateHardCont = () => {};\n\n  const checkViolateSoftCont = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["find","forEach","indexOf","React","useEffect","useState","useContext","useParams","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","roomName","roomSize","filterData","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","j","create2dArray","row","column","result","test","k","x","Column","Row","ground","shuffleArray","Math","floor","random","q","temp","shuffleArr","checkViolateHardCont","count","undefined","sameGroup","checkHardCons","checkViolateSoftCont","checkSoftCons"],"mappings":"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","sourcesContent":["import { find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\r\n            //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n            // console.log(roomName);\r\n            // console.log(roomSize);\r\n            \r\n\r\n            // function courseExtract(array){\r\n            //     let courseArray = []\r\n            //     for(let i = 0; i <array.length; i++){\r\n            //         //courseArray = array[i];\r\n            //         //console.log(courseArray);\r\n            //     }\r\n            //     return courseArray;\r\n            // }\r\n\r\n            // courseExtract([courseData[0]]);\r\n\r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n            //console.log(notDuplicatesRoom);            \r\n\r\n            // const insertData = (array) => {\r\n            //     for(let j =0; j < notDuplicatesRoom.length; j++){\r\n            //         //console.log(notDuplicatesRoom[j]);\r\n            //     function checkAdult(age) {\r\n            //         //console.log(age)\r\n            //         return age <= 40;\r\n            //       }\r\n            //     filterData.push(array.filter(checkAdult));\r\n            //     }\r\n            // }\r\n            // const insertData = (array) => {\r\n            // function checkRoomSize(size) {\r\n            //         //console.log(age)\r\n            //         return size <= 40;\r\n            //       }\r\n            //     filterData.push(array.filter(checkRoomSize));\r\n            //     console.log(filterData);\r\n            //     }\r\n\r\n            // const filterQuotaData = (array) => {\r\n            //     function checkRoomSize(size) {\r\n            //             //console.log(age)\r\n            //             return size <= 40;\r\n            //           }\r\n            //         filterData.push(array.filter(checkRoomSize));\r\n            //     }\r\n\r\n                // for (let i = 0; i < courseData[0].length; i++) {\r\n                //         if (courseData[0][i][0] <= 40) {\r\n                //             filterData.push(courseData[0][i][1]);\r\n                //         }\r\n                // }\r\n\r\n                for(let i = 0; i< courseData[0].length;i++){\r\n\r\n                    // if (courseData[0][i][0] > 150) {\r\n                        for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData.push(courseData[0][i]);\r\n                        }\r\n                    // }\r\n                    //filterData.push(courseData[0][i]);\r\n                }\r\n                //console.log(filterData);\r\n\r\n                const create2dArray = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData.length;x++){\r\n                        test.push(filterData[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                            //result[i][0] = roomData[0][i];\r\n                            //console.log(roomData[0][i]);\r\n                            // result[i][45] = ['Solat Jumaat'];\r\n                            // result[i][46] = ['Solat Jumaat'];\r\n                                // if(test[k][0] <= result[i][0][1] && result[i][j].length == 0){\r\n                                if(result[i][j].length == 0){\r\n                                    //console.log(test[k][0]);\r\n                                    if(k < test.length) {\r\n                                        //const data = test[k];\r\n                                        //result[i][j] = data ? [data] : [] ;\r\n                                        result[i][j] = [test[k]];\r\n                                        // console.log(test.length);\r\n                                        } else {\r\n                                           result[i][j] = [];\r\n                                        }\r\n                                        k++\r\n                                }else{\r\n                                    result[i][j] = [];\r\n                                }\r\n                                //console.log(roomSz);\r\n\r\n                            // if(result[i][0][1] >  && result[i][j].length == 0){\r\n                            //     const roomSz = test2;\r\n                            //     if(k < test.length) {\r\n                            //         const data = test[k];\r\n                            //         result[i][j] = data ? [data] : [];\r\n                            //         // result[i][j] = data[Math.floor(Math.random())];\r\n\r\n                            //         } else {\r\n                            //            result[i][j] = [];\r\n                            //         }\r\n                            //         k++\r\n                            // }else{\r\n                            //     result[i][j] = [];\r\n                            // }\r\n                            // q++\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n                //console.log(filterData);\r\n\r\n\r\n            let Column = roomData[0].length\r\n            let Row = 50\r\n            // filterQuotaData(EnrollmentQuota);\r\n            var ground = create2dArray(Column,Row);\r\n            //console.log(ground);\r\n            const shuffleArray = (array) => {\r\n                    for(let i = array.length-1;i>0;i--){\r\n                        for(let x = array[i].length-1; x>0;x--){\r\n                            const j = Math.floor(Math.random()*(i+1));\r\n                            const q = Math.floor(Math.random()*(x+1));\r\n                            const temp = array[i][x];\r\n                            array[i][x] = array[j][q];\r\n                            array[j][q] = temp;\r\n                            // if(array[i][j][0] != undefined){\r\n                            //     console.log(array[i][j][0][7]); \r\n                            // }\r\n                            // const temp = array[i];\r\n                            // array[i] = array[j];\r\n                            // array[j] = temp;\r\n                        }            \r\n                    }\r\n                return array;\r\n            }\r\n\r\n            var shuffleArr = shuffleArray(ground)\r\n            console.log(shuffleArr);\r\n\r\n\r\n            const checkViolateHardCont = (array) => {\r\n                let count = 0\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                        if(array[i][j][0] != undefined){\r\n                            // if(array[i][0][0][0] <= room[0][0][1] ){\r\n                            //     console.log(array[i][0][0]); \r\n                            //     console.log(array[i][0][0][0]); \r\n                            //     //console.log(\"room:\"+ room[0][0][1]);\r\n                            //     //console.log(\"array\"+ array[i][0][0][0]);\r\n                            //     //console.log(true);\r\n                            //  }else{\r\n                            //      //console.log(false);\r\n                            //      //console.log(\"array: \"+ array[i][0][0][0]);\r\n                            //      count += 1;\r\n                            // }\r\n                            // console.log(array[i][j][0][6]);\r\n                        }\r\n\r\n                        //console.log(array[i][j][0][0])\r\n                    }\r\n                    if(array[i][45].length == 1 || array[i][46].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n\r\n            const sameGroup = (array) => {\r\n                let x = 0;\r\n                for (let i = 0; i < array.length; i++) {\r\n                     for (let k = i + 1; k < array.length; k++) {\r\n                        // for(let j = 0; j < array[i].length; j++){\r\n                        //     for(let q = 0; q < array[k].length; q++){\r\n                                if(array[i][0][0] != undefined && array[k][0][0] != undefined){\r\n                                    if (array[i][0][0][6] != undefined && array[k][0][0][6] != undefined){\r\n                                        if (array[i][0][0][6] != array[k][0][0][6]){\r\n                                             console.log(\"i:\"+array[i][0][0][6]);\r\n                                             console.log(\"k:\"+array[k][0][0][6]);\r\n                                            \r\n                                        }\r\n                                    }\r\n                                }\r\n                            //}\r\n                        //}\r\n                }\r\n                    \r\n                }\r\n            }\r\n            sameGroup(shuffleArr);\r\n            //console.log('Hard Constraint Violated: '+checkHardCons);\r\n\r\n            var checkHardCons = checkViolateHardCont(shuffleArr);\r\n            console.log('Hard Constraint Violated: '+checkHardCons);\r\n\r\n            // const checktest = (array) => {\r\n            //     for(let i=0;i< array.length; i++){\r\n            //         for(let j = 0; j< roomData[0].length; j++){\r\n            //         }\r\n            //         if(array[i] != undefined){\r\n            //             //console.log(array[0]);\r\n            //             //console.log(array[i][0][0][0]);\r\n            //             //console.log(roomData[0][0][1]);\r\n            //             for(let x = 0; x < array[0].length; x++){\r\n            //                 if(array[0][x][0] != undefined){\r\n            //                     //console.log(array[0][x][0][0]);\r\n            //                     if(array[0][x][0][0] <= roomData[0][i][1] ){\r\n            //                         //console.log(array[0][x][0])\r\n            //                         console.log(true)\r\n            //                     }else{\r\n            //                         console.log(false)\r\n            //                     }\r\n            //                 }\r\n            //                 // if(array[0][x] == roomData[0][i][1]){\r\n            //                 //     console.log(array[0]);\r\n            //                 //     console.log(roomData[0][0][1]);\r\n            //                 // }else{\r\n            //                 //     return false;\r\n            //                 // }\r\n            //             }\r\n\r\n            //             }\r\n            //     }\r\n            // }\r\n\r\n            // var checktestz = checktest(shuffleArr);\r\n            // console.log('Hard Constraint Violated: '+checktestz);\r\n\r\n            const checkViolateSoftCont = (array) => {\r\n                let count = 0;\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                    }\r\n                    if(array[i][49].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n            var checkSoftCons = checkViolateSoftCont(shuffleArr);\r\n            console.log('Soft Constraint Violated: '+checkSoftCons);\r\n            // const iteration = (data) => {\r\n            //     for(let i = 0 ; i < 5 ; i++){\r\n            //         var iter = data;\r\n            //         console.log(iter);\r\n            //     }\r\n            //     return data\r\n            // };\r\n            // iteration(shuffleArr);\r\n             //let z = 0\r\n            \r\n            // while (z < 5) {\r\n            //     var shuffleArr = shuffleArray(ground)\r\n            //     console.log(shuffleArr);\r\n            //     z++;\r\n            //   }\r\n            //console.log(HMS);\r\n            //console.log(courseData)\r\n\r\n        }\r\n\r\n\r\n    const checkViolateHardCont = () => {\r\n\r\n    };\r\n    const checkViolateSoftCont = () => {\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}