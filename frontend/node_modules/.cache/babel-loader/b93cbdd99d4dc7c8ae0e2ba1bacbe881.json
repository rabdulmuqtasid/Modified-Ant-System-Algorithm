{"ast":null,"code":"import React, { useEffect, useState, useContext, Component } from \"react\";\nimport _ from 'lodash';\nimport AntSys from './AntSys.js';\nvar TIMEOUT = 50;\n\nclass Colony extends Component {\n  onstructor(popSize, maxIterations, distances, alpha, beta, pho, ip, Q) {\n    this.popSize = popSize;\n    this.maxIterations = maxIterations;\n    this.distances = distances;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.pho = pho;\n    this.Q = Q;\n    this.ip = ip;\n    this.population = [];\n    this.pheromones = [];\n    this.bestLength = null;\n    this.bestSolution = null;\n    this.continue = false;\n    this.onNewBest = null;\n  }\n\n  setOnNewBest(onNewBest) {\n    this.onNewBest = onNewBest;\n  }\n\n  setOnIteration(onIteration) {\n    this.onIteration = onIteration;\n  }\n\n  initialise() {\n    this.population = [];\n    this.pheromones = [];\n    this.bestSolution = null;\n    this.continue = true;\n\n    for (let i = 0; i < this.popSize; i++) {\n      this.population[i] = new Ant(this.alpha, this.beta, this.Q);\n    }\n\n    for (let x = 0; x < this.distances.length; x++) {\n      this.pheromones[x] = [];\n\n      for (let y = 0; y < this.distances.length; y++) {\n        if (x !== y) {\n          this.pheromones[x][y] = this.ip;\n        }\n      }\n    }\n  }\n\n  iterate() {\n    let x = 0,\n        that = this;\n    doWork(x);\n\n    function doWork(x) {\n      setTimeout(function () {\n        that.sendOutAnts();\n        that.updatePheromones();\n        x++;\n        that.daemonActions(x);\n\n        if (x < that.maxIterations && that.continue) {\n          doWork(x);\n        }\n      }, TIMEOUT);\n    }\n  }\n\n  sendOutAnts() {\n    for (let i = 0; i < this.popSize; i++) {\n      //console.log('Ant', i, this.population[i]);\n      this.population[i].doWalk(this.distances, this.pheromones);\n    }\n  }\n\n  updatePheromones() {\n    this.evaporatePheromones();\n\n    for (let i = 0; i < this.popSize; i++) {\n      this.population[i].layPheromones(this.pheromones);\n    }\n  }\n\n  evaporatePheromones() {\n    for (let x = 0; x < this.distances.length; x++) {\n      for (let y = 0; y < this.distances.length; y++) {\n        if (x !== y) {\n          this.pheromones[x][y] = (1 - this.pho) * this.pheromones[x][y];\n        }\n      }\n    }\n  }\n\n  daemonActions(x) {\n    for (let i = 0; i < this.popSize; i++) {\n      if (!this.bestSolution || this.population[i].walkLength < this.bestLength) {\n        this.bestSolution = _.cloneDeep(this.population[i].walk);\n        this.bestLength = _.clone(this.population[i].walkLength);\n\n        if (this.onNewBest) {\n          this.onNewBest(x, this.bestSolution, this.bestLength);\n        }\n      }\n    }\n\n    if (this.onIteration) {\n      this.onIteration(x, _.clone(this.pheromones));\n    }\n\n    ;\n  }\n\n}\n\n;\nexport default Colony;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/Algorithm/Colony.js"],"names":["React","useEffect","useState","useContext","Component","_","AntSys","TIMEOUT","Colony","onstructor","popSize","maxIterations","distances","alpha","beta","pho","ip","Q","population","pheromones","bestLength","bestSolution","continue","onNewBest","setOnNewBest","setOnIteration","onIteration","initialise","i","Ant","x","length","y","iterate","that","doWork","setTimeout","sendOutAnts","updatePheromones","daemonActions","doWalk","evaporatePheromones","layPheromones","walkLength","cloneDeep","walk","clone"],"mappings":"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","sourcesContent":["import React,{ useEffect,useState, useContext, Component } from \"react\";\r\nimport _ from 'lodash';\r\nimport AntSys from './AntSys.js';\r\n\r\nvar TIMEOUT = 50;\r\n\r\nclass Colony extends Component {\r\n    onstructor(popSize, maxIterations, distances, alpha, beta, pho, ip, Q) {\r\n        this.popSize = popSize;\r\n        this.maxIterations = maxIterations;\r\n        this.distances = distances;\r\n    \r\n        this.alpha = alpha;\r\n        this.beta = beta;\r\n        this.pho = pho;\r\n        this.Q = Q;\r\n        this.ip = ip;\r\n    \r\n        this.population = [];\r\n        this.pheromones = [];\r\n        this.bestLength = null;\r\n        this.bestSolution = null;\r\n        this.continue = false;\r\n    \r\n        this.onNewBest = null;\r\n      }\r\n    \r\n      setOnNewBest(onNewBest) {\r\n        this.onNewBest = onNewBest;\r\n      }\r\n    \r\n      setOnIteration(onIteration) {\r\n        this.onIteration = onIteration;\r\n      }\r\n    \r\n      initialise() {\r\n        this.population = [];\r\n        this.pheromones = [];\r\n        this.bestSolution = null;\r\n        this.continue = true;\r\n    \r\n        for(let i = 0; i < this.popSize; i++) {\r\n          this.population[i] = new Ant(this.alpha, this.beta, this.Q);\r\n        }\r\n    \r\n        for(let x = 0; x < this.distances.length; x++) {\r\n          this.pheromones[x] = [];\r\n          for(let y = 0; y < this.distances.length; y++) {\r\n            if (x !== y) {\r\n              this.pheromones[x][y] = this.ip;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n      iterate() {\r\n        let x = 0, that = this;\r\n        doWork(x);\r\n    \r\n        function doWork(x) {\r\n          setTimeout(function() {\r\n            that.sendOutAnts();\r\n            that.updatePheromones();\r\n            x++;\r\n            that.daemonActions(x);\r\n            if (x < that.maxIterations && that.continue) {\r\n              doWork(x);\r\n            }\r\n          }, TIMEOUT);\r\n        }\r\n      }\r\n    \r\n      sendOutAnts() {\r\n        for(let i = 0; i < this.popSize; i++) {\r\n          //console.log('Ant', i, this.population[i]);\r\n          this.population[i].doWalk(this.distances, this.pheromones);\r\n        }\r\n      }\r\n    \r\n      updatePheromones() {\r\n        this.evaporatePheromones();\r\n        for(let i = 0; i < this.popSize; i++) {\r\n          this.population[i].layPheromones(this.pheromones);\r\n        }\r\n      }\r\n    \r\n      evaporatePheromones() {\r\n        for(let x = 0; x < this.distances.length; x++) {\r\n          for(let y = 0; y < this.distances.length; y++) {\r\n            if (x !== y) {\r\n              this.pheromones[x][y] = (1 - this.pho) * this.pheromones[x][y];\r\n            } \r\n          }\r\n        }\r\n      }\r\n    \r\n      daemonActions(x) {\r\n        for(let i = 0; i < this.popSize; i++) {\r\n          if (!this.bestSolution || this.population[i].walkLength < this.bestLength) {\r\n            this.bestSolution = _.cloneDeep(this.population[i].walk);\r\n            this.bestLength = _.clone(this.population[i].walkLength);\r\n            if (this.onNewBest) {\r\n              this.onNewBest(x, this.bestSolution, this.bestLength);\r\n            }\r\n          }\r\n        }\r\n        if (this.onIteration) {\r\n          this.onIteration(x, _.clone(this.pheromones))\r\n        };\r\n      }\r\n};\r\n\r\nexport default Colony;\r\n"]},"metadata":{},"sourceType":"module"}