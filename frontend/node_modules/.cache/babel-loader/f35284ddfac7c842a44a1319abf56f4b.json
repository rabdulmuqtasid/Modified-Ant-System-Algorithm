{"ast":null,"code":"// import React,{ useEffect,useState, useContext, Component } from \"react\";\n// import _ from 'lodash';\n// import Ant from './Ant.js';\n// var TIMEOUT = 50;\n// class Colony extends Component {\n//     onstructor(popSize, maxIterations, distances, alpha, beta, pho, ip, Q) {\n//         this.popSize = popSize;\n//         this.maxIterations = maxIterations;\n//         this.distances = distances;\n//         this.alpha = alpha;\n//         this.beta = beta;\n//         this.pho = pho;\n//         this.Q = Q;\n//         this.ip = ip;\n//         this.population = [];\n//         this.pheromones = [];\n//         this.bestLength = null;\n//         this.bestSolution = null;\n//         this.continue = false;\n//         this.onNewBest = null;\n//       }\n//       setOnNewBest(onNewBest) {\n//         this.onNewBest = onNewBest;\n//       }\n//       setOnIteration(onIteration) {\n//         this.onIteration = onIteration;\n//       }\n//       initialise() {\n//         this.population = [];\n//         this.pheromones = [];\n//         this.bestSolution = null;\n//         this.continue = true;\n//         for(let i = 0; i < this.popSize; i++) {\n//           this.population[i] = new Ant(this.alpha, this.beta, this.Q);\n//         }\n//         for(let x = 0; x < this.distances.length; x++) {\n//           this.pheromones[x] = [];\n//           for(let y = 0; y < this.distances.length; y++) {\n//             if (x !== y) {\n//               this.pheromones[x][y] = this.ip;\n//             }\n//           }\n//         }\n//       }\n//       iterate() {\n//         let x = 0, that = this;\n//         doWork(x);\n//         function doWork(x) {\n//           setTimeout(function() {\n//             that.sendOutAnts();\n//             that.updatePheromones();\n//             x++;\n//             that.daemonActions(x);\n//             if (x < that.maxIterations && that.continue) {\n//               doWork(x);\n//             }\n//           }, TIMEOUT);\n//         }\n//       }\n//       sendOutAnts() {\n//         for(let i = 0; i < this.popSize; i++) {\n//           //console.log('Ant', i, this.population[i]);\n//           this.population[i].doWalk(this.distances, this.pheromones);\n//         }\n//       }\n//       updatePheromones() {\n//         this.evaporatePheromones();\n//         for(let i = 0; i < this.popSize; i++) {\n//           this.population[i].layPheromones(this.pheromones);\n//         }\n//       }\n//       evaporatePheromones() {\n//         for(let x = 0; x < this.distances.length; x++) {\n//           for(let y = 0; y < this.distances.length; y++) {\n//             if (x !== y) {\n//               this.pheromones[x][y] = (1 - this.pho) * this.pheromones[x][y];\n//             } \n//           }\n//         }\n//       }\n//       daemonActions(x) {\n//         for(let i = 0; i < this.popSize; i++) {\n//           if (!this.bestSolution || this.population[i].walkLength < this.bestLength) {\n//             this.bestSolution = _.cloneDeep(this.population[i].walk);\n//             this.bestLength = _.clone(this.population[i].walkLength);\n//             if (this.onNewBest) {\n//               this.onNewBest(x, this.bestSolution, this.bestLength);\n//             }\n//           }\n//         }\n//         if (this.onIteration) {\n//           this.onIteration(x, _.clone(this.pheromones))\n//         };\n//       }\n//       render() {\n//         return (\n//           <React.Fragment/>\n//         );\n//       }\n// };\n// export default Colony;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/Algorithm/Colony.js"],"names":[],"mappingssourcesContent":["// import React,{ useEffect,useState, useContext, Component } from \"react\";\r\n// import _ from 'lodash';\r\n// import Ant from './Ant.js';\r\n\r\n// var TIMEOUT = 50;\r\n\r\n// class Colony extends Component {\r\n//     onstructor(popSize, maxIterations, distances, alpha, beta, pho, ip, Q) {\r\n//         this.popSize = popSize;\r\n//         this.maxIterations = maxIterations;\r\n//         this.distances = distances;\r\n    \r\n//         this.alpha = alpha;\r\n//         this.beta = beta;\r\n//         this.pho = pho;\r\n//         this.Q = Q;\r\n//         this.ip = ip;\r\n    \r\n//         this.population = [];\r\n//         this.pheromones = [];\r\n//         this.bestLength = null;\r\n//         this.bestSolution = null;\r\n//         this.continue = false;\r\n    \r\n//         this.onNewBest = null;\r\n//       }\r\n    \r\n//       setOnNewBest(onNewBest) {\r\n//         this.onNewBest = onNewBest;\r\n//       }\r\n    \r\n//       setOnIteration(onIteration) {\r\n//         this.onIteration = onIteration;\r\n//       }\r\n    \r\n//       initialise() {\r\n//         this.population = [];\r\n//         this.pheromones = [];\r\n//         this.bestSolution = null;\r\n//         this.continue = true;\r\n    \r\n//         for(let i = 0; i < this.popSize; i++) {\r\n//           this.population[i] = new Ant(this.alpha, this.beta, this.Q);\r\n//         }\r\n    \r\n//         for(let x = 0; x < this.distances.length; x++) {\r\n//           this.pheromones[x] = [];\r\n//           for(let y = 0; y < this.distances.length; y++) {\r\n//             if (x !== y) {\r\n//               this.pheromones[x][y] = this.ip;\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n    \r\n//       iterate() {\r\n//         let x = 0, that = this;\r\n//         doWork(x);\r\n    \r\n//         function doWork(x) {\r\n//           setTimeout(function() {\r\n//             that.sendOutAnts();\r\n//             that.updatePheromones();\r\n//             x++;\r\n//             that.daemonActions(x);\r\n//             if (x < that.maxIterations && that.continue) {\r\n//               doWork(x);\r\n//             }\r\n//           }, TIMEOUT);\r\n//         }\r\n//       }\r\n    \r\n//       sendOutAnts() {\r\n//         for(let i = 0; i < this.popSize; i++) {\r\n//           //console.log('Ant', i, this.population[i]);\r\n//           this.population[i].doWalk(this.distances, this.pheromones);\r\n//         }\r\n//       }\r\n    \r\n//       updatePheromones() {\r\n//         this.evaporatePheromones();\r\n//         for(let i = 0; i < this.popSize; i++) {\r\n//           this.population[i].layPheromones(this.pheromones);\r\n//         }\r\n//       }\r\n    \r\n//       evaporatePheromones() {\r\n//         for(let x = 0; x < this.distances.length; x++) {\r\n//           for(let y = 0; y < this.distances.length; y++) {\r\n//             if (x !== y) {\r\n//               this.pheromones[x][y] = (1 - this.pho) * this.pheromones[x][y];\r\n//             } \r\n//           }\r\n//         }\r\n//       }\r\n    \r\n//       daemonActions(x) {\r\n//         for(let i = 0; i < this.popSize; i++) {\r\n//           if (!this.bestSolution || this.population[i].walkLength < this.bestLength) {\r\n//             this.bestSolution = _.cloneDeep(this.population[i].walk);\r\n//             this.bestLength = _.clone(this.population[i].walkLength);\r\n//             if (this.onNewBest) {\r\n//               this.onNewBest(x, this.bestSolution, this.bestLength);\r\n//             }\r\n//           }\r\n//         }\r\n//         if (this.onIteration) {\r\n//           this.onIteration(x, _.clone(this.pheromones))\r\n//         };\r\n//       }\r\n\r\n//       render() {\r\n//         return (\r\n//           <React.Fragment/>\r\n//         );\r\n//       }\r\n// };\r\n\r\n// export default Colony;\r\n"]},"metadata":{},"sourceType":"module"}