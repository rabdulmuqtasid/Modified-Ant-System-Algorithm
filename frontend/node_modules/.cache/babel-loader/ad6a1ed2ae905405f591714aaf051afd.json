{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GenerateSchedulePage\\\\GenerateSchedulePage.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\nimport './GenerateSchedulePage.css';\n\nconst GenerateSch = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState();\n  const [Keys, setKeys] = useState(); //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\n        let test1 = JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\n        const test2 = responsedata.userWithFiles.Dataset[0].map(Dataset => Dataset['Location']);\n        console.log(\"X value= \" + test2); // for (let i = 0 ; i<test1.length; i++){\n        //      let x = test1[i].Location;\n        //      console.log(\"X value= \" +x);\n        // }\n        //console.log(\"Test 1: \"+ test1);\n        //let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        //let setK = Object.keys(responsedata.files.Dataset[1])\n        //setKeys([setK])\n        //console.log(\"STRINGIFYDATA: \" + stringifyData);\n        //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\n        //console.log(\"Test: \" + test1);\n\n        setCsvData([stringifyData]); //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata.users);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n  let headers = [{\n    label: \"Location\",\n    key: Keys\n  } // { label: \"Room\", key: \"Room\" },\n  // { label: \"Size\", key: \"Size\" },\n  // { label: \"Slot\", key: \"Slot\" }\n  ]; //console.log(\"CsvData: \" + CsvData);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GenerateSch-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Generate Schedule Page\", CsvData && CsvData.map(Dataset => /*#__PURE__*/React.createElement(CSVLink, {\n    data: Dataset,\n    headers: headers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 55\n    }\n  }, \"Download me\"))));\n};\n\nexport default GenerateSch;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GenerateSchedulePage/GenerateSchedulePage.js"],"names":["React","useEffect","useState","useRef","CSVLink","LoadingSpinner","GenerateSch","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","Keys","setKeys","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","test1","test2","map","console","log","ok","Error","message","users","err","headers","label","key"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,OAAO,4BAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,UAAD,EAAaC,cAAb,IAA+BT,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC,CAJyB,CAKzB;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,WAAW,GAAG,YAAW;AAC3BP,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH;AACA,cAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BC,OAA1C,CAApB;AACA,YAAIC,KAAK,GAAEJ,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCA,OAArD,CAAX;AACA,cAAME,KAAK,GAAGR,YAAY,CAACK,aAAb,CAA2BC,OAA3B,CAAmC,CAAnC,EAAsCG,GAAtC,CAA0CH,OAAO,IAAIA,OAAO,CAAC,UAAD,CAA5D,CAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAcH,KAA1B,EAPG,CAQH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAd,QAAAA,UAAU,CAAC,CAACQ,aAAD,CAAD,CAAV,CAnBG,CAoBH;;AACA,YAAI,CAACJ,QAAQ,CAACc,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUb,YAAY,CAACc,OAAvB,CAAN;AACH;;AACDtB,QAAAA,cAAc,CAACQ,YAAY,CAACe,KAAd,CAAd;AACAzB,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OA1BD,CA0BC,OAAM0B,GAAN,EAAU;AACPN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACF,OAAhB;AACH;;AACDxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,KAjCD;;AAkCAO,IAAAA,WAAW;AACd,GApCQ,EAoCP,EApCO,CAAT;AAqCA,MAAIoB,OAAO,GAAG,CACV;AAAEC,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,GAAG,EAACxB;AAAzB,GADU,CAEV;AACA;AACA;AAJU,GAAd,CA3CyB,CAkDvB;;AAGF,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEMF,OAAO,IAAIA,OAAO,CAACgB,GAAR,CAAaH,OAAD,iBAAa,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAIA,OAAjB;AAA0B,IAAA,OAAO,EAAEW,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzB,CAFjB,CAJJ,CADJ;AAaH,CAlED;;AAoEA,eAAe9B,WAAf","sourcesContent":["import React,{ useEffect,useState, useRef } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\nimport './GenerateSchedulePage.css';\r\n\r\nconst GenerateSch = props => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState();\r\n    const [Keys, setKeys] = useState();\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            let test1 =JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset);\r\n            const test2 = responsedata.userWithFiles.Dataset[0].map(Dataset => Dataset['Location']);\r\n            console.log(\"X value= \" + test2);\r\n            // for (let i = 0 ; i<test1.length; i++){\r\n            //      let x = test1[i].Location;\r\n            //      console.log(\"X value= \" +x);\r\n            // }\r\n            //console.log(\"Test 1: \"+ test1);\r\n            //let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            //let setK = Object.keys(responsedata.files.Dataset[1])\r\n            //setKeys([setK])\r\n            //console.log(\"STRINGIFYDATA: \" + stringifyData);\r\n            //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\r\n            //console.log(\"Test: \" + test1);\r\n            setCsvData([stringifyData]);\r\n            //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata.users);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n    let headers = [\r\n        { label: \"Location\", key:Keys  },\r\n        // { label: \"Room\", key: \"Room\" },\r\n        // { label: \"Size\", key: \"Size\" },\r\n        // { label: \"Slot\", key: \"Slot\" }\r\n      ];\r\n\r\n      //console.log(\"CsvData: \" + CsvData);\r\n\r\n\r\n    return (\r\n        <div className=\"GenerateSch-section\">\r\n                            {/* {CsvData && CsvData.map((Dataset)=>(\r\n                    <h2>{Dataset}</h2>\r\n                ))} */}\r\n            <h1>\r\n                Generate Schedule Page\r\n                { CsvData && CsvData.map((Dataset) =>(<CSVLink data = {Dataset} headers={headers}>Download me</CSVLink>))}\r\n                {/* {isLoading && <div className=\"center\"><LoadingSpinner/></div>} */}\r\n            </h1>\r\n            {/* {!isLoading && loadedFile} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GenerateSch;"]},"metadata":{},"sourceType":"module"}