{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\UploadPage\\\\UploadFile.js\";\nimport React, { useCallback, useState } from \"react\";\nimport { parse } from \"papaparse\";\nimport { useDropzone } from 'react-dropzone';\nimport './UploadFile.css';\n\nconst UploadFile = () => {\n  const [Filename, setFileName] = useState([]);\n  const onDrop = useCallback(async acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        setFileName(existing => [...existing, file.name]); //console.log(setFileName);\n        // Do whatever you want with the file contents\n\n        const binaryStr = parse(reader.result, {\n          header: true,\n          blackrows: false\n        });\n        let data = binaryStr.data;\n\n        for (var i = 0; i < data.length; i++) {\n          var data_All = data[i]; //var data_Location = data[i].Location;\n          //var data_Room = data[i].Room;\n          // var data_Size = data[i].Size;\n          // var data_Slot = data[i].Slot;\n\n          console.log(data_All);\n        }\n\n        fetch('http://localhost:5000/api/uploadFile/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            fileName: binaryStr.data\n          })\n        }); //console.log(binaryStr.data)\n      }; //reader.readAsArrayBuffer(file)\n\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    className: \"upload-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }), Filename.map(fileName => /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, fileName)), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    accept: \".csv\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })), isDragActive ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Drop the files here ...\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Drag and drop some files here, or click to select files\"));\n};\n\nexport default UploadFile;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/UploadPage/UploadFile.js"],"names":["React","useCallback","useState","parse","useDropzone","UploadFile","Filename","setFileName","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","existing","name","binaryStr","result","header","blackrows","data","i","length","data_All","fetch","method","headers","body","JSON","stringify","fileName","readAsText","getRootProps","getInputProps","isDragActive","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA4C,OAA5C;AACA,SAAQC,KAAR,QAAoB,WAApB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,OAAO,kBAAP;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAEvB,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBL,QAAQ,CAAC,EAAD,CAAvC;AAEA,QAAMM,MAAM,GAAGP,WAAW,CAAC,MAAMQ,aAAN,IAAuB;AAChDA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACpBX,QAAAA,WAAW,CAAEY,QAAD,IAAa,CAAC,GAAGA,QAAJ,EAAcR,IAAI,CAACS,IAAnB,CAAd,CAAX,CADoB,CAEpB;AACF;;AACE,cAAMC,SAAS,GAAGlB,KAAK,CAACS,MAAM,CAACU,MAAR,EAAe;AAACC,UAAAA,MAAM,EAAC,IAAR;AAAaC,UAAAA,SAAS,EAAE;AAAxB,SAAf,CAAvB;AACA,YAAIC,IAAI,GAAGJ,SAAS,CAACI,IAArB;;AACA,aAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACD,IAAI,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAiC;AAC/B,cAAIE,QAAQ,GAAGH,IAAI,CAACC,CAAD,CAAnB,CAD+B,CAE/B;AACA;AACA;AACA;;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACD;;AACDC,QAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC7CC,UAAAA,MAAM,EAAE,MADqC;AAE7CC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WAFoC;AAK7CC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,YAAAA,QAAQ,EAAEd,SAAS,CAACI;AADD,WAAf;AALuC,SAA1C,CAAL,CAdoB,CAuBpB;AACD,OAxBD,CAL8B,CA8B9B;;;AACAb,MAAAA,MAAM,CAACwB,UAAP,CAAkBzB,IAAlB;AACD,KAhCD;AAkCD,GAnCyB,EAmCvB,EAnCuB,CAA1B;AAqCA,QAAM;AAAC0B,IAAAA,YAAD;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAA8CnC,WAAW,CAAC;AAACI,IAAAA;AAAD,GAAD,CAA/D;AAEA,sBACE,6CAAS6B,YAAY,EAArB;AAAyB,IAAA,SAAS,EAAC,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACG/B,QAAQ,CAACkC,GAAT,CAAcL,QAAD,iBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,QAAL,CADD,CADH,eAIE,+CAAWG,aAAa,EAAxB;AAA4B,IAAA,MAAM,EAAC,MAAnC;AAA0C,IAAA,QAAQ,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,EAMIC,YAAY,gBACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADU,gBAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DARN,CADF;AAaD,CAxDD;;AA0DA,eAAelC,UAAf","sourcesContent":["import React, { useCallback, useState} from \"react\";\r\nimport {parse} from \"papaparse\";\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nimport './UploadFile.css';\r\n\r\nconst UploadFile = () => {\r\n\r\n  const [Filename,setFileName] = useState([]);\r\n\r\n  const onDrop = useCallback(async acceptedFiles => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = () => {\r\n        setFileName((existing)=> [...existing, file.name])\r\n        //console.log(setFileName);\r\n      // Do whatever you want with the file contents\r\n        const binaryStr = parse(reader.result,{header:true,blackrows: false});\r\n        let data = binaryStr.data;\r\n        for(var i= 0; i<data.length; i++){\r\n          var data_All = data[i];\r\n          //var data_Location = data[i].Location;\r\n          //var data_Room = data[i].Room;\r\n          // var data_Size = data[i].Size;\r\n          // var data_Slot = data[i].Slot;\r\n          console.log(data_All);\r\n        }\r\n        fetch('http://localhost:5000/api/uploadFile/', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            fileName: binaryStr.data\r\n          })\r\n        });\r\n        //console.log(binaryStr.data)\r\n      }\r\n      //reader.readAsArrayBuffer(file)\r\n      reader.readAsText(file)\r\n    })\r\n    \r\n  }, [])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n  return (\r\n    <div {...getRootProps()} className=\"upload-file\">\r\n      {Filename.map((fileName)=>(\r\n        <h2>{fileName}</h2>\r\n      ))}\r\n      <input {...getInputProps()} accept=\".csv\" multiple/>\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag and drop some files here, or click to select files</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UploadFile;"]},"metadata":{},"sourceType":"module"}