{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nconst ArraySchedule = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\n        ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\n        ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset)); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n        //const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\n        // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n        //console.log(\"Dataset: \" + ertLocation);\n        // console.log(\"X value= \" + ertCName);\n        // for (let i = 0 ; i<test1.length; i++){\n        //      let x = test1[i].Location;\n        //      console.log(\"X value= \" +x);\n        // }\n        //console.log(\"Test 1: \"+ test1);\n        //let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        //let setK = Object.keys(responsedata.files.Dataset[1])\n        //setKeys([setK])\n        //console.log(\"STRINGIFYDATA: \" + stringifyData);\n        //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\n        //console.log(\"Test: \" + test1);\n        //setCsvData([ertLocation]);\n        //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\n        //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata.users);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []); // const [uploadedData] = Dataset();\n\n  const Room = data => {\n    let x = data.Dataset.map(Dataset => Dataset['Room']);\n    console.log(x);\n  };\n\n  const Course = data => {\n    console.log(data);\n  }; //const test = props.Dataset;\n\n\n  const create2dArray = (row, column) => {\n    var result = [];\n\n    for (let i = 0; i < row; i++) {\n      result[i] = [];\n\n      for (let j = 0; j < column; j++) {\n        result[i][j] = null;\n      }\n    }\n\n    return result;\n  };\n\n  var ground = create2dArray(2, 50);\n  console.log(ground);\n\n  const checkViolateHardCont = () => {};\n\n  const checkViolateSoftCont = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dataset, {\n    ertRoom: Room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["React","useEffect","useState","useContext","ArraySchedule","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","ertCourse","ok","Error","message","users","err","console","log","Room","data","x","map","Course","create2dArray","row","column","result","i","j","ground","checkViolateHardCont","checkViolateSoftCont"],"mappings":"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","sourcesContent":["import React,{ useEffect,useState, useContext } from \"react\";\r\n\r\nconst ArraySchedule = () => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\r\n            ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            //const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n\r\n            //console.log(\"Dataset: \" + ertLocation);\r\n\r\n            // console.log(\"X value= \" + ertCName);\r\n            // for (let i = 0 ; i<test1.length; i++){\r\n            //      let x = test1[i].Location;\r\n            //      console.log(\"X value= \" +x);\r\n            // }\r\n            //console.log(\"Test 1: \"+ test1);\r\n            //let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            //let setK = Object.keys(responsedata.files.Dataset[1])\r\n            //setKeys([setK])\r\n            //console.log(\"STRINGIFYDATA: \" + stringifyData);\r\n            //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\r\n            //console.log(\"Test: \" + test1);\r\n            //setCsvData([ertLocation]);\r\n            //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\r\n            //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata.users);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n    // const [uploadedData] = Dataset();\r\n    const Room = (data) => {\r\n        let x = data.Dataset.map(Dataset => Dataset['Room']);\r\n        console.log(x);\r\n    }\r\n    const Course = (data) => {\r\n        console.log(data);\r\n    }\r\n    //const test = props.Dataset;\r\n    const create2dArray = (row, column) => {\r\n        var result = []\r\n        for(let i = 0; i< row; i++){\r\n            result[i]=[];\r\n            for(let j = 0; j<column; j++){\r\n                result[i][j] = null;            \r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    var ground = create2dArray(2,50);\r\n    console.log(ground);\r\n\r\n    const checkViolateHardCont = () => {\r\n\r\n    };\r\n    const checkViolateSoftCont = () => {\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Dataset ertRoom={Room}/>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}