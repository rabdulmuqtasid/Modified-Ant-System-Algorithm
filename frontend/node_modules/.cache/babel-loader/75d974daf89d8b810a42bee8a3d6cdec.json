{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GetDataset\\\\getDataset.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\n\nconst Dataset = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState([]); //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost:5000/api/files/62453d78d4c3bc106b042909');\n        const responsedata = await response.json(); //let stringifyData = JSON.stringify(responsedata.Dataset);\n\n        let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        setCsvData(existing => [...existing, stringifyData]);\n        console.log(\"Get Data: \" + stringifyData);\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CSVLink, {\n    data: CsvData,\n    enclosingCharacter: `,`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Download Me\"), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 51\n    }\n  })));\n};\n\nexport default Dataset;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GetDataset/getDataset.js"],"names":["React","useEffect","useState","useContext","CSVLink","LoadingSpinner","Dataset","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","files","existing","console","log","ok","Error","message","err"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,UAAD,EAAaC,cAAb,IAA+BT,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC,CAJuB,CAKvB;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMa,WAAW,GAAG,YAAW;AAC3BL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAFG,CAGH;;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,KAAb,CAAmBhB,OAAlC,CAApB;AACAO,QAAAA,UAAU,CAAEU,QAAD,IAAa,CAAC,GAAGA,QAAJ,EAAcJ,aAAd,CAAd,CAAV;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAcN,aAA1B;;AACA,YAAI,CAACJ,QAAQ,CAACW,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUV,YAAY,CAACW,OAAvB,CAAN;AACH;;AACDjB,QAAAA,cAAc,CAACM,YAAD,CAAd;AACAR,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OAZD,CAYC,OAAMoB,GAAN,EAAU;AACPL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACD,OAAhB;AACH;;AACDnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAlBD;;AAmBAK,IAAAA,WAAW;AACd,GArBQ,EAqBN,EArBM,CAAT;AAuBA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAIF,OAAjB;AAA0B,IAAA,kBAAkB,EAAI,GAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADE,EAEKJ,SAAS,iBAAI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAFlB,CADJ;AAMH,CAnCD;;AAqCA,eAAeF,OAAf","sourcesContent":["import React,{ useEffect,useState, useContext } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\nconst Dataset = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            const response = await fetch('http://localhost:5000/api/files/62453d78d4c3bc106b042909');\r\n            const responsedata = await response.json();\r\n            //let stringifyData = JSON.stringify(responsedata.Dataset);\r\n            let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            setCsvData((existing)=> [...existing, stringifyData]);\r\n            console.log(\"Get Data: \"+ stringifyData);\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n      <CSVLink data = {CsvData} enclosingCharacter= {`,`}>Download Me</CSVLink>\r\n            {isLoading && <div className=\"center\"><LoadingSpinner/></div>}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Dataset;"]},"metadata":{},"sourceType":"module"}