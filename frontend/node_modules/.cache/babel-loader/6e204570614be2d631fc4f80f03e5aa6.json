{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875'); //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\n        //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\n\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]); // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, [userId]);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData = [];\n    const dupeData = [];\n    const room = [];\n    room.push(roomData[0]);\n    let hardConstraintViolated = 0;\n    let softConstraintViolated = 0; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    }\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      // if (courseData[0][i][0] > 150) {\n      for (let j = 0; j < courseData[0][i][7]; j++) {\n        filterData.push(courseData[0][i]);\n      } // }\n      //filterData.push(courseData[0][i]);\n\n    }\n\n    const create2dArray = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData.length; x++) {\n        test.push(filterData[x]);\n      }\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 0; j < column; j++) {\n          result[i][j] = [];\n\n          if (result[i][j].length == 0) {\n            if (k < test.length) {\n              result[i][j] = [test[k]];\n            } else {\n              result[i][j] = [];\n            }\n\n            k++;\n          } else {\n            result[i][j] = [];\n          }\n        }\n      }\n\n      return result;\n    }; //console.log(filterData.length);\n\n\n    let Column = roomData[0].length;\n    let Row = 50; // filterQuotaData(EnrollmentQuota);\n\n    var ground = create2dArray(Column, Row); //console.log(ground);\n\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        for (let x = array[i].length - 1; x > 0; x--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const q = Math.floor(Math.random() * (x + 1));\n          const temp = array[i][x];\n          array[i][x] = array[j][q];\n          array[j][q] = temp;\n        }\n      }\n\n      return array;\n    };\n\n    var shuffleArr = shuffleArray(ground);\n    console.log(shuffleArr);\n    let sameCourseData2 = [];\n    let sameCourseData = [];\n\n    const sameGroupCourseViolationData = array => {\n      let k = 0;\n      let r = [];\n\n      do {\n        for (let i = 0; i < array.length; i++) {\n          try {\n            sameCourseData.push(array[i][k][0][6]);\n          } catch {}\n        }\n\n        k++;\n      } while (k < 50); // for(let i = 0; i < array.length; i++){\n      //     console.log(array[i]);\n      // }\n\n\n      return sameCourseData;\n    };\n\n    sameGroupCourseViolationData(shuffleArr);\n    console.log(sameCourseData2);\n\n    function toFindDuplicates(arry) {\n      const uniqueElements = new Set(arry);\n      const filteredElements = arry.filter(item => {\n        if (uniqueElements.has(item)) {\n          uniqueElements.delete(item);\n        } else {\n          return item;\n        }\n      });\n      return [...new Set(filteredElements)];\n    }\n\n    const duplicateElements = toFindDuplicates(sameCourseData); //console.log(duplicateElements);\n    //Check for the H1 violation: same group attend same class\n\n    const sameGroupCourseViolation = (array, array2) => {\n      let k = 0;\n      let count = 0; //console.log(array2);\n\n      for (let i = 0; i < array.length; i++) {\n        try {\n          //console.log(array[i][1][0][6]);\n          let DuplicatesRoom = array[i][2][0][8].filter((item, index) => index !== array[i][2][0][8].indexOf(item)); //console.log(\"Dupelicate: \"+DuplicatesRoom)\n          // let notDuplicatesRoom = array[i][2][0].filter((item, index) => index != array[i][2][0].indexOf(item));\n          // console.log(\"Not Dupelicate: \"+notDuplicatesRoom)\n        } catch {}\n      } // do{\n      //     for (let i = 0; i < array.length; i++) {\n      //         // for(let j = 0; j < array.length; j++){\n      //                 try{\n      //                     //console.log(array[i][k]);                \n      //                     //console.log(k)           \n      //                  }catch{}\n      //             }   \n      // k++\n      // }\n      // while (k < 50)\n      //console.log(array2);\n      // for(let j = 0; j< array[i].length; j++){\n      //}\n      //      for (let k = i + 1; k < array.length; k++) {\n      //         //  for(let j = 0 ; j < array[i].length; j++){\n      //         //         if(array[i][j][0] != undefined && array[k][j][0] != undefined){\n      //         //             if (array[i][j][0][6] != undefined && array[k][j][0][6] != undefined){\n      //         //                 if (array[i][j][0][6] == array[k][j][0][6]){\n      //         //                     // console.log(array[i][j][0]);\n      //         //                     // console.log(array[k][j][0]);\n      //         //                     //count += 1;\n      //         //                 } \n      //         //             }\n      //         //         }      \n      //         //  }\n      // }\n      //}\n\n\n      return count;\n    };\n\n    var sameGroupCourse = sameGroupCourseViolation(shuffleArr, sameCourseData);\n    console.log('Hard Constraint (Same Group) Violation: ' + sameGroupCourse); //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\n\n    let arrayOfCourse = [];\n\n    const accomodateRoomViolation = array => {\n      let count = 0; //console.log(roomData[0].length)\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          //console.log(array[i][j][0]);\n          arrayOfCourse.push(array[i][j][0]);\n\n          try {} catch {}\n        }\n      }\n\n      return count;\n    };\n\n    accomodateRoomViolation(shuffleArr); //console.log('Hard Constraint (Accomodate Room) Violation:' + accomodateRoomData);\n    //console.log(arrayOfCourse)\n\n    let roomRepeat = [];\n\n    const repeatRoomData = array => {\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          try {\n            for (let p = 0; p < array[i].length; p++) {\n              roomRepeat.push(roomData[i][j][1]);\n            }\n          } catch {}\n        }\n      }\n\n      return roomRepeat;\n    };\n\n    repeatRoomData(shuffleArr);\n\n    const compareData = (array, room) => {\n      let count = 0;\n\n      for (let x = 0; x < room.length; x++) {\n        //console.log(room[x]);\n        try {\n          //console.log(array[x][0]);\n          if (array[x][0] <= room[x]) {//console.log(array[x][0]);\n            //console.log(room[x]);\n          } else {\n            if (room[x] == 350 || room[x] == 150) {//count -= 1\n            } else {\n              // console.log(array[x][0]);\n              // console.log(room[x]);\n              count += 1;\n            }\n          }\n        } catch {}\n      }\n\n      return count;\n    };\n\n    let accomodateRoom = compareData(arrayOfCourse, roomRepeat);\n    console.log(\"Hard Constraint (Accomodate Room) Violation:\" + accomodateRoom); //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\n\n    const checkSolatJummatViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i][45].length == 1 || array[i][46].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    };\n\n    var SolatJumaat = checkSolatJummatViolation(shuffleArr);\n    console.log('Hard Constraint (Solat Jumaat) Violation: ' + SolatJumaat); //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\n\n    const sameTeacherViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let k = i + 1; k < array.length; k++) {\n          for (let j = 0; j < array[i].length; j++) {\n            if (array[i][j][0] != undefined && array[k][j][0] != undefined) {\n              if (array[i][j][0][5] != undefined && array[k][j][0][5] != undefined) {\n                if (array[i][j][0][5] == array[k][j][0][5]) {\n                  count += 1;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return count;\n    };\n\n    var sameTeacher = sameTeacherViolation(shuffleArr);\n    console.log('Hard Constraint (Same Teacher) Violation: ' + sameTeacher); //Check for the S1 violation: student have class at the end of the day\n\n    const endOfTheDayClassViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {}\n\n        if (array[i][49].length == 1) {\n          count += 1;\n        }\n      }\n\n      return count;\n    };\n\n    var endOfTheDayClass = endOfTheDayClassViolation(shuffleArr);\n    console.log('Soft Constraint (End Of The Day Class) Violation: ' + endOfTheDayClass); //Check for the S2 violation: student have 2 class in a row\n\n    const twoClassInARowViolation = array => {\n      let count = 0;\n\n      for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].length; j++) {\n          for (let p = j + 1; p < array[i].length; p++) {\n            try {\n              for (let q = 0; q < array[i][j].length; q++) {\n                if (array[i][j][q][6] == array[i][p][q][6] && array[i][j][q][1] != array[i][p][q][1]) {\n                  count += 1;\n                }\n              }\n            } catch {}\n          }\n        }\n      }\n\n      return count;\n    };\n\n    var twoClassInARow = twoClassInARowViolation(shuffleArr);\n    console.log('Soft Constraint (two class in a row) Violation: ' + twoClassInARow);\n\n    const checkViolateHardCont = () => {\n      let totalHC = sameGroupCourse + accomodateRoom + SolatJumaat + sameTeacher;\n      console.log(\"Total Hard Constraint Violation: \" + totalHC);\n      return totalHC;\n    };\n\n    const checkViolateSoftCont = () => {\n      let totalSC = twoClassInARow + endOfTheDayClass;\n      console.log(\"Total Soft Constraint Violation: \" + totalSC);\n      return totalSC;\n    };\n\n    checkViolateHardCont();\n    checkViolateSoftCont(); // const downloadTxtFile = (array) => {\n    //     const element = document.createElement(\"a\");\n    //     let test1 = JSON.stringify(array);\n    //     const file = new Blob([test1], {\n    //       type: \"text/plain\"\n    //     });\n    //     element.href = URL.createObjectURL(file);\n    //     element.download = \"myFile.txt\";\n    //     document.body.appendChild(element);\n    //     element.click();\n    //   };\n    //   downloadTxtFile(shuffleArr)\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["find","forEach","indexOf","React","useEffect","useState","useContext","useParams","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","userId","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","roomName","roomSize","filterData","dupeData","room","push","hardConstraintViolated","softConstraintViolated","i","length","enrollment","code","hms","reduce","results","item","index","array","name","size","notDuplicatesRoom","filter","j","create2dArray","row","column","result","test","k","x","Column","Row","ground","shuffleArray","Math","floor","random","q","temp","shuffleArr","sameCourseData2","sameCourseData","sameGroupCourseViolationData","r","toFindDuplicates","arry","uniqueElements","Set","filteredElements","has","delete","duplicateElements","sameGroupCourseViolation","array2","count","DuplicatesRoom","sameGroupCourse","arrayOfCourse","accomodateRoomViolation","roomRepeat","repeatRoomData","p","compareData","accomodateRoom","checkSolatJummatViolation","SolatJumaat","sameTeacherViolation","undefined","sameTeacher","endOfTheDayClassViolation","endOfTheDayClass","twoClassInARowViolation","twoClassInARow","checkViolateHardCont","totalHC","checkViolateSoftCont","totalSC"],"mappings":"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","sourcesContent":["import { find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n\r\n    const userId = useParams().userId;\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            //const responseRequest = await sendRequest('http://localhost:5000/api/files/users/${userId}');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/${userId}');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[userId]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData  = [];\r\n            const dupeData  = [];\r\n            const room = []\r\n            room.push(roomData[0])\r\n            \r\n            let hardConstraintViolated = 0;\r\n            let softConstraintViolated = 0;\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n \r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n\r\n                for(let i = 0; i< courseData[0].length;i++){\r\n\r\n                    // if (courseData[0][i][0] > 150) {\r\n                        for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            filterData.push(courseData[0][i]);\r\n                        }\r\n                    // }\r\n                    //filterData.push(courseData[0][i]);\r\n                }\r\n\r\n                const create2dArray = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0;\r\n                    for(let x=0; x<filterData.length;x++){\r\n                        test.push(filterData[x]);\r\n                    }\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 0; j<column; j++){\r\n                            result[i][j] = [];\r\n                                if(result[i][j].length == 0){\r\n                                    if(k < test.length) {\r\n                                        result[i][j] = [test[k]];\r\n                                        } else {\r\n                                           result[i][j] = [];\r\n                                        }\r\n                                        k++\r\n                                }else{\r\n                                    result[i][j] = [];\r\n                                }\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n                //console.log(filterData.length);\r\n\r\n\r\n            let Column = roomData[0].length\r\n            let Row = 50\r\n            // filterQuotaData(EnrollmentQuota);\r\n            var ground = create2dArray(Column,Row);\r\n            //console.log(ground);\r\n            const shuffleArray = (array) => {\r\n                    for(let i = array.length-1;i>0;i--){\r\n                        for(let x = array[i].length-1; x>0;x--){\r\n                            const j = Math.floor(Math.random()*(i+1));\r\n                            const q = Math.floor(Math.random()*(x+1));\r\n                            const temp = array[i][x];\r\n                            array[i][x] = array[j][q];\r\n                            array[j][q] = temp;\r\n                        }            \r\n                    }\r\n                return array;\r\n            }\r\n\r\n            var shuffleArr = shuffleArray(ground)\r\n            console.log(shuffleArr);\r\n\r\n            let sameCourseData2 = [] \r\n            let sameCourseData = []\r\n            const sameGroupCourseViolationData = (array) => {\r\n                let k = 0 ;           \r\n                let r = [];\r\n                do{\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        try{\r\n                            sameCourseData.push(array[i][k][0][6]);\r\n                        }catch{}\r\n                            }   \r\n                k++\r\n                }while (k < 50)\r\n\r\n                // for(let i = 0; i < array.length; i++){\r\n                //     console.log(array[i]);\r\n                // }\r\n                    return sameCourseData;\r\n            }\r\n\r\n            sameGroupCourseViolationData(shuffleArr);\r\n            console.log(sameCourseData2);\r\n\r\n\r\n            function toFindDuplicates(arry) {\r\n                const uniqueElements = new Set(arry);\r\n                const filteredElements = arry.filter(item => {\r\n                    if (uniqueElements.has(item)) {\r\n                        uniqueElements.delete(item);\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                });\r\n            \r\n                return [...new Set(filteredElements)]\r\n            }\r\n\r\n            const duplicateElements = toFindDuplicates(sameCourseData);\r\n            //console.log(duplicateElements);\r\n\r\n\r\n            //Check for the H1 violation: same group attend same class\r\n            const sameGroupCourseViolation = (array, array2) => {\r\n                let k = 0 \r\n                let count = 0;                \r\n\r\n                //console.log(array2);\r\n\r\n                for(let i = 0; i < array.length; i++){\r\n\r\n                    try{\r\n                        //console.log(array[i][1][0][6]);\r\n                        let DuplicatesRoom = array[i][2][0][8].filter((item, index) => index !== array[i][2][0][8].indexOf(item));\r\n                        //console.log(\"Dupelicate: \"+DuplicatesRoom)\r\n                        // let notDuplicatesRoom = array[i][2][0].filter((item, index) => index != array[i][2][0].indexOf(item));\r\n                        // console.log(\"Not Dupelicate: \"+notDuplicatesRoom)\r\n                        \r\n                    }catch{}\r\n                }\r\n                // do{\r\n                //     for (let i = 0; i < array.length; i++) {\r\n                //         // for(let j = 0; j < array.length; j++){\r\n    \r\n                //                 try{\r\n                //                     //console.log(array[i][k]);                \r\n                //                     //console.log(k)           \r\n                                \r\n                //                  }catch{}\r\n                //             }   \r\n                // k++\r\n                // }\r\n                // while (k < 50)\r\n\r\n                //console.log(array2);\r\n                    // for(let j = 0; j< array[i].length; j++){\r\n                    //}\r\n                    \r\n                //      for (let k = i + 1; k < array.length; k++) {\r\n                         \r\n                //         //  for(let j = 0 ; j < array[i].length; j++){\r\n                //         //         if(array[i][j][0] != undefined && array[k][j][0] != undefined){\r\n                //         //             if (array[i][j][0][6] != undefined && array[k][j][0][6] != undefined){\r\n                //         //                 if (array[i][j][0][6] == array[k][j][0][6]){\r\n                //         //                     // console.log(array[i][j][0]);\r\n                //         //                     // console.log(array[k][j][0]);\r\n                //         //                     //count += 1;\r\n                //         //                 } \r\n                //         //             }\r\n                //         //         }      \r\n                //         //  }\r\n                // }\r\n                    \r\n                //}\r\n                return count;\r\n            };\r\n            var sameGroupCourse= sameGroupCourseViolation(shuffleArr, sameCourseData);\r\n            console.log('Hard Constraint (Same Group) Violation: '+ sameGroupCourse);\r\n\r\n\r\n            //Check for the H2 violation: classsroom is large enough to accomodate number of student enroll to that class\r\n            let arrayOfCourse = [];\r\n            const accomodateRoomViolation = (array) => {\r\n                let count = 0;\r\n                //console.log(roomData[0].length)\r\n                        for(let i = 0; i< array.length; i++){\r\n                            for(let j = 0; j< array[i].length; j++){\r\n                                //console.log(array[i][j][0]);\r\n                                arrayOfCourse.push(array[i][j][0])\r\n                             try{\r\n                                \r\n                             }catch{}\r\n                            }\r\n                        }\r\n                        return count;\r\n                    }\r\n        \r\n                   accomodateRoomViolation(shuffleArr);\r\n                    //console.log('Hard Constraint (Accomodate Room) Violation:' + accomodateRoomData);\r\n\r\n                    //console.log(arrayOfCourse)\r\n\r\n                    let roomRepeat = []\r\n                    const repeatRoomData = (array) => {\r\n        \r\n                        for(let i = 0; i< array.length; i++){\r\n                            for(let j = 0; j< array[i].length; j++){\r\n                             try{\r\n                                 for(let p = 0; p< array[i].length; p++){\r\n                                     roomRepeat.push(roomData[i][j][1]);\r\n                                 }\r\n                             }catch{}\r\n                            }\r\n                        }\r\n                        return roomRepeat\r\n                    }\r\n                    \r\n                    repeatRoomData(shuffleArr);\r\n\r\n                    const compareData = (array, room) => {\r\n                        let count = 0\r\n                        for(let x =0; x< room.length; x++){\r\n                            //console.log(room[x]);\r\n                            try{\r\n                                //console.log(array[x][0]);\r\n                                if(array[x][0] <= room[x]){\r\n                                    //console.log(array[x][0]);\r\n                                    //console.log(room[x]);\r\n                                }else{\r\n                                    if(room[x] == 350 || room[x] == 150){\r\n                                        //count -= 1\r\n                                    }else{\r\n                                        // console.log(array[x][0]);\r\n                                        // console.log(room[x]);\r\n                                        count += 1   \r\n                                    }\r\n                                }\r\n                            }catch{}\r\n                        }\r\n                        return count\r\n                    }\r\n\r\n                    let accomodateRoom = compareData(arrayOfCourse, roomRepeat)\r\n                    console.log(\"Hard Constraint (Accomodate Room) Violation:\" + accomodateRoom);\r\n\r\n\r\n            //Check for the H4 violation: no one attend class during 12:00 - 14:00 due to solat jumaat\r\n            const checkSolatJummatViolation = (array) => {\r\n                let count = 0\r\n                for(let i = 0; i < array.length; i++){\r\n                    if(array[i][45].length == 1 || array[i][46].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n\r\n            var SolatJumaat = checkSolatJummatViolation(shuffleArr);\r\n            console.log('Hard Constraint (Solat Jumaat) Violation: '+ SolatJumaat);\r\n\r\n\r\n\r\n            //Check for the H5 violation: each teacher can teach 1 subject at 1 room at each slot of time\r\n            const sameTeacherViolation = (array) => {\r\n                let count = 0;\r\n                for (let i = 0; i < array.length; i++) {\r\n                     for (let k = i + 1; k < array.length; k++) {\r\n                         for(let j = 0 ; j < array[i].length; j++){\r\n                                if(array[i][j][0] != undefined && array[k][j][0] != undefined){\r\n                                    if (array[i][j][0][5] != undefined && array[k][j][0][5] != undefined){\r\n                                        if (array[i][j][0][5] == array[k][j][0][5]){\r\n                                            count += 1;\r\n                                        } \r\n                                    }\r\n                                }      \r\n                         }\r\n                    }\r\n                        \r\n                }\r\n                return count;\r\n            };\r\n            var sameTeacher= sameTeacherViolation(shuffleArr);\r\n            console.log('Hard Constraint (Same Teacher) Violation: '+ sameTeacher);\r\n\r\n \r\n\r\n            //Check for the S1 violation: student have class at the end of the day\r\n            const endOfTheDayClassViolation = (array) => {\r\n                let count = 0;\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                    }\r\n                    if(array[i][49].length == 1){\r\n                        count += 1;\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n            var endOfTheDayClass = endOfTheDayClassViolation(shuffleArr);\r\n            console.log('Soft Constraint (End Of The Day Class) Violation: '+ endOfTheDayClass);\r\n\r\n            //Check for the S2 violation: student have 2 class in a row\r\n            const twoClassInARowViolation = (array) => {\r\n                let count = 0;\r\n                for(let i = 0; i < array.length; i++){\r\n                    for(let j = 0; j< array[i].length; j++){\r\n                        for(let p =j+1; p< array[i].length; p++){\r\n                                try{\r\n                                    for(let q = 0; q< array[i][j].length; q++){\r\n                                        if(array[i][j][q][6] == array[i][p][q][6] && array[i][j][q][1] != array[i][p][q][1]){\r\n                                            count +=1;\r\n                                        }\r\n                                    }\r\n                                }catch{}   \r\n                        }\r\n                    }\r\n                }\r\n                return count;\r\n            };\r\n            var twoClassInARow = twoClassInARowViolation(shuffleArr);\r\n            console.log('Soft Constraint (two class in a row) Violation: '+ twoClassInARow);\r\n\r\n            const checkViolateHardCont = () => {\r\n                let totalHC = sameGroupCourse + accomodateRoom + SolatJumaat + sameTeacher\r\n                console.log(\"Total Hard Constraint Violation: \" + totalHC);\r\n                return totalHC;\r\n            };\r\n            const checkViolateSoftCont = () => {\r\n                let totalSC = twoClassInARow + endOfTheDayClass\r\n                console.log(\"Total Soft Constraint Violation: \" + totalSC);\r\n                return totalSC;\r\n            };\r\n        \r\n            checkViolateHardCont()\r\n            checkViolateSoftCont()\r\n\r\n\r\n            // const downloadTxtFile = (array) => {\r\n            //     const element = document.createElement(\"a\");\r\n            //     let test1 = JSON.stringify(array);\r\n            //     const file = new Blob([test1], {\r\n            //       type: \"text/plain\"\r\n            //     });\r\n            //     element.href = URL.createObjectURL(file);\r\n            //     element.download = \"myFile.txt\";\r\n            //     document.body.appendChild(element);\r\n            //     element.click();\r\n            //   };\r\n            //   downloadTxtFile(shuffleArr)\r\n        }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}