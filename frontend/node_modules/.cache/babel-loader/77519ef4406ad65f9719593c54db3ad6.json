{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\RandomSchedule\\\\arraySchedule.js\";\nimport { find, forEach, indexOf } from \"lodash\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\nconst ArraySchedule = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [roomData, setroomData] = useState();\n  const [courseData, setcourseData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\n        //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\n        // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Room'], Dataset['Size']]); //Extract Room\n\n        setroomData([ertRoom]);\n        const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'], Dataset['Course Code'], Dataset['Course Name'], Dataset['Year'], Dataset['Semester'], Dataset['Lecturer'], Dataset['Group'], Dataset['HMS'], Dataset['Programme Code']]); //Extract Enrollment Quota\n\n        setcourseData([ertCourse]); // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(stringifyData);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n\n  if (!isLoading && loadedFile) {\n    const testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const EnrollmentQuota = [];\n    const CourseCode = [];\n    const HMS = [];\n    const roomName = [];\n    const roomSize = [];\n    const filterData = [];\n    const dupeData = []; //console.log(courseData[0][0][1]);\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      let enrollment = [courseData[0][i][0]];\n      let code = [courseData[0][i][1]];\n      let hms = [courseData[0][i][7]];\n      enrollment.reduce(function (results, item, index, array) {\n        results[index] = item;\n        EnrollmentQuota.push(item); //console.log(results)\n      }, {});\n      code.reduce(function (results, item, index, array) {\n        results[index] = item;\n        CourseCode.push(item); //console.log(results)\n      }, {});\n      hms.reduce(function (results, item, index, array) {\n        results[index] = item;\n        HMS.push(item); //console.log(results)\n      }, {});\n    }\n\n    for (let i = 0; i < roomData[0].length; i++) {\n      let name = [roomData[0][i][0]];\n      let size = [roomData[0][i][1]];\n      name.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomName.push(item); //console.log(results)\n      }, {});\n      size.reduce(function (results, item, index, array) {\n        results[index] = item;\n        roomSize.push(item); //console.log(results)\n      }, {});\n    } // console.log(roomName);\n    // console.log(roomSize);\n    // function courseExtract(array){\n    //     let courseArray = []\n    //     for(let i = 0; i <array.length; i++){\n    //         //courseArray = array[i];\n    //         //console.log(courseArray);\n    //     }\n    //     return courseArray;\n    // }\n    // courseExtract([courseData[0]]);\n\n\n    const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item)); //console.log(notDuplicatesRoom);            \n    // const insertData = (array) => {\n    //     for(let j =0; j < notDuplicatesRoom.length; j++){\n    //         //console.log(notDuplicatesRoom[j]);\n    //     function checkAdult(age) {\n    //         //console.log(age)\n    //         return age <= 40;\n    //       }\n    //     filterData.push(array.filter(checkAdult));\n    //     }\n    // }\n    // const insertData = (array) => {\n    // function checkRoomSize(size) {\n    //         //console.log(age)\n    //         return size <= 40;\n    //       }\n    //     filterData.push(array.filter(checkRoomSize));\n    //     console.log(filterData);\n    //     }\n    // const filterQuotaData = (array) => {\n    //     function checkRoomSize(size) {\n    //             //console.log(age)\n    //             return size <= 40;\n    //           }\n    //         filterData.push(array.filter(checkRoomSize));\n    //     }\n    // for (let i = 0; i < courseData[0].length; i++) {\n    //         if (courseData[0][i][0] <= 40) {\n    //             filterData.push(courseData[0][i][1]);\n    //         }\n    // }\n\n    for (let i = 0; i < courseData[0].length; i++) {\n      if (courseData[0][i][0] <= 40) {\n        for (let j = 0; j < courseData[0][i][7]; j++) {\n          //filterData.push(courseData[0][i][1]);\n          filterData.push(courseData[0][i]);\n        } //filterData.push(courseData[0][i][1]);\n\n      }\n    } //console.log(filterData);\n\n\n    const create2dArray = (row, column) => {\n      var result = [];\n      let test = [];\n      let k = 0;\n\n      for (let x = 0; x < filterData.length; x++) {\n        //console.log(filterData[0][x]);\n        test.push(filterData[x]);\n      } // console.log(test.sort());\n\n\n      for (let i = 0; i < row; i++) {\n        result[i] = [];\n\n        for (let j = 1; j < column; j++) {\n          result[i][0] = roomData[0][i]; //console.log(roomData[0][i].sort());\n\n          if (result[i][0][1] > 40) {\n            if (k < test.length) {\n              const data = test[k];\n              result[i][j] = data ? [data] : [];\n            }\n          } else {}\n\n          k++; //console.log(result[i][0][1] <= 40);\n        }\n      }\n\n      return result;\n    }; //console.log(filterData);\n\n\n    let Column = roomData[0].length;\n    let Row = 51; // filterQuotaData(EnrollmentQuota);\n\n    var ground = create2dArray(Column, Row);\n    console.log(ground); //console.log(HMS);\n    //console.log(courseData);\n  }\n\n  const checkViolateHardCont = () => {};\n\n  const checkViolateSoftCont = () => {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ArraySchedule; //result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\n//const Schedule = new Array(10).fill(Array(5).fill(null));\n//console.log(Schedule);\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/RandomSchedule/arraySchedule.js"],"names":["find","forEach","indexOf","React","useEffect","useState","useContext","ArraySchedule","props","isLoading","setIsLoading","loadedFile","setLoaadedFile","roomData","setroomData","courseData","setcourseData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","Dataset","ertRoom","map","ertCourse","ok","Error","message","err","console","log","testData","EnrollmentQuota","CourseCode","HMS","roomName","roomSize","filterData","dupeData","i","length","enrollment","code","hms","reduce","results","item","index","array","push","name","size","notDuplicatesRoom","filter","j","create2dArray","row","column","result","test","k","x","data","Column","Row","ground","checkViolateHardCont","checkViolateSoftCont"],"mappings":"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","sourcesContent":["import { find, forEach, indexOf } from \"lodash\";\r\nimport React,{ useEffect,useState, useContext } from \"react\";\r\n\r\nconst ArraySchedule = (props) => {\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [roomData, setroomData] = useState();\r\n    const [courseData, setcourseData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            //ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0]));\r\n            //ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n\r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset =>[Dataset['Room'],Dataset['Size']]); //Extract Room\r\n            setroomData([ertRoom]);\r\n\r\n            const ertCourse = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => [Dataset['Enrollment Quota'],Dataset['Course Code'],Dataset['Course Name'],Dataset['Year'],Dataset['Semester'],Dataset['Lecturer'],Dataset['Group'],Dataset['HMS'],Dataset['Programme Code']]); //Extract Enrollment Quota\r\n            setcourseData([ertCourse]);\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(stringifyData);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n        if(!isLoading && loadedFile){\r\n            const testData = [1,2,3,4,5,6,7,8,9];\r\n            const EnrollmentQuota = [];\r\n            const CourseCode = [];\r\n            const HMS = [];\r\n            const roomName = [];\r\n            const roomSize = [];\r\n            const filterData  = [];\r\n            const dupeData  = [];\r\n            //console.log(courseData[0][0][1]);\r\n            for(let i = 0; i <courseData[0].length; i++){\r\n                let enrollment = [courseData[0][i][0]];\r\n                let code = [courseData[0][i][1]];\r\n                let hms = [courseData[0][i][7]];\r\n                enrollment.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    EnrollmentQuota.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                code.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    CourseCode.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                hms.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    HMS.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n\r\n            for(let i = 0; i <roomData[0].length; i++){\r\n                let name = [roomData[0][i][0]];\r\n                let size = [roomData[0][i][1]];\r\n                name.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomName.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n                size.reduce(function(results, item, index, array){\r\n                    results[index] = item;\r\n                    roomSize.push(item);\r\n                    //console.log(results)\r\n                },{});\r\n            }\r\n            // console.log(roomName);\r\n            // console.log(roomSize);\r\n            \r\n\r\n            // function courseExtract(array){\r\n            //     let courseArray = []\r\n            //     for(let i = 0; i <array.length; i++){\r\n            //         //courseArray = array[i];\r\n            //         //console.log(courseArray);\r\n            //     }\r\n            //     return courseArray;\r\n            // }\r\n\r\n            // courseExtract([courseData[0]]);\r\n\r\n            \r\n            const notDuplicatesRoom = roomSize.filter((item, index) => index == roomSize.indexOf(item));\r\n\r\n            //console.log(notDuplicatesRoom);            \r\n\r\n            // const insertData = (array) => {\r\n            //     for(let j =0; j < notDuplicatesRoom.length; j++){\r\n            //         //console.log(notDuplicatesRoom[j]);\r\n            //     function checkAdult(age) {\r\n            //         //console.log(age)\r\n            //         return age <= 40;\r\n            //       }\r\n            //     filterData.push(array.filter(checkAdult));\r\n            //     }\r\n            // }\r\n            // const insertData = (array) => {\r\n            // function checkRoomSize(size) {\r\n            //         //console.log(age)\r\n            //         return size <= 40;\r\n            //       }\r\n            //     filterData.push(array.filter(checkRoomSize));\r\n            //     console.log(filterData);\r\n            //     }\r\n\r\n            // const filterQuotaData = (array) => {\r\n            //     function checkRoomSize(size) {\r\n            //             //console.log(age)\r\n            //             return size <= 40;\r\n            //           }\r\n            //         filterData.push(array.filter(checkRoomSize));\r\n            //     }\r\n\r\n                // for (let i = 0; i < courseData[0].length; i++) {\r\n                //         if (courseData[0][i][0] <= 40) {\r\n                //             filterData.push(courseData[0][i][1]);\r\n                //         }\r\n                // }\r\n\r\n                for(let i = 0; i< courseData[0].length;i++){\r\n                    if (courseData[0][i][0] <= 40) {\r\n                        for(let j = 0; j <courseData[0][i][7]; j++){\r\n                            //filterData.push(courseData[0][i][1]);\r\n                            filterData.push(courseData[0][i]);\r\n                        }\r\n                        //filterData.push(courseData[0][i][1]);\r\n\r\n                    }\r\n                }\r\n                //console.log(filterData);\r\n\r\n                const create2dArray = (row, column) => {\r\n                    var result = []\r\n                    let test = []\r\n                    let k = 0\r\n                    for(let x=0; x<filterData.length;x++){\r\n                        //console.log(filterData[0][x]);\r\n                        test.push(filterData[x]);\r\n                    }\r\n                    // console.log(test.sort());\r\n                    for(let i = 0; i< row; i++){\r\n                        result[i]= [];\r\n                        for(let j = 1; j<column; j++){   \r\n                            result[i][0] = roomData[0][i];\r\n                            //console.log(roomData[0][i].sort());\r\n                            if(result[i][0][1] > 40){\r\n                                if(k < test.length) {\r\n                                    const data = test[k];\r\n                                    result[i][j] = data ? [data] : [];\r\n                                    } \r\n                            }else{\r\n                                \r\n                            }\r\n                            k++\r\n                            //console.log(result[i][0][1] <= 40);\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n                //console.log(filterData);\r\n\r\n            let Column = roomData[0].length\r\n            let Row = 51\r\n            // filterQuotaData(EnrollmentQuota);\r\n            var ground = create2dArray(Column,Row);\r\n            console.log(ground);\r\n            //console.log(HMS);\r\n            //console.log(courseData);\r\n        }\r\n\r\n\r\n    const checkViolateHardCont = () => {\r\n\r\n    };\r\n    const checkViolateSoftCont = () => {\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* <Dataset  ertCourse={Course}/> */}\r\n            {/* {!isLoading && loadedFile} */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArraySchedule;\r\n\r\n\r\n//result[i][j]=Course.splice(Math.floor(Math.random()* Course.length),1)[0] // create random placement of Course Value\r\n//const Schedule = new Array(10).fill(Array(5).fill(null));\r\n//console.log(Schedule);\r\n// const Course = [['TE1',4],['TE1',4],['TE1',4],['TE1',3],['TE1',4],['TE1',2],['TE1',4],['TE1',4],['TE1',4],['TE1',3]];\r\n//const Course = [['TE1',2],['TE2',2],['TE3',3],['TE4',4],['TE5',3],['TE6',4],['TE7',4],['TE8',2],['TE9',4]];\r\n//const Course = ['TE1','TE2','TE3','TE4','TE5','TE6','TE7','TE8','TE9'];"]},"metadata":{},"sourceType":"module"}