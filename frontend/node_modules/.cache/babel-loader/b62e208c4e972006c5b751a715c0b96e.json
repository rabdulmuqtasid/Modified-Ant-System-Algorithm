{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acit\\\\Desktop\\\\FYP Code\\\\FYP Code\\\\frontend\\\\src\\\\components\\\\GetDataset\\\\getDataset.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\n\nconst Dataset = props => {\n  const ertRoom = props.ertRoom;\n  const ertCourse = props.ertCourse;\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFile, setLoaadedFile] = useState(false);\n  const [CsvData, setCsvData] = useState(); // const [Keys, setKeys] = useState();\n  //const [uploadedData, setUploadedData] = useState([]);\n  //console.log(\"props dataset:\"+ props.test)\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n\n      try {\n        // const response = await fetch('http://localhost:5000/api/user/');\n        //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\n        const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\n        const responsedata = await response.json();\n        let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset); // ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset));\n\n        ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset)); // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\n\n        const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\n        // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\n        // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\n        // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\n        // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\n        // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\n        // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\n        // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\n        // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\n        // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\n        // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\n        // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\n        // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\n        // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\n        //console.log(\"Dataset: \" + ertLocation);\n        // console.log(\"X value= \" + ertCName);\n        // for (let i = 0 ; i<test1.length; i++){\n        //      let x = test1[i].Location;\n        //      console.log(\"X value= \" +x);\n        // }\n        //console.log(\"Test 1: \"+ test1);\n        //let stringifyData = JSON.stringify(responsedata.files.Dataset);\n        //let setK = Object.keys(responsedata.files.Dataset[1])\n        //setKeys([setK])\n        //console.log(\"STRINGIFYDATA: \" + stringifyData);\n        //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\n        //console.log(\"Test: \" + test1);\n        //setCsvData([ertLocation]);\n        //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\n        //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\n\n        if (!response.ok) {\n          throw new Error(responsedata.message);\n        }\n\n        setLoaadedFile(responsedata.users);\n        setIsLoading(true);\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []); // console.log(\"Csv\" + CsvData);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default Dataset;","map":{"version":3,"sources":["C:/Users/acit/Desktop/FYP Code/FYP Code/frontend/src/components/GetDataset/getDataset.js"],"names":["React","useEffect","useState","useContext","CSVLink","ArraySchedule","LoadingSpinner","Dataset","props","ertRoom","ertCourse","isLoading","setIsLoading","loadedFile","setLoaadedFile","CsvData","setCsvData","sendRequest","response","fetch","responsedata","json","stringifyData","JSON","stringify","userWithFiles","map","ok","Error","message","users","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB;AACA,QAAMC,SAAS,GAAGF,KAAK,CAACE,SAAxB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,cAAb,IAA+BZ,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,EAAtC,CALuB,CAMvB;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMgB,WAAW,GAAG,YAAW;AAC3BL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACH;AACA;AACA,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAIC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BlB,OAA1C,CAApB,CALG,CAMH;;AACAG,QAAAA,SAAS,CAACa,IAAI,CAACC,SAAL,CAAeJ,YAAY,CAACK,aAAb,CAA2BlB,OAA3B,CAAmC,CAAnC,EAAsCA,OAArD,CAAD,CAAT,CAPG,CASH;;AACA,cAAME,OAAO,GAAGW,YAAY,CAACK,aAAb,CAA2BlB,OAA3B,CAAmC,CAAnC,EAAsCA,OAAtC,CAA8CmB,GAA9C,CAAkDnB,OAAO,IAAIA,OAAO,CAAC,MAAD,CAApE,CAAhB,CAVG,CAU4F;AAC/F;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAI,CAACW,QAAQ,CAACS,EAAd,EAAiB;AACb,gBAAM,IAAIC,KAAJ,CAAUR,YAAY,CAACS,OAAvB,CAAN;AACH;;AACDf,QAAAA,cAAc,CAACM,YAAY,CAACU,KAAd,CAAd;AACAlB,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACC,OAhDD,CAgDC,OAAMmB,GAAN,EAAU;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACF,OAAhB;AACH;;AACDjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,KAvDD;;AAwDAK,IAAAA,WAAW;AACd,GA1DQ,EA0DP,EA1DO,CAAT,CATuB,CAsEvB;;AACA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQH,CA/ED;;AAiFA,eAAeV,OAAf","sourcesContent":["import React,{ useEffect,useState, useContext } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport ArraySchedule from \"../RandomSchedule/arraySchedule\";\r\n\r\nimport LoadingSpinner from \"../Modal/LoadingSpinner\";\r\n\r\nconst Dataset = (props) => {\r\n    const ertRoom = props.ertRoom;\r\n    const ertCourse = props.ertCourse;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [loadedFile, setLoaadedFile] = useState(false);\r\n    const [CsvData, setCsvData] = useState();\r\n    // const [Keys, setKeys] = useState();\r\n    //const [uploadedData, setUploadedData] = useState([]);\r\n    //console.log(\"props dataset:\"+ props.test)\r\n    useEffect(()=>{\r\n        const sendRequest = async () =>{\r\n            setIsLoading(true);\r\n            try{\r\n            // const response = await fetch('http://localhost:5000/api/user/');\r\n            //const response = await fetch('http://localhost:5000/api/files/users/624278b29a90a9077e2f65e4');\r\n            const response = await fetch('http://localhost:5000/api/files/users/6280a9b970216c2e558ac875');\r\n            const responsedata = await response.json();\r\n            let stringifyData = JSON.stringify(responsedata.userWithFiles.Dataset);\r\n            // ertRoom(JSON.stringify(responsedata.userWithFiles.Dataset[0].Dataset));\r\n            ertCourse(JSON.stringify(responsedata.userWithFiles.Dataset[1].Dataset));\r\n            \r\n            // const ertLocation = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => [Dataset['Location']]); //Extract Location\r\n            const ertRoom = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Room']); //Extract Room\r\n            // const  ertSize= responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Size']); //Extract Size\r\n            // const ertSlot = responsedata.userWithFiles.Dataset[0].Dataset.map(Dataset => Dataset['Slot']); //Extract Slot\r\n\r\n            // const ertCCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Code']); //Extract Course Code\r\n            // const ertCName = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Course Name']); //Extract Course Name\r\n            // const ertCHours = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Credit Hours']); //Extract Credit Hours\r\n            // const ertYear = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Year']); //Extract Year\r\n            // const ertSemester = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Semester']); //Extract Semester\r\n            // const ertProCode = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Program Code']); //Extract Lecture Code\r\n            // const ertLecturer = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Lecturer']); //Extract Lecturer\r\n            // const ertGroup = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Group']); //Extract Group\r\n            // const ertHMS = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['HMS']); //Extract Hours Meeting Student\r\n            // const ertProgram = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Programme Code']); //Extract Programme Code\r\n            // const ertTtlStudent = responsedata.userWithFiles.Dataset[1].Dataset.map(Dataset => Dataset['Enrollment Quota']); //Extract Enrollment Quota\r\n\r\n            //console.log(\"Dataset: \" + ertLocation);\r\n\r\n            // console.log(\"X value= \" + ertCName);\r\n            // for (let i = 0 ; i<test1.length; i++){\r\n            //      let x = test1[i].Location;\r\n            //      console.log(\"X value= \" +x);\r\n            // }\r\n            //console.log(\"Test 1: \"+ test1);\r\n            //let stringifyData = JSON.stringify(responsedata.files.Dataset);\r\n            //let setK = Object.keys(responsedata.files.Dataset[1])\r\n            //setKeys([setK])\r\n            //console.log(\"STRINGIFYDATA: \" + stringifyData);\r\n            //const test1 = responsedata.files.Dataset.map(Dataset => Dataset['Location']);\r\n            //console.log(\"Test: \" + test1);\r\n            //setCsvData([ertLocation]);\r\n            //setUploadedData(responsedata.userWithFiles.Datasetp[0].Dataset);\r\n            //console.log(\"Get Data: \"+ JSON.stringify(responsedata));\r\n            if (!response.ok){\r\n                throw new Error(responsedata.message);\r\n            }\r\n            setLoaadedFile(responsedata.users);\r\n            setIsLoading(true);\r\n            }catch(err){\r\n                console.log(err.message);\r\n            }\r\n            setIsLoading(false);\r\n            \r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n\r\n    // console.log(\"Csv\" + CsvData);\r\n    return(\r\n        <React.Fragment>\r\n             {/* <h1>test:{ertLocation}</h1> */}\r\n      {/* <CSVLink data = {CsvData} enclosingCharacter= {`,`}>Download Me</CSVLink>\r\n    //         {isLoading && <div className=\"center\"><LoadingSpinner/></div>} */}\r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\nexport default Dataset;"]},"metadata":{},"sourceType":"module"}